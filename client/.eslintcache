[{"/app/src/index.js":"1","/app/src/reportWebVitals.js":"2","/app/src/App.js":"3","/app/src/apolloClient.js":"4","/app/src/components/try.js":"5","/app/src/components/questionPanel.js":"6","/app/src/components/navbar.js":"7","/app/src/components/examSummaryComponent.js":"8","/app/src/applicationState/index.js":"9","/app/src/components/countDownTimer.js":"10","/app/src/components/questionButtonsComponent.js":"11","/app/src/components/questionComponent.js":"12","/app/src/components/questionsNumberDiv.js":"13","/app/src/applicationState/questionsState.js":"14","/app/src/applicationState/currentUserState.js":"15","/app/src/applicationState/authToken.js":"16","/app/src/applicationState/authenticationState.js":"17","/app/src/applicationState/currentIndexState.js":"18","/app/src/applicationState/currentQuestionState.js":"19","/app/src/applicationState/totalQuestions.js":"20","/app/src/methods/index.js":"21","/app/src/methods/examMarking.js":"22","/app/src/methods/saveBulkQuestions.js":"23","/app/src/components/uploadExaminationQuestions.js":"24","/app/src/graphql/queries.js":"25","/app/src/graphql/mutation.js":"26","/app/src/methods/utils.js":"27","/app/src/common/errorDisplay.js":"28","/app/src/components/saveNewQuestion.js":"29","/app/src/common/draftJSToolBar.js":"30","/app/src/components/loadQuestionsComponent.js":"31","/app/src/components/showQuestionComponent.js":"32","/app/src/common/loading.js":"33","/app/src/components/editButton.js":"34","/app/src/components/editQuestionComponent.js":"35","/app/src/components/createExaminationSchedule.js":"36","/app/src/components/addQuestionsToExamination.js":"37","/app/src/common/loadQuestionsComponent.js":"38","/app/src/common/showQuestionsComponent.js":"39","/app/src/components/login.js":"40","/app/src/components/publicRoute.js":"41","/app/src/components/dashboard.js":"42","/app/src/components/activeExams.js":"43","/app/src/applicationState/examDurationState.js":"44","/app/src/localStorage.js":"45","/app/src/applicationState/examStartedState.js":"46","/app/src/methods/generateScripts.js":"47","/app/src/applicationState/skippedQuestions.js":"48","/app/src/components/displayQuizScriptComponent.js":"49","/app/src/components/authorized.js":"50","/app/src/components/notAuthorizedComponent.js":"51","/app/src/components/viewExamResult.js":"52","/app/src/common/selectExaminationComponent.js":"53","/app/src/components/viewCanidateExaminationScripts.js":"54","/app/src/common/displayScriptComponent.js":"55","/app/src/components/createSubjectCourse.js":"56","/app/src/components/activateScheduleExaminationPanel.js":"57","/app/src/components/createUserAccount.js":"58","/app/src/components/usersPanel.js":"59","/app/src/common/usersTablePanel.js":"60","/app/src/components/uploadMedia.js":"61","/app/src/config.js":"62","/app/src/globalStyles.js":"63","/app/src/components/saveSpellingQuestions.js":"64","/app/src/methods/saveBulkSpellingQuestions.js":"65","/app/src/common/examinationTypeComponent.js":"66","/app/src/common/showSpellingComponent.js":"67","/app/src/components/startSpellingExam.js":"68","/app/src/methods/markSpellingScripts.js":"69","/app/src/components/spellingExamSummary.js":"70","/app/src/components/viewSpellingExaminationScript.js":"71","/app/src/common/displaySpellingScriptComponent.js":"72","/app/src/components/displaySpellingScriptComponent.js":"73","/app/src/components/loadSpellingQuestions.js":"74","/app/src/components/saveEssayQuestions.js":"75","/app/src/components/addEssayQuestionsToExam.js":"76","/app/src/common/loadEssayQuestionComponent.js":"77","/app/src/components/startEssayExam.js":"78","/app/src/common/questionNumberDiv.js":"79","/app/src/common/essayQuestionComponent.js":"80","/app/src/common/videoComponent.js":"81","/app/src/common/audioComponent.js":"82","/app/src/common/imageComponent.js":"83","/app/src/methods/markEssayExamination.js":"84","/app/src/components/essayExamSummary.js":"85","/app/src/components/displayEssayScriptComponent.js":"86","/app/src/common/displayEssayScript.js":"87","/app/src/components/viewEssayExaminationScripts.js":"88","/app/src/components/loadEssayQuestions.js":"89","/app/src/components/editEssayQuestions.js":"90"},{"size":575,"mtime":1612184781548,"results":"91","hashOfConfig":"92"},{"size":362,"mtime":1611777938202,"results":"93","hashOfConfig":"92"},{"size":17241,"mtime":1618745475503,"results":"94","hashOfConfig":"92"},{"size":2664,"mtime":1619033833329,"results":"95","hashOfConfig":"92"},{"size":1444,"mtime":1614176466558,"results":"96","hashOfConfig":"92"},{"size":5129,"mtime":1619058287707,"results":"97","hashOfConfig":"92"},{"size":12128,"mtime":1618772182671,"results":"98","hashOfConfig":"92"},{"size":3126,"mtime":1619058477191,"results":"99","hashOfConfig":"92"},{"size":739,"mtime":1617022856149,"results":"100","hashOfConfig":"92"},{"size":1893,"mtime":1618577019655,"results":"101","hashOfConfig":"92"},{"size":2881,"mtime":1614319840854,"results":"102","hashOfConfig":"92"},{"size":3929,"mtime":1614335170093,"results":"103","hashOfConfig":"92"},{"size":3797,"mtime":1614323136525,"results":"104","hashOfConfig":"92"},{"size":615,"mtime":1614257899981,"results":"105","hashOfConfig":"92"},{"size":161,"mtime":1617022814362,"results":"106","hashOfConfig":"92"},{"size":127,"mtime":1612187815653,"results":"107","hashOfConfig":"92"},{"size":126,"mtime":1612177859652,"results":"108","hashOfConfig":"92"},{"size":146,"mtime":1614321097203,"results":"109","hashOfConfig":"92"},{"size":841,"mtime":1619057095842,"results":"110","hashOfConfig":"92"},{"size":300,"mtime":1612258094684,"results":"111","hashOfConfig":"92"},{"size":484,"mtime":1618647358188,"results":"112","hashOfConfig":"92"},{"size":695,"mtime":1612602707482,"results":"113","hashOfConfig":"92"},{"size":3783,"mtime":1612890464847,"results":"114","hashOfConfig":"92"},{"size":8774,"mtime":1617906752914,"results":"115","hashOfConfig":"92"},{"size":9519,"mtime":1618741933284,"results":"116","hashOfConfig":"92"},{"size":6466,"mtime":1619031965797,"results":"117","hashOfConfig":"92"},{"size":2100,"mtime":1619058921941,"results":"118","hashOfConfig":"92"},{"size":530,"mtime":1612808215409,"results":"119","hashOfConfig":"92"},{"size":12174,"mtime":1613641850530,"results":"120","hashOfConfig":"92"},{"size":3116,"mtime":1613302814265,"results":"121","hashOfConfig":"92"},{"size":7864,"mtime":1618157981872,"results":"122","hashOfConfig":"92"},{"size":1874,"mtime":1613216194217,"results":"123","hashOfConfig":"92"},{"size":221,"mtime":1613156925491,"results":"124","hashOfConfig":"92"},{"size":408,"mtime":1613214862137,"results":"125","hashOfConfig":"92"},{"size":347,"mtime":1618741085438,"results":"126","hashOfConfig":"92"},{"size":8964,"mtime":1618479476228,"results":"127","hashOfConfig":"92"},{"size":13538,"mtime":1619034077533,"results":"128","hashOfConfig":"92"},{"size":6781,"mtime":1617996187695,"results":"129","hashOfConfig":"92"},{"size":918,"mtime":1618487535548,"results":"130","hashOfConfig":"92"},{"size":3993,"mtime":1617022814362,"results":"131","hashOfConfig":"92"},{"size":503,"mtime":1613655136750,"results":"132","hashOfConfig":"92"},{"size":2472,"mtime":1613727762605,"results":"133","hashOfConfig":"92"},{"size":8252,"mtime":1618541168203,"results":"134","hashOfConfig":"92"},{"size":142,"mtime":1614252954922,"results":"135","hashOfConfig":"92"},{"size":136,"mtime":1613814188283,"results":"136","hashOfConfig":"92"},{"size":131,"mtime":1613912033810,"results":"137","hashOfConfig":"92"},{"size":1051,"mtime":1614243900615,"results":"138","hashOfConfig":"92"},{"size":100,"mtime":1612427033869,"results":"139","hashOfConfig":"92"},{"size":3209,"mtime":1614455837952,"results":"140","hashOfConfig":"92"},{"size":1462,"mtime":1617022814358,"results":"141","hashOfConfig":"92"},{"size":324,"mtime":1614423433756,"results":"142","hashOfConfig":"92"},{"size":8716,"mtime":1618739385045,"results":"143","hashOfConfig":"92"},{"size":3560,"mtime":1617965752950,"results":"144","hashOfConfig":"92"},{"size":360,"mtime":1614455025467,"results":"145","hashOfConfig":"92"},{"size":6138,"mtime":1614455277732,"results":"146","hashOfConfig":"92"},{"size":4097,"mtime":1617957092327,"results":"147","hashOfConfig":"92"},{"size":7251,"mtime":1618033485203,"results":"148","hashOfConfig":"92"},{"size":6558,"mtime":1614590432899,"results":"149","hashOfConfig":"92"},{"size":5400,"mtime":1617022814362,"results":"150","hashOfConfig":"92"},{"size":5949,"mtime":1617022814362,"results":"151","hashOfConfig":"92"},{"size":6677,"mtime":1617384248108,"results":"152","hashOfConfig":"92"},{"size":84,"mtime":1617381763317,"results":"153","hashOfConfig":"92"},{"size":584,"mtime":1618740366203,"results":"154","hashOfConfig":"92"},{"size":11508,"mtime":1618167901083,"results":"155","hashOfConfig":"92"},{"size":1033,"mtime":1617906672013,"results":"156","hashOfConfig":"92"},{"size":4323,"mtime":1618477371235,"results":"157","hashOfConfig":"92"},{"size":689,"mtime":1617996265061,"results":"158","hashOfConfig":"92"},{"size":10141,"mtime":1619057939220,"results":"159","hashOfConfig":"92"},{"size":753,"mtime":1618064531263,"results":"160","hashOfConfig":"92"},{"size":2857,"mtime":1619058256629,"results":"161","hashOfConfig":"92"},{"size":384,"mtime":1618116785252,"results":"162","hashOfConfig":"92"},{"size":5937,"mtime":1618124239403,"results":"163","hashOfConfig":"92"},{"size":3183,"mtime":1618118577431,"results":"164","hashOfConfig":"92"},{"size":10463,"mtime":1618167868706,"results":"165","hashOfConfig":"92"},{"size":8780,"mtime":1618744687810,"results":"166","hashOfConfig":"92"},{"size":10644,"mtime":1618488915890,"results":"167","hashOfConfig":"92"},{"size":3987,"mtime":1618484798454,"results":"168","hashOfConfig":"92"},{"size":8028,"mtime":1619058189366,"results":"169","hashOfConfig":"92"},{"size":1814,"mtime":1618649705562,"results":"170","hashOfConfig":"92"},{"size":2784,"mtime":1618601786706,"results":"171","hashOfConfig":"92"},{"size":447,"mtime":1618575334036,"results":"172","hashOfConfig":"92"},{"size":424,"mtime":1618575311169,"results":"173","hashOfConfig":"92"},{"size":323,"mtime":1618586978726,"results":"174","hashOfConfig":"92"},{"size":994,"mtime":1618682311271,"results":"175","hashOfConfig":"92"},{"size":2770,"mtime":1619058448026,"results":"176","hashOfConfig":"92"},{"size":2844,"mtime":1618740270322,"results":"177","hashOfConfig":"92"},{"size":6572,"mtime":1618740315616,"results":"178","hashOfConfig":"92"},{"size":366,"mtime":1618739732394,"results":"179","hashOfConfig":"92"},{"size":11191,"mtime":1618771191983,"results":"180","hashOfConfig":"92"},{"size":11669,"mtime":1618771387256,"results":"181","hashOfConfig":"92"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},"n1sie1",{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"184"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"196","messages":"197","errorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"184"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"184"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"184"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"184"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"184"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"184"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"184"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"184"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"184"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"184"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"184"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"251"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"184"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"184"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"184"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"273","messages":"274","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"184"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"184"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"184"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"184"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"184"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"184"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"184"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"184"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"184"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"184"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"184"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"184"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"184"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"184"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"184"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"184"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"184"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"184"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"184"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"184"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"184"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"184"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"184"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"378","messages":"379","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"184"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"184"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390","usedDeprecatedRules":"184"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"395","messages":"396","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"184"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"184"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"184"},"/app/src/index.js",[],["408","409"],"/app/src/reportWebVitals.js",[],"/app/src/App.js",["410","411"],"import React, { useEffect, useState } from \"react\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { useRecoilState } from \"recoil\";\nimport state from \"./applicationState\";\nimport store from \"store\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport apolloClient from \"./apolloClient\";\n\n//importation of routes in the system starts here\n\nimport Navigation from \"./components/navbar\";\nimport QuestionPanel from \"./components/questionPanel\";\nimport TryPage from \"./components/try\";\n\nimport ExamSummaryComponent from \"./components/examSummaryComponent\";\n\nimport UploadExaminationQuestion from \"./components/uploadExaminationQuestions\";\nimport AddQuestion from \"./components/saveNewQuestion\";\nimport LoadQuestionsComponent from \"./components/loadQuestionsComponent\";\nimport EditQuestionComponent from \"./components/editQuestionComponent\";\nimport CreateExaminationSchedule from \"./components/createExaminationSchedule\";\nimport AddQuestionsToExaminationComponent from \"./components/addQuestionsToExamination\";\nimport LoginPage from \"./components/login\";\nimport PublicRoute from \"./components/publicRoute\";\nimport Dashboard from \"./components/dashboard\";\nimport ActiveExaminationPage from \"./components/activeExams\";\nimport DisplayQuizScriptComponent from \"./components/displayQuizScriptComponent\";\nimport AuthorizedComponent from \"./components/authorized\";\nimport ViewExamResult from \"./components/viewExamResult\";\nimport ViewCanidateExaminationScript from \"./components/viewCanidateExaminationScripts\";\nimport CreateSubjectCourse from \"./components/createSubjectCourse\";\nimport ActivateExamSchedule from \"./components/activateScheduleExaminationPanel\";\nimport CreateUserAccount from \"./components/createUserAccount\";\nimport UsersPanel from \"./components/usersPanel\";\nimport UploadMedia from \"./components/uploadMedia\";\nimport SaveSpellingQuestions from \"./components/saveSpellingQuestions\";\nimport StartSpellingExam from \"./components/startSpellingExam\";\nimport SpellingExamSummary from \"./components/spellingExamSummary\";\nimport DisplaySpellingQuizScriptComponent from \"./components/displaySpellingScriptComponent\";\nimport ViewCanidateSpellingScripts from \"./components/viewSpellingExaminationScript\";\nimport ViewCanidateEssayScripts from \"./components/viewEssayExaminationScripts\";\nimport LoadSpellingQuestions from \"./components/loadSpellingQuestions\";\nimport LoadEssayQuestion from \"./components/loadEssayQuestions\";\nimport SaveEssayQuestions from \"./components/saveEssayQuestions\";\nimport AddEssayQuestionsToExam from \"./components/addEssayQuestionsToExam\";\nimport StartEssayExam from \"./components/startEssayExam\";\nimport EssayExamSummary from \"./components/essayExamSummary\";\nimport DisplayEssayQuizScriptComponent from \"./components/displayEssayScriptComponent\";\nimport EditEssayQuestion from \"./components/editEssayQuestions\";\nimport { useHistory } from \"react-router-dom\";\n\nimport GlobalStyle from \"./globalStyles\";\n//import localStorage from \"./localStorage\";\n\nconst AppStyles = styled.div`\n  .mainComponent {\n    margin-top: 50px;\n  }\n`;\n\nfunction App(props) {\n  const [isAuth, setIsAuth] = useRecoilState(state.authState);\n  const [currentLoginUser, setcurrentLoginUser] = useRecoilState(\n    state.currentLoginUserState\n  );\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (!currentLoginUser) {\n      //load the stuffs from the store if it exists\n      const user = store.get(\"currentLoginUser\");\n      if (user) {\n        const parsedUserData = user && JSON.parse(user);\n        if (parsedUserData.hasOwnProperty(\"id\")) {\n          setcurrentLoginUser(parsedUserData);\n          setIsAuth(true);\n        }\n      }\n    }\n    setLoading(false);\n  }, [currentLoginUser]);\n\n  return (\n    <ApolloProvider client={apolloClient}>\n      <GlobalStyle />\n      <Router>\n        <Navigation\n          authenticated={isAuth}\n          currentLoginUser={currentLoginUser}\n          history={useHistory()}\n        />\n        <AppStyles>\n          <Switch>\n            <React.Fragment>\n              <div className=\"container-fluid\">\n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <div className=\"mainComponent\">\n                      <AuthorizedComponent\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\"]}\n                        component={ViewCanidateExaminationScript}\n                        exact\n                        path=\"/view_canidate_script\"\n                      />\n                      <AuthorizedComponent\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\"]}\n                        component={ViewCanidateSpellingScripts}\n                        exact\n                        path=\"/view_canidate_spelling_script\"\n                      />\n                      <AuthorizedComponent\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\"]}\n                        component={ViewCanidateEssayScripts}\n                        exact\n                        path=\"/view_canidate_essay_script\"\n                      />\n                      <AuthorizedComponent\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\"]}\n                        component={UploadMedia}\n                        exact\n                        path=\"/upload_media\"\n                      />\n                      <AuthorizedComponent\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\"]}\n                        component={UsersPanel}\n                        exact\n                        path=\"/users\"\n                      />\n                      <AuthorizedComponent\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\"]}\n                        component={CreateUserAccount}\n                        exact\n                        path=\"/create_user_account\"\n                      />\n                      <AuthorizedComponent\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\"]}\n                        component={ActivateExamSchedule}\n                        exact\n                        path=\"/activate_exams\"\n                      />\n                      <AuthorizedComponent\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\"]}\n                        component={CreateSubjectCourse}\n                        exact\n                        path=\"/create_subject\"\n                      />\n                      <AuthorizedComponent\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"student\"]}\n                        component={QuestionPanel}\n                        exact\n                        path=\"/exam/multi_choice/:examId\"\n                      />\n                      <AuthorizedComponent\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"student\"]}\n                        component={StartSpellingExam}\n                        exact\n                        path=\"/exam/spelling/:examId\"\n                      />\n                      <AuthorizedComponent\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"student\"]}\n                        component={StartEssayExam}\n                        exact\n                        path=\"/exam/short_essay/:examId\"\n                      />\n                      <AuthorizedComponent\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\"]}\n                        component={ViewExamResult}\n                        exact\n                        path=\"/exam_results\"\n                      />\n                      <AuthorizedComponent\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\", \"student\"]}\n                        component={DisplayQuizScriptComponent}\n                        exact\n                        path=\"/examination_script/:examId\"\n                      />\n                      <AuthorizedComponent\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\", \"student\"]}\n                        component={DisplaySpellingQuizScriptComponent}\n                        exact\n                        path=\"/spelling_examination_script/:examId\"\n                      />\n                      <AuthorizedComponent\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\", \"student\"]}\n                        component={DisplayEssayQuizScriptComponent}\n                        exact\n                        path=\"/essay_examination_script/:examId\"\n                      />\n                      <Route exact path=\"/try\" component={TryPage} />\n                      <AuthorizedComponent\n                        loading={loading}\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\", \"student\"]}\n                        component={ExamSummaryComponent}\n                        exact\n                        path=\"/exam_summary/:examId\"\n                      />\n                      <AuthorizedComponent\n                        loading={loading}\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\", \"student\"]}\n                        component={SpellingExamSummary}\n                        exact\n                        path=\"/exam_summary/spelling/:examId\"\n                      />\n                      <AuthorizedComponent\n                        loading={loading}\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\", \"student\"]}\n                        component={EssayExamSummary}\n                        exact\n                        path=\"/exam_summary/essay/:examId\"\n                      />\n                      <AuthorizedComponent\n                        loading={loading}\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\"]}\n                        component={UploadExaminationQuestion}\n                        exact\n                        path=\"/upload_questions\"\n                      />\n                      <AuthorizedComponent\n                        loading={loading}\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\"]}\n                        component={AddQuestion}\n                        exact\n                        path=\"/add_question\"\n                      />\n                      <AuthorizedComponent\n                        loading={loading}\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\"]}\n                        component={SaveSpellingQuestions}\n                        exact\n                        path=\"/add_spelling_question\"\n                      />\n                      <AuthorizedComponent\n                        loading={loading}\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\"]}\n                        component={SaveEssayQuestions}\n                        exact\n                        path=\"/add_essay_question\"\n                      />\n\n                      <AuthorizedComponent\n                        loading={loading}\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\"]}\n                        component={EditEssayQuestion }\n                        exact\n                        path=\"/edit_essay_question\"\n                      />\n\n                      <AuthorizedComponent\n                        loading={loading}\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\"]}\n                        component={LoadQuestionsComponent}\n                        exact\n                        path=\"/load_multi_choice_question\"\n                      />\n                      <AuthorizedComponent\n                        loading={loading}\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\"]}\n                        component={LoadSpellingQuestions}\n                        exact\n                        path=\"/load_spelling_question\"\n                      />\n                      <AuthorizedComponent\n                        loading={loading}\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\"]}\n                        component={LoadEssayQuestion}\n                        exact\n                        path=\"/load_essay_question\"\n                      />\n\n                      <AuthorizedComponent\n                        loading={loading}\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\"]}\n                        component={EditQuestionComponent}\n                        exact\n                        path=\"/edit_question\"\n                      />\n                      <AuthorizedComponent\n                        loading={loading}\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\"]}\n                        component={CreateExaminationSchedule}\n                        exact\n                        path=\"/create_examination_schedule\"\n                      />\n                      <AuthorizedComponent\n                        loading={loading}\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\"]}\n                        component={AddQuestionsToExaminationComponent}\n                        exact\n                        path=\"/add_questions_examination\"\n                      />\n                      <AuthorizedComponent\n                        loading={loading}\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"super-admin\"]}\n                        component={AddEssayQuestionsToExam}\n                        exact\n                        path=\"/add_essay_questions_examination\"\n                      />\n                      <PublicRoute\n                        component={LoginPage}\n                        {...props}\n                        path={\"/login\"}\n                        authenticated={isAuth}\n                        exact\n                      />\n                      <Route exact path=\"/dashboard\" component={Dashboard} />\n                      <AuthorizedComponent\n                        loading={loading}\n                        currentLoginUser={currentLoginUser}\n                        authenticated={isAuth}\n                        authorizedRole={[\"student\"]}\n                        component={ActiveExaminationPage}\n                        exact\n                        path=\"/exam_start_page\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </React.Fragment>\n          </Switch>\n        </AppStyles>\n      </Router>\n    </ApolloProvider>\n  );\n}\nexport default App;\n","/app/src/apolloClient.js",["412"],"/app/src/components/try.js",[],"/app/src/components/questionPanel.js",["413","414"],"/app/src/components/navbar.js",["415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454"],"import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useRecoilState } from \"recoil\";\nimport state from \"../applicationState\";\nimport client from \"../apolloClient\";\nimport { useHistory } from \"react-router-dom\";\nimport store from \"store\";\n\nconst CustomNavbarStyles = styled.div`\n  nav {\n    background: #222;\n    padding: 0 15px;\n  }\n  a {\n    color: white;\n    text-decoration: none;\n  }\n\n  .menu,\n  .submenu {\n    list-style-type: none;\n    z-index: 30000;\n  }\n  .logo {\n    font-size: 20px;\n    padding: 7.5px 10px 7.5px 0;\n  }\n  .item {\n    padding: 10px;\n    color: #fff;\n  }\n  .item.button {\n    padding: 9px 5px;\n  }\n  .item:not(.button) a:hover,\n  .item a:hover::after {\n    color: #ccc;\n  }\n\n  /*mobile menu */\n\n  .menu {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    align-items: center;\n    cursor: pointer;\n  }\n\n  .menu li a {\n    display: block;\n    padding: 15px 5px;\n  }\n\n  .menu li.subitem a {\n    padding: 15px;\n    text-align: start;\n  }\n\n  .toggle {\n    order: 1;\n    font-size: 20px;\n  }\n  .item.button {\n    order: 2;\n  }\n\n  .item {\n    order: 3;\n    width: 100%;\n    text-align: center;\n    display: none;\n  }\n\n  .active .item {\n    display: block;\n  }\n\n  .button.secondary {\n    border-bottom: 1px #444 solid;\n  }\n\n  /*submenu up for mobile screens */\n\n  .submenu {\n    display: none;\n  }\n  .submenu-active .submenu {\n    display: block;\n    cursor: pointer;\n  }\n  .has-submenu {\n    font-size: 16px;\n    color: white;\n  }\n\n  .has-submenu > a::after {\n    font-family: \"Font Awesome 5 Free\";\n    font-size: 12px;\n    line-height: 16px;\n    font-weight: 900;\n    content: \"\\f078\";\n    color: white;\n    padding-left: 5px;\n  }\n\n  .subitem a {\n    padding: 10px 15px;\n  }\n  .submenu-active {\n    background-color: #111;\n    border-radius: 3px;\n  }\n\n  /* Tablet menu */\n\n  @media all and (min-width: 700px) {\n    .menu {\n      justify-content: center;\n    }\n    .logo {\n      flex: 1;\n    }\n    .item.button {\n      width: auto;\n      order: 1;\n      display: block;\n    }\n    .toggle {\n      flex: 1;\n      text-align: right;\n      order: 2;\n    }\n    /*button up from tablet screen */\n    .menu li.button a {\n      padding: 10px 15px;\n      margin: 5px 0;\n    }\n    .button a {\n      background: #0080ff;\n      border: 1px royalblue solid;\n    }\n    .button.secondary a {\n      background: transparent;\n      border: 1px #0080ff solid;\n    }\n    .button a:hover {\n      text-decoration: none;\n    }\n    .button:not(.secondary)a:hover {\n      background: royalblue;\n      border-color: darkblue;\n    }\n  }\n\n  /*Desktop menu styles */\n\n  @media all and (min-width: 960px) {\n    .menu {\n      align-items: flex-start;\n      flex-wrap: nowrap;\n      background: none;\n    }\n    .logo {\n      order: 0;\n    }\n    .item {\n      order: 1;\n      display: block;\n      position: relative;\n      width: auto;\n    }\n    .button {\n      order: 2;\n    }\n    .submenu-active .submenu {\n      display: block;\n      position: absolute;\n      left: 0;\n      top: 68px;\n      background: #111;\n    }\n    .toggle {\n      display: none;\n    }\n    .submenu-active {\n      border-radius: 0;\n    }\n  }\n`;\n\nconst CustomNavbar = ({ currentLoginUser, authenticated }) => {\n  const [isAuth, setIsAuth] = useRecoilState(state.authState);\n  const [user, setcurrentLoginUser] = useRecoilState(\n    state.currentLoginUserState\n  );\n  const [token, setToken] = useRecoilState(state.authToken);\n\n  let history = useHistory();\n\n  useEffect(() => {\n    const toggle = document.querySelector(\".toggle\");\n    const menu = document.querySelector(\".menu\");\n    const items = document.querySelectorAll(\".item\");\n\n    function toggleMenu() {\n      if (menu.classList.contains(\"active\")) {\n        menu.classList.remove(\"active\");\n        toggle.querySelector(\"a\").innerHTML = \"<i class='fas fa-bars'></i>\";\n      } else {\n        menu.classList.add(\"active\");\n        toggle.querySelector(\"a\").innerHTML = \"<i class='fas fa-times'></i>\";\n      }\n    }\n    toggle.addEventListener(\"click\", toggleMenu);\n\n    function toggleItem() {\n      if (this.classList.contains(\"submenu-active\")) {\n        this.classList.remove(\"submenu-active\");\n      } else if (menu.querySelector(\".submenu-active\")) {\n        menu\n          .querySelector(\".submenu-active\")\n          .classList.remove(\"submenu-active\");\n        this.classList.add(\"submenu-active\");\n      } else {\n        this.classList.add(\"submenu-active\");\n      }\n    }\n\n    for (let item of items) {\n      if (item.querySelector(\".submenu\")) {\n        item.addEventListener(\"click\", toggleItem);\n        item.addEventListener(\"keypress\", toggleItem);\n      }\n    }\n\n    /*Close Submenu From Anywhere */\n\n    function closeSubmenu(e) {\n      let isClickInside = menu.contains(e.target);\n      if (!isClickInside && menu.querySelector(\".submenu-active\")) {\n        menu\n          .querySelector(\".submenu-active\")\n          .classList.remove(\"submenu-active\");\n      }\n    }\n\n    document.addEventListener(\"click\", closeSubmenu);\n\n    return () => {\n      //clean up operation here\n      toggle.removeEventListener(\"click\", toggleMenu);\n      for (let item of items) {\n        if (item.querySelector(\".submenu\")) {\n          item.removeEventListener(\"click\", toggleItem);\n          item.removeEventListener(\"keypress\", toggleItem);\n        }\n      }\n      document.removeEventListener(\"click\", closeSubmenu);\n    };\n  });\n\n  const handleLogOut = (e) => {\n    e.preventDefault();\n    setIsAuth(false);\n    setcurrentLoginUser({});\n    setToken(\"\");\n    store.clearAll();\n    client.clearStore();\n    history.replace(\"/\");\n  };\n\n  const handleLogIn = (e) => {\n    e.preventDefault();\n    history.push(\"/login\");\n  };\n\n  return (\n    <CustomNavbarStyles>\n      <nav>\n        <ul className=\"menu\">\n          <li className=\"logo\">\n            <a href=\"#\">CBT</a>\n          </li>\n\n          {authenticated && user && user.userType == \"super-admin\" && (\n            <li className=\"item\" onClick={() => history.push(\"/dashboard\")}>\n              <a>Dashboard</a>\n            </li>\n          )}\n\n          {authenticated && user && user.userType == \"super-admin\" && (\n            <li className=\"item has-submenu\">\n              <a tabIndex=\"0\">User Accounts</a>\n              <ul className=\"submenu\">\n                <li\n                  className=\"subitem\"\n                  onClick={() => history.push(\"/create_user_account\")}\n                >\n                  <a>Create User Account</a>\n                </li>\n\n                <li className=\"subitem\" onClick={() => history.push(\"/users\")}>\n                  <a>Users Account</a>\n                </li>\n              </ul>\n            </li>\n          )}\n\n          {authenticated && user && user.userType == \"super-admin\" && (\n            <li className=\"item has-submenu\">\n              <a tabIndex=\"0\">Create Exam / Subject</a>\n              <ul className=\"submenu\">\n                <li\n                  className=\"subitem\"\n                  onClick={() => history.push(\"/create_subject\")}\n                >\n                  <a>Create Subject</a>\n                </li>\n                <li\n                  className=\"subitem\"\n                  onClick={() => history.push(\"/create_examination_schedule\")}\n                >\n                  <a>Create Examination</a>\n                </li>\n              </ul>\n            </li>\n          )}\n\n          {authenticated && user && user.userType == \"super-admin\" && (\n            <li className=\"item has-submenu\">\n              <a tabIndex=\"0\">Add Question To Examination</a>\n              <ul className=\"submenu\">\n                <li\n                  className=\"subitem\"\n                  onClick={() => history.push(\"/add_questions_examination\")}\n                >\n                  <a>Add Multi/Spelling Questions To Exam</a>\n                </li>\n\n                <li\n                  className=\"subitem\"\n                  onClick={() =>\n                    history.push(\"/add_essay_questions_examination\")\n                  }\n                >\n                  <a>Add Essay Questions To Exam</a>\n                </li>\n              </ul>\n            </li>\n          )}\n\n          {authenticated && user && user.userType == \"super-admin\" && (\n            <li className=\"item has-submenu\">\n              <a tabIndex=\"0\">Results Functions</a>\n              <ul className=\"submenu\">\n                <li\n                  className=\"subitem\"\n                  onClick={() => history.push(\"/exam_results\")}\n                >\n                  <a>Examination Result</a>\n                </li>\n              </ul>\n            </li>\n          )}\n\n          {authenticated && user && user.userType == \"super-admin\" && (\n            <li className=\"item has-submenu\">\n              <a tabIndex=\"0\">Admin Quiz Functions</a>\n              <ul className=\"submenu\">\n                <li\n                  className=\"subitem\"\n                  onClick={() => history.push(\"/upload_questions\")}\n                >\n                  <a>Upload Questions</a>\n                </li>\n\n                <li\n                  className=\"subitem\"\n                  onClick={() => history.push(\"/activate_exams\")}\n                >\n                  <a>Activate Exam</a>\n                </li>\n              </ul>\n            </li>\n          )}\n\n          {authenticated && user && user.userType == \"super-admin\" && (\n            <li className=\"item has-submenu\">\n              <a tabIndex=\"0\">Add Questions</a>\n              <ul className=\"submenu\">\n                <li\n                  className=\"subitem\"\n                  onClick={() => history.push(\"/add_question\")}\n                >\n                  <a>Add Multi Choice Questions</a>\n                </li>\n\n                <li\n                  className=\"subitem\"\n                  onClick={() => history.push(\"/add_spelling_question\")}\n                >\n                  <a>Add Spelling Questions</a>\n                </li>\n\n                <li\n                  className=\"subitem\"\n                  onClick={() => history.push(\"/add_essay_question\")}\n                >\n                  <a>Add Essay Questions</a>\n                </li>\n              </ul>\n            </li>\n          )}\n\n          {authenticated && user && user.userType == \"super-admin\" && (\n            <li className=\"item has-submenu\">\n              <a tabIndex=\"0\">Load Questions</a>\n              <ul className=\"submenu\">\n                <li\n                  className=\"subitem\"\n                  onClick={() => history.push(\"/load_multi_choice_question\")}\n                >\n                  <a>Load Multi Choice Questions</a>\n                </li>\n\n                <li\n                  className=\"subitem\"\n                  onClick={() => history.push(\"/load_spelling_question\")}\n                >\n                  <a>Load Spelling Questions</a>\n                </li>\n\n                <li\n                  className=\"subitem\"\n                  onClick={() => history.push(\"/load_essay_question\")}\n                >\n                  <a>Load Essay Questions</a>\n                </li>\n              </ul>\n            </li>\n          )}\n\n          {authenticated && user && user.userType == \"super-admin\" && (\n            <li className=\"item has-submenu\">\n              <a tabIndex=\"0\">Media Files</a>\n              <ul className=\"submenu\">\n                <li\n                  className=\"subitem\"\n                  onClick={() => history.push(\"/upload_media\")}\n                >\n                  <a>Upload Media Files</a>\n                </li>\n              </ul>\n            </li>\n          )}\n\n          {authenticated ? (\n            <li className=\"item button\" onClick={handleLogOut}>\n              <a href=\"\">Log Out</a>\n            </li>\n          ) : (\n            <li className=\"item button\" onClick={handleLogIn}>\n              <a href=\"\">Log In</a>\n            </li>\n          )}\n\n          <li className=\"toggle\">\n            <a href=\"#\">\n              <i className=\"fas fa-bars\"></i>\n            </a>\n          </li>\n        </ul>\n      </nav>\n    </CustomNavbarStyles>\n  );\n};\n\nexport default CustomNavbar;\n","/app/src/components/examSummaryComponent.js",["455","456","457"],"/app/src/applicationState/index.js",["458"],"import authState from \"./authenticationState\";\nimport currentLoginUserState from \"./currentUserState\";\nimport authToken from \"./authToken\";\nimport questionsState from \"./questionsState\";\nimport currentIndexState from \"./currentIndexState\";\nimport currentQuestionState from \"./currentQuestionState\";\nimport totalQuestionSelector from \"./totalQuestions\";\nimport skippedQuestionsState from \"./skippedQuestions\";\nimport examDurationState from \"./examDurationState\";\nimport examStartedState from \"./examStartedState\";\n\nexport default {\n  authState,\n  currentLoginUserState,\n  authToken,\n  questionsState,\n  currentIndexState,\n  currentQuestionState,\n  totalQuestionSelector,\n  skippedQuestionsState,\n  examDurationState,\n  examStartedState,\n};\n","/app/src/components/countDownTimer.js",["459","460","461","462","463","464"],"import React, { useEffect, useState } from \"react\";\nimport useCountDown from \"react-countdown-hook\";\nimport styled from \"styled-components\";\nimport state from \"../applicationState\";\nimport { useRecoilValue } from \"recoil\";\nimport store from \"store\";\n\nconst CountDownTimerStyles = styled.div`\n  \n  span {\n    font-size: 30px;\n  }\n  .timer {\n    font-size: 30px;\n    font-weight: bold;\n    color: blue;\n  }\n`;\n\nconst CountDownTimer = ({ submitQuiz }) => {\n  const duration = useRecoilValue(state.examDurationState);\n  const [timeRemaining, setTimeRemaining] = useState(null);\n  const [timerStarted, setTimerStarted] = useState(false);\n  const timerFromStore = store.get(\"timer\");\n  const time = 1000 * 60 * duration;\n  const timerToUsed = time ? time : timerFromStore;\n\n  const [timeLeft, { start }] = useCountDown(timerToUsed, 100);\n\n  useEffect(() => {\n    store.set(\"timer\", timeLeft);\n    if (timerStarted && timeLeft == 0) {\n      submitQuiz();\n    }\n  }, [timeLeft]);\n\n  useEffect(() => {\n    start();\n    setTimerStarted(true);\n  }, []);\n\n  useEffect(() => {\n    secondsToTime(timeLeft);\n  }, [timeRemaining, timeLeft]);\n\n  const secondsToTime = (time) => {\n    let secs = time / 1000;\n    let hours = Math.floor(secs / (60 * 60));\n    let divisor_for_minutes = secs % (60 * 60);\n    let minutes = Math.floor(divisor_for_minutes / 60);\n    let divisor_for_seconds = divisor_for_minutes % 60;\n    let seconds = Math.ceil(divisor_for_seconds);\n\n    let padHours = hours.toString().length == 1 ? `0${hours}` : hours;\n    let padMins = minutes.toString().length == 1 ? `0${minutes}` : minutes;\n    let padSecs = seconds.toString().length == 1 ? `0${seconds}` : seconds;\n\n    setTimeRemaining(`${padHours}: ${padMins} : ${padSecs}`);\n  };\n\n  return (\n    <CountDownTimerStyles>\n      <p className=\"timer\">{timeRemaining}</p>\n    </CountDownTimerStyles>\n  );\n};\n\nexport default CountDownTimer;\n","/app/src/components/questionButtonsComponent.js",["465","466","467","468"],"import React from \"react\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport state from \"../applicationState\";\nimport styled from \"styled-components\";\nimport store from \"store\";\n\nconst QuestionButtonComponentStyles = styled.div`\n  button {\n    margin: 10px;\n  }\n`;\n\nconst QuestionButtonComponent = ({ submitQuiz }) => {\n  const [currentIndex, setCurrentIndex] = useRecoilState(\n    state.currentIndexState\n  );\n\n  const setSkippedQuestion = useSetRecoilState(state.skippedQuestionsState);\n\n  const totalQuestionFromState = useRecoilValue(state.totalQuestionSelector);\n\n  //get total questions from the stored questions\n  const questionsTotalFromStore = store.get(\"totalQuestions\");\n\n  let totalQuestion = totalQuestionFromState ? totalQuestionFromState : questionsTotalFromStore;\n\n  const handleSkippedQuestion = () => {\n    setSkippedQuestion((skippedArray) => {\n      const findSkipped = skippedArray.some((val) => +val == currentIndex);\n      return findSkipped ? skippedArray : [...skippedArray, currentIndex];\n    });\n    if (currentIndex < totalQuestion) {\n      //skipped forward\n      store.set(\"currentIndex\", +currentIndex + 1);\n      setCurrentIndex(+currentIndex + 1);\n    } else {\n      //start at the beginning\n      store.set(\"currentIndex\", 0);\n      setCurrentIndex(0);\n    }\n  };\n\n  const handleCurrentIndexChange = (value) => {\n    if (value === \"increment\") {\n      store.set(\"currentIndex\", +currentIndex + 1);\n      setCurrentIndex(+currentIndex + 1);\n    } else if (value === \"decrement\") {\n      store.set(\"currentIndex\", +currentIndex - 1);\n      setCurrentIndex(+currentIndex - 1);\n    }\n  };\n  const handleExaminationSubmission = (e) => {\n    e.preventDefault();\n    const confirmSubmission = window.confirm(\n      \"Are you sure you want to submit. Please review your work. If you are sure click yes\"\n    );\n    if (!confirmSubmission) return;\n    submitQuiz();\n  };\n  return (\n    <QuestionButtonComponentStyles>\n      <button\n        type=\"button\"\n        className=\"btn btn-primary\"\n        disabled={currentIndex == 0}\n        onClick={() => handleCurrentIndexChange(\"decrement\")}\n      >\n        Previous Question\n      </button>\n      <button\n        type=\"button\"\n        className=\"btn btn-warning\"\n        disabled={currentIndex == totalQuestion - 1}\n        onClick={() => handleCurrentIndexChange(\"increment\")}\n      >\n        Next Question\n      </button>\n      <button\n        type=\"button\"\n        className=\"btn btn-danger\"\n        disabled={currentIndex == totalQuestion - 1}\n        onClick={handleSkippedQuestion}\n      >\n        Skip Question\n      </button>\n      <button\n        type=\"button\"\n        className=\"btn btn-success\"\n        onClick={handleExaminationSubmission}\n      >\n        Submit\n      </button>\n    </QuestionButtonComponentStyles>\n  );\n};\n\nexport default QuestionButtonComponent;\n","/app/src/components/questionComponent.js",["469"],"import React from \"react\";\nimport { useRecoilValue, useRecoilState } from \"recoil\";\nimport state from \"../applicationState\";\nimport styled from \"styled-components\";\n\nimport store from \"store\";\n\nconst QuestionComponentStyles = styled.div`\n  .question {\n    font-size: 20px;\n  }\n\n  .question span {\n    margin-right: 15px;\n  }\n\n  .questionDiv {\n    padding: 20px;\n    margin-top: 100px;\n  }\n  .radioDiv {\n    padding: 20px;\n  }\n  .radioLabel {\n    padding: 10px;\n    cursor: pointer;\n  }\n  radio {\n    cursor: pointer;\n  }\n\n  .question-divs {\n    padding-left: 10px;\n    cursor: pointer;\n    font-size: 20px;\n  }\n\n  .question-panel {\n    display: flex;\n    padding: 10px;\n    font-size: 16px;\n  }\n  hr {\n    border-width: 5px;\n  }\n`;\n\nconst QuestionComponent = () => {\n  const [quizQuestions, setQuestions] = useRecoilState(state.questionsState);\n\n  let currentQuestionFromState = useRecoilValue(state.currentQuestionState);\n\n  let questionsFromStore = store.get(\"examQuestions\");\n\n  let indexFromStore = store.get(\"currentIndex\");\n  let indexFromState = useRecoilValue(state.currentIndexState);\n\n  let questionNumber = indexFromState ? indexFromState : indexFromStore;\n\n  let currentQuestion = currentQuestionFromState\n    ? currentQuestionFromState\n    : questionsFromStore[questionNumber];\n  let question = currentQuestion;\n  const handleAnswerSelected = (selectedIndex) => {\n    //loop through questions and replace the\n    //replace the one that there is an answer\n    let questionFromStoreOrState =\n      quizQuestions.length > 0 ? quizQuestions : questionsFromStore;\n\n    let presentQuestion = questionFromStoreOrState[questionNumber];\n    let answersArray = [];\n    for (let i = 0; i < presentQuestion.answers.length; i++) {\n      let answerObj = presentQuestion.answers[i];\n      if (i == selectedIndex) {\n        let selectedAnswerObject = {};\n        selectedAnswerObject.selected = true;\n        selectedAnswerObject.isCorrect = answerObj.isCorrect;\n        selectedAnswerObject.option = answerObj.option;\n        answersArray.push(selectedAnswerObject);\n        continue;\n      }\n      answersArray.push(answerObj);\n    }\n    let copyOfCurrentQuestion = { ...presentQuestion };\n    let copyOfQuizQuestions = [...questionFromStoreOrState];\n    copyOfCurrentQuestion.answers = answersArray;\n    copyOfQuizQuestions[questionNumber] = copyOfCurrentQuestion;\n    setQuestions(copyOfQuizQuestions);\n    store.set(\"examQuestions\", copyOfQuizQuestions);\n  };\n\n  //useBeforeunload(() => \"You'll lose your data!\");\n  const setHtml = (html) => {\n    return { __html: html };\n  };\n\n  return (\n    <QuestionComponentStyles>\n      <div className=\"questionDiv\">\n        <div className=\"question-panel\">\n          <div>{1 + +questionNumber}).</div>\n          <div\n            className=\"question-divs\"\n            dangerouslySetInnerHTML={setHtml(question && question.question)}\n          />\n        </div>\n        <hr />\n        <div className=\"radioDiv\">\n          {question &&\n            question.answers &&\n            question.answers.length > 0 &&\n            question.answers.map(({ option, selected }, index) => {\n              return (\n                <React.Fragment key={index}>\n                  <input\n                    type=\"radio\"\n                    id={option}\n                    name=\"answers\"\n                    value={option}\n                    checked={selected ? true : false}\n                    onChange={() => handleAnswerSelected(index)}\n                  />\n                  <label\n                    className=\"radioLabel\"\n                    htmlFor={option}\n                    onChange={() => handleAnswerSelected(index)}\n                  >\n                    {option}\n                  </label>\n                  <br></br>\n                </React.Fragment>\n              );\n            })}\n        </div>\n      </div>\n    </QuestionComponentStyles>\n  );\n};\n\nexport default QuestionComponent;\n","/app/src/components/questionsNumberDiv.js",["470","471"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport state from \"../applicationState\";\nimport { useRecoilValue, useRecoilState } from \"recoil\";\nimport store from \"store\";\n\nconst QuestionNumberDivStyles = styled.div`\n  margin-top: 40px;\n\n  .div-number {\n    width: 60px;\n    height: 60px;\n    cursor: pointer;\n    display: flex;\n    font-size: 20px;\n    justify-content: center;\n    align-items: center;\n    color: #fff;\n  }\n\n  .numberDiv {\n    display: flex;\n    flex-wrap: wrap;\n  }\n\n  .answered {\n    background-color: green;\n    margin: 2px;\n  }\n  .notAnswered {\n    background-color: black;\n    margin: 2px;\n  }\n\n  .skipped {\n    background-color: red;\n    margin: 2px;\n  }\n\n  .code {\n    height: 100px;\n    width: 100px;\n    margin: 5px;\n    color: white;\n  }\n\n  .numberCode {\n    border: 2px solid #c0c0c0;\n    width: 50%;\n    padding: 5px;\n    float: right;\n    background-color: #0a1b1b;\n  }\n  .numberCode p {\n    align-self: center;\n    font-size: 16px;\n    color: #fff;\n    padding-left: 30px;\n  }\n\n  .colorAnswered {\n    background-color: green;\n  }\n\n  .colorNotAnswered {\n    background-color: black;\n  }\n  .colorVisited {\n    background-color: red;\n  }\n  .colorDiv {\n    display: flex;\n  }\n`;\n\nconst QuestionsNumberDiv = () => {\n  //GET THE TOTAL QUESTIONS HERE\n  const questionsFromState = useRecoilValue(state.questionsState);\n  const skipped = useRecoilValue(state.skippedQuestionsState);\n  const [, setCurrentIndex] = useRecoilState(state.currentIndexState);\n\n  const questionsFromStore = store.get(\"examQuestions\");\n\n  let questions = questionsFromState.length > 0 ? questionsFromState : questionsFromStore;\n  \n\n  //get the others from store\n\n\n  const handleOnClick = (index) => {\n    store.set(\"currentIndex\", index);\n    setCurrentIndex(index);\n  };\n  return (\n    <QuestionNumberDivStyles>\n      <div className=\"numberDiv\">\n        {questions &&\n          questions.map(({ answers }, index) => {\n            let hasAnswered = false;\n            answers.map(({ selected }) => {\n              if (selected === true) {\n                hasAnswered = true;\n              }\n            });\n            if (hasAnswered) {\n              return (\n                <div\n                  className=\"div-number answered\"\n                  key={index}\n                  onClick={() => handleOnClick(index)}\n                >\n                  {1 + index}\n                </div>\n              );\n            } else {\n              //skipped array\n\n              const skipNumber = skipped.some((value) => {\n                return +value == +index;\n              });\n              if (skipNumber) {\n                //the question was skipped\n                return (\n                  <div\n                    className=\"div-number skipped\"\n                    key={index}\n                    onClick={() => handleOnClick(index)}\n                  >\n                    {1 + index}\n                  </div>\n                );\n              }\n              return (\n                <div\n                  className=\"div-number notAnswered\"\n                  key={index}\n                  onClick={() => handleOnClick(index)}\n                >\n                  {1 + index}\n                </div>\n              );\n            }\n          })}\n      </div>\n      <div className=\"numberCode\">\n        <div className=\"colorDiv\">\n          <div className=\"code colorAnswered\"></div>\n\n          <p>Answered</p>\n        </div>\n\n        <div className=\"colorDiv\">\n          <div className=\"code colorNotAnswered\"></div>\n          <p>Not answered</p>\n        </div>\n        <div className=\"colorDiv\">\n          <div className=\"code colorVisited\"></div>\n          <p>Visited</p>\n        </div>\n      </div>\n    </QuestionNumberDivStyles>\n  );\n};\n\nexport default QuestionsNumberDiv;\n","/app/src/applicationState/questionsState.js",["472","473"],"import { selector, atom } from \"recoil\";\nimport store from \"store\";\n\nconst questionAtomState = atom({\n  key: \"examinationQuestions\",\n  default: []\n  // default: selector({\n  //   key: \"examinationSelector\",\n  //   get: () => {\n  //     const questionsFromStore = store.get(\"examQuestions\");\n  //     return questionsFromStore ? questionsFromStore : [];\n  //   },\n  // }),\n});\n\n// const questionAtomState = atom({\n//   key: \"examinationQuestions\",\n//   default: selector({\n//     key: \"examinationSelector\",\n//     get: () => {\n//       return Questions;\n//     },\n//   }),\n// });\n\nexport default questionAtomState;\n","/app/src/applicationState/currentUserState.js",[],"/app/src/applicationState/authToken.js",[],"/app/src/applicationState/authenticationState.js",[],"/app/src/applicationState/currentIndexState.js",[],"/app/src/applicationState/currentQuestionState.js",[],"/app/src/applicationState/totalQuestions.js",[],"/app/src/methods/index.js",["474"],"import bulkMethods from \"./saveBulkQuestions\";\nimport ExamMarking from \"./examMarking\";\nimport Utils from \"./utils\";\nimport GenerateScripts from \"./generateScripts\";\nimport SaveBulkSpellingQuestions from \"./saveBulkSpellingQuestions\";\nimport MarkSpellingExam from \"./markSpellingScripts\";\nimport MarkEssayExam from \"./markEssayExamination\"\n\nexport default {\n  bulkMethods,\n  ExamMarking,\n  Utils,\n  GenerateScripts,\n  SaveBulkSpellingQuestions,\n  MarkSpellingExam,\n  MarkEssayExam\n};\n","/app/src/methods/examMarking.js",["475","476","477"],"const calculateTotalScored = (questionArray) => {\n    let total = 0;\n    for (let i = 0; i < questionArray.length; i++) {\n      const answers = questionArray[i].answers;\n      const selectedAnswerArray = answers.filter((answer) => {\n        return answer.selected == true;\n      });\n      const correctAnswerArray = answers.filter((answer) => {\n        return answer.isCorrect == true;\n      });\n      const selectedAnswer = selectedAnswerArray[0];\n      const correctAnswer = correctAnswerArray[0];\n      if (selectedAnswer) {\n        if (correctAnswer.option == selectedAnswer.option) {\n          total++;\n        }\n      }\n    }\n    return total;\n  };\n\n\n  export default calculateTotalScored;","/app/src/methods/saveBulkQuestions.js",["478","479","480","481","482","483","484","485","486","487"],"import * as XLSX from \"xlsx\";\n\n//question: String,\n// answers: [\n//   {\n//     option: String,\n//     isCorrect: Boolean,\n//     selected: Boolean\n//   },\n// ],\n// questionImageUrl: { type: String, required: false },\n// examinationType: String,\n// examId: String,\n// explanation: { type: String, required: false }\n\n//answers is an array\n//answer is graded 1 to 4\n\n//\n\nconst saveBulkQuestions = (excelArray, examId, examinationType) => {\n  //build the question and return the array data\n  let questionsArray = [];\n  let errorArray = [];\n  for (let i = 0; i < excelArray.length; i++) {\n    let currentArray = excelArray[i];\n    let answersArray = [];\n    let questionObject = {};\n    //loop through the second array\n    for (let j = 0; j < currentArray.length; j++) {\n      const arrayValue = currentArray[j];\n      let answerObject = {};\n      const correctAnswer = currentArray[5];\n\n      switch (j) {\n        case 0:\n          questionObject.question =\n            arrayValue != \"undefined\" ? \"<p>\" + arrayValue + \"</p>\" : \"<p></p>\";\n          break;\n        case 1:\n          answerObject.option = arrayValue;\n          answerObject.selected = false;\n          if (+correctAnswer == 1) {\n            answerObject.isCorrect = true;\n          } else {\n            answerObject.isCorrect = false;\n          }\n          answersArray.push(answerObject);\n          break;\n\n        case 2:\n          answerObject.option = arrayValue;\n          answerObject.selected = false;\n          if (+correctAnswer == 2) {\n            answerObject.isCorrect = true;\n          } else {\n            answerObject.isCorrect = false;\n          }\n          answersArray.push(answerObject);\n\n          break;\n\n        case 3:\n          answerObject.option = arrayValue;\n          answerObject.selected = false;\n          if (+correctAnswer == 3) {\n            answerObject.isCorrect = true;\n          } else {\n            answerObject.isCorrect = false;\n          }\n          answersArray.push(answerObject);\n          break;\n        case 4:\n          answerObject.option = arrayValue;\n          answerObject.selected = false;\n          if (+correctAnswer == 4) {\n            answerObject.isCorrect = true;\n          } else {\n            answerObject.isCorrect = false;\n          }\n          answersArray.push(answerObject);\n          break;\n\n        case 6:\n          //the answer object;\n          questionObject.explanation =\n            arrayValue != \"undefined\" ? arrayValue.trim() : \"\";\n          break;\n      }\n    }\n    //add the questions and the answers here\n    //check if a question has an answer or not\n\n    const findAnswers = answersArray.filter((ans) => {\n      return ans.isCorrect == true;\n    });\n    if (findAnswers.length == 0) {\n      //we have an error in this question\n      errorArray.push(questionObject.question);\n    }\n    questionObject.answers = answersArray;\n    questionObject.questionImageUrl = \"\";\n    questionObject.examId = examId;\n    questionObject.examinationType = examinationType;\n    questionsArray.push(questionObject);\n  }\n  if (errorArray.length > 0) {\n    return {\n      type: \"error\",\n      payload: errorArray,\n    };\n  }\n  return { type: \"result\", payload: questionsArray };\n};\n\nexport const SheetToArray = (sheet) => {\n  var result = [];\n  var row;\n  var rowNum;\n  var colNum;\n  var range = XLSX.utils.decode_range(sheet[\"!ref\"]);\n  for (rowNum = range.s.r; rowNum <= range.e.r; rowNum++) {\n    row = [];\n    for (colNum = range.s.c; colNum <= range.e.c; colNum++) {\n      var nextCell = sheet[XLSX.utils.encode_cell({ r: rowNum, c: colNum })];\n      if (typeof nextCell === \"undefined\") {\n        row.push(void 0);\n      } else row.push(nextCell.w);\n    }\n    result.push(row);\n  }\n  return result;\n};\n\nexport default { saveBulkQuestions, SheetToArray };\n","/app/src/components/uploadExaminationQuestions.js",["488","489","490","491","492"],"import React, { useEffect, useState } from \"react\";\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\nimport { GetDifferentExamination } from \"../graphql/queries\";\nimport {\n  UploadBulkExaminationQuestions,\n  UploadBulkSpellingQuestions,\n} from \"../graphql/mutation\";\nimport * as XLSX from \"xlsx\";\nimport methods from \"../methods\";\n\nconst UploadExaminationQuestions = () => {\n  const [loading, setLoading] = useState(false);\n  const [selectedExamId, setSelectedExamId] = useState(null);\n  const [selectedExamName, setSelectedExamName] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [excelData, setExcelData] = useState([]);\n  const [submitted, setSubmitted] = useState(false);\n  const [examTypeData, setExamDataType] = useState([]);\n  const [examTypeSelection, setExamTypeSelection] = useState(null);\n\n  const [examTypeQuery, examTypeResult] = useLazyQuery(GetDifferentExamination);\n  const [uploadQuestion, uploadQuestionResult] = useMutation(\n    UploadBulkExaminationQuestions\n  );\n\n  const [uploadSpellingQuestion, uploadSpellingQuestionResult] = useMutation(\n    UploadBulkSpellingQuestions\n  );\n\n  useEffect(() => {\n    if (examTypeResult.loading) {\n      setLoading(true);\n    }\n    if (examTypeResult.data) {\n      const data = examTypeResult.data.getExamByType;\n      if (data.length > 0) {\n        setExamDataType(data);\n        setLoading(false);\n      } else {\n        setExamDataType(data);\n        setLoading(false);\n        setSelectedExamId(null);\n        setSelectedExamName(null);\n      }\n    }\n    if (examTypeResult.error) {\n      setLoading(false);\n      setErrors(examTypeResult.error);\n    }\n  }, [examTypeResult.data, examTypeResult.error, examTypeResult.loading]);\n\n  useEffect(() => {\n    if (uploadQuestionResult.error) {\n      setErrors(uploadQuestionResult.error.message);\n      setSubmitted(!submitted);\n    }\n\n    if (uploadQuestionResult.data) {\n      setErrors(null);\n      setSubmitted(!submitted);\n      document.getElementById(\"uploadExcelFile\").value = \"\";\n      setSelectedExamId(null);\n      setSelectedExamName(null);\n      window.alert(\n        `${uploadQuestionResult.data.saveBulkQuestion} questions saved in the database.`\n      );\n    }\n  }, [uploadQuestionResult.error, uploadQuestionResult.data]);\n\n  useEffect(() => {\n    if (uploadSpellingQuestionResult.error) {\n      setErrors(uploadSpellingQuestionResult.error.message);\n      setSubmitted(!submitted);\n    }\n\n    if (uploadSpellingQuestionResult.data) {\n      setErrors(null);\n      setSubmitted(!submitted);\n      document.getElementById(\"uploadExcelFile\").value = \"\";\n      setSelectedExamId(null);\n      setSelectedExamName(null);\n      window.alert(\n        `${uploadSpellingQuestionResult.data.saveBulkSpellingQuestion} questions saved in the database.`\n      );\n    }\n  }, [uploadSpellingQuestionResult.error, uploadSpellingQuestionResult.data]);\n\n  const handleExamChange = (e) => {\n    const value = e.target.value;\n    if (value == \"0\") return;\n    const splitValue = value.split(\"/\");\n    setSelectedExamId(splitValue[0]);\n    setSelectedExamName(splitValue[1]);\n  };\n\n  const handleExamTypeChange = (e) => {\n    const value = e.target.value;\n    if (value !== \"0\") {\n      setExamTypeSelection(value);\n      examTypeQuery({\n        variables: {\n          examType: value,\n        },\n      });\n    }\n  };\n\n  const readExcel = (file) => {\n    const fileReader = new FileReader();\n    setLoading(true);\n    fileReader.onload = function () {\n      const wb = XLSX.read(fileReader.result, { type: \"binary\" });\n      const workBookName = wb.SheetNames[0];\n      const excel = wb.Sheets[workBookName];\n      const excelData = methods.bulkMethods.SheetToArray(excel);\n      setExcelData(excelData);\n      setLoading(true);\n    };\n    fileReader.readAsBinaryString(file);\n  };\n\n  const handleFileUploadChange = (e) => {\n    const file = e.target.files[0];\n    const fileName = file && file.name;\n    const lastIndexOfDot = fileName && fileName.lastIndexOf(\".\");\n    const extention =\n      fileName && fileName.substr(lastIndexOfDot + 1, fileName.length);\n    const allowedExtention = [\"xlsx\", \"ods\", \"xls\"];\n    const findIndex = allowedExtention.indexOf(extention.toLowerCase());\n    if (findIndex == -1) {\n      window.alert(\n        `you can not upload ${extention} file. Only Excel files are allowed`\n      );\n      document.getElementById(\"uploadExcelFile\").value = \"\";\n      return;\n    }\n    readExcel(file);\n  };\n\n  const uploadQuestionToDatabase = async (e) => {\n    e.preventDefault();\n    //get the array of questions\n    //check if a question has an answer\n    switch (examTypeSelection) {\n      case \"multiple choice questions\":\n        //we are good we can upload our questions to database\n        try {\n          const questionObject = methods.bulkMethods.saveBulkQuestions(\n            excelData,\n            selectedExamId,\n            selectedExamName\n          );\n          const { type, payload } = questionObject;\n          if (type === \"error\") {\n            let questionString = \"\";\n            payload.map((question) => {\n              questionString += \" \" + question + \"\\n\";\n            });\n            window.alert(\n              `The followng questions have no answers \\n ${questionString}`\n            );\n            document.getElementById(\"uploadExcelFile\").value = \"\";\n            return;\n          } else {\n            //we are good we can upload our questions to database\n            await uploadQuestion({\n              variables: {\n                input: payload,\n              },\n            });\n          }\n        } catch (error) {\n          //parse the error and return the questions without answers\n        }\n        break;\n      case \"spelling examination\":\n        const { payload } = methods.SaveBulkSpellingQuestions(\n          excelData,\n          selectedExamId,\n          selectedExamName\n        );\n        try {\n          await uploadSpellingQuestion({\n            variables: {\n              input: payload,\n            },\n          });\n        } catch (error) {}\n        break;\n      case \"short answer exam\":\n        break;\n      case \"essay exam\":\n        break;\n      case \"quantitative exam\":\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-6 offset-md-3\">\n        {errors && <p className=\"lead text-danger\">Error: {errors}</p>}\n\n        <p className=\"text-center lead\">Upload Questions From Excel Document</p>\n        <form>\n          <div className=\"form-group\">\n            <select className=\"custom-select\" onChange={handleExamTypeChange}>\n              <option value=\"0\">select examination type</option>\n              <option value=\"multiple choice questions\">\n                Multiple choice questions\n              </option>\n              <option value=\"spelling examination\">\n                Spelling examination{\" \"}\n              </option>\n              <option value=\"short answer exam\">Short answer type</option>\n              <option value=\"essay exam\">Essay examination</option>\n              <option value=\"quantitative exam\">\n                Quantitative examination\n              </option>\n            </select>\n          </div>\n          <div className=\"form-group\">\n            <select className=\"custom-select\" onChange={handleExamChange}>\n              <option value=\"0\">select subject </option>\n              {loading && <option>loading data.......</option>}\n              {examTypeData.map(({ id, examName }) => {\n                return (\n                  <option value={`${id}/${examName}`} key={id}>\n                    {examName}\n                  </option>\n                );\n              })}\n            </select>\n          </div>\n\n          <div className=\"form-group\">\n            {selectedExamName && (\n              <p className=\"lead\">\n                <span>{selectedExamName}</span>\n              </p>\n            )}\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"uploadExcelFile\">Upload Excel File</label>\n            <br />\n            <input\n              type=\"file\"\n              className=\"form-control-file\"\n              id=\"uploadExcelFile\"\n              onChange={handleFileUploadChange}\n            />\n          </div>\n\n          {selectedExamId && selectedExamName && (\n            <div className=\"form-group\">\n              <button\n                disabled={submitted}\n                className=\"btn btn-success btn-lg\"\n                onClick={uploadQuestionToDatabase}\n              >\n                {submitted ? \"please wait......\" : \"click to upload questions\"}\n              </button>\n            </div>\n          )}\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default UploadExaminationQuestions;\n","/app/src/graphql/queries.js",[],"/app/src/graphql/mutation.js",[],"/app/src/methods/utils.js",["493","494","495"],"/app/src/common/errorDisplay.js",[],["496","497"],"/app/src/components/saveNewQuestion.js",["498","499","500","501","502","503","504","505","506","507","508","509"],"import React, { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport DraftJsToolBar from \"../common/draftJSToolBar\";\nimport draftToHtml from \"draftjs-to-html\";\nimport {\n  EditorState,\n  convertToRaw,\n  ContentState,\n  convertFromHTML,\n} from \"draft-js\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GetAllExamination } from \"../graphql/queries\";\nimport { SubmitQuestion, EditQuestion } from \"../graphql/mutation\";\n\nconst NewQuestionStyles = styled.div`\n  textarea {\n    text-align: center;\n  }\n  .append-div {\n    cursor: pointer;\n  }\n  .append-text {\n    font-size: 19px;\n  }\n  .correctAnswer {\n    border: 2px solid green;\n    padding: 10px;\n  }\n  .remove-span {\n    font-size: 30px;\n    color: red;\n    margin-right: 20px;\n    cursor: pointer;\n    float: right;\n  }\n  .div-select-answer {\n    display: flex;\n    justify-content: space-between;\n  }\n  .answers-div {\n    margin-top: 20px;\n  }\n  .writeQuestion {\n    margin-top: 20px;\n  }\n`;\n\nconst SaveNewQuestion = ({ editMode, questionToEdit, history }) => {\n  //if we are editing the props should have\n  //an editMode prop set to true and the paperdetails\n  //will be stored in a props called paperDetails\n\n  const [question, setQuestion] = useState(null);\n  const [preview, setPreview] = useState(\"\");\n  const [answers, setAnswers] = useState([]);\n  const [text, setText] = useState(\"\");\n  const [explanation, setExplanation] = useState(\"\");\n  const [examType, setExamType] = useState([]);\n  const [loadingData, setLoading] = useState(false);\n  const { loading, error, data } = useQuery(GetAllExamination);\n  const [selectedExamId, setSelectedExamId] = useState(null);\n  const [selectedExamName, setSelectedExamName] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [submitted, setSubmitted] = useState(false);\n  const [submitQuestionToDB, submitQuestionToDBResult] = useMutation(\n    SubmitQuestion\n  );\n  const [editQuestion, editQuestionResult] = useMutation(EditQuestion);\n\n  const textAnswer = useRef();\n\n  useEffect(() => {\n    if (editQuestionResult.error) {\n      setSubmitted(!submitted);\n      setErrors(editQuestionResult.error.message);\n    }\n    if (editQuestionResult.data) {\n      setSubmitted(!submitted);\n      setAnswers([]);\n      setText(\"\");\n      setExplanation(\"\");\n      window.alert(\"question edited.\");\n      history.push(\"/load_question\");\n      window.location.reload();\n    }\n  }, [editQuestionResult.error, editQuestionResult.data]);\n\n  useEffect(() => {\n    if (submitQuestionToDBResult.error) {\n      setSubmitted(!submitted);\n      setErrors(submitQuestionToDBResult.error.message);\n    }\n    if (submitQuestionToDBResult.data) {\n      setSubmitted(!submitted);\n      setAnswers([]);\n      setText(\"\");\n      setExplanation(\"\");\n      window.alert(\"question saved to database.\");\n    }\n  }, [submitQuestionToDBResult.error, submitQuestionToDBResult.data]);\n\n  useEffect(() => {\n    if (loading) {\n      setLoading(!loadingData);\n    }\n    if (error) {\n      setErrors(error.message);\n      setLoading(!loadingData);\n    }\n    if (data) {\n      setExamType(data.getAllExam);\n      setLoading(!loadingData);\n    }\n  }, [loading, error, data]);\n\n  const handleEnterButtonPressed = (e) => {\n    if (e.keyCode == 13) {\n      handleAnswerSaved();\n    }\n  };\n\n  const handleExamChange = (e) => {\n    const value = e.target.value;\n    if (value == \"0\") return;\n    const splitValue = value.split(\"/\");\n    setSelectedExamId(splitValue[0]);\n    setSelectedExamName(splitValue[1]);\n  };\n\n  useEffect(() => {\n    if (textAnswer && textAnswer.current) {\n      textAnswer.current.addEventListener(\"keyup\", handleEnterButtonPressed);\n    }\n    return () => {\n      if (textAnswer && textAnswer.current) {\n        textAnswer.current.removeEventListener(\n          \"keyup\",\n          handleEnterButtonPressed\n        );\n      }\n    };\n  });\n\n  useEffect(() => {\n    //loading question from props here\n    const questionFromProps =\n      (editMode && questionToEdit && questionToEdit.question) || \"\";\n    if (questionFromProps) {\n      const blocksFromHTML = convertFromHTML(questionToEdit.question);\n      const content = ContentState.createFromBlockArray(\n        blocksFromHTML.contentBlocks,\n        blocksFromHTML.entityMap\n      );\n      setQuestion(EditorState.createWithContent(content));\n      setPreview(questionToEdit.question);\n      setAnswers(questionToEdit.answers);\n      setExplanation(questionToEdit.explanation);\n    } else {\n      setQuestion(EditorState.createEmpty());\n      setPreview(\"<p>typed question will appear here</p>\");\n    }\n  }, []);\n\n  const handleChange = (editorState) => {\n    let html = draftToHtml(convertToRaw(editorState.getCurrentContent()));\n    setQuestion(editorState);\n    setPreview(html);\n  };\n\n  const setHtml = (html) => {\n    return { __html: html };\n  };\n\n  const handleAnswerSaved = () => {\n    //save the text in the answer array\n    if (text == \"\") return;\n    const obj = {\n      isCorrect: false,\n      selected: false,\n      option: text,\n    };\n    setAnswers((oldAnswers) => {\n      return [...oldAnswers, obj];\n    });\n    setText(\"\");\n  };\n\n  const handleTextChange = (e) => {\n    const value = e.target.value;\n    setText(value);\n  };\n\n  const selectAnswer = (index) => {\n    let oldAnswers = [...answers];\n    const previouSelection = oldAnswers.some((ans) => ans.isCorrect == true);\n    if (previouSelection) {\n      //map through and return array where all isCorrect is false.\n      let newArray = [];\n      oldAnswers.map((ele) => {\n        const obj = {\n          option: ele.option,\n          isCorrect: false,\n          selected: false,\n        };\n        newArray.push(obj);\n      });\n      let selectedAnswer = newArray[index];\n      selectedAnswer.isCorrect = !selectedAnswer.isCorrect;\n      newArray[index] = selectedAnswer;\n      setAnswers(newArray);\n    } else {\n      let selectedAnswer = oldAnswers[index];\n      selectedAnswer.isCorrect = !selectedAnswer.isCorrect;\n      oldAnswers[index] = selectedAnswer;\n      setAnswers(oldAnswers);\n    }\n  };\n\n  const removeAnswer = (e, index) => {\n    e.stopPropagation();\n    const oldAnswers = [...answers];\n    oldAnswers.splice(index, 1);\n    setAnswers(oldAnswers);\n  };\n\n  const saveQuestionToDatabase = async () => {\n    //gather all the variables and save the\n    if (!preview)\n      return window.alert(\n        \"we can not save a question without the actual question. can we ?\"\n      );\n    const findAnswers = answers.some((ans) => ans.isCorrect == true);\n    if (!findAnswers) {\n      return window.alert(\"please select the correct answer\");\n    }\n\n    const questionObj = {\n      question: preview,\n      answers,\n      questionImageUrl: \"\",\n      examinationType: selectedExamName,\n      examId: selectedExamId,\n      explanation: explanation,\n    };\n\n    try {\n      setSubmitted(!submitted);\n      await submitQuestionToDB({\n        variables: {\n          input: questionObj,\n        },\n      });\n    } catch (error) {}\n  };\n\n  const handleExplanationChange = (e) => {\n    const value = e.target.value;\n    setExplanation(value);\n  };\n\n  const editQuestionInDatabase = async () => {\n    //construct question to update\n    if (!preview)\n      return window.alert(\n        \"we can not save a question without the actual question. can we ?\"\n      );\n    const findAnswers = answers.some((ans) => ans.isCorrect == true);\n    if (!findAnswers) {\n      return window.alert(\"please select the correct answer\");\n    }\n\n    const questionObj = {\n      question: preview,\n      answers,\n      questionImageUrl: \"\",\n      examinationType: questionToEdit.examinationType,\n      examId: questionToEdit.examId,\n      explanation: explanation,\n    };\n\n    try {\n      setSubmitted(!submitted);\n      await editQuestion({\n        variables: {\n          input: questionObj,\n          questionId: questionToEdit && questionToEdit.id,\n        },\n      });\n    } catch (error) {}\n  };\n\n  return (\n    <NewQuestionStyles>\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3\">\n          <p className=\"text-danger lead\">{errors}</p>\n          {!editMode && (\n            <div className=\"form-group\">\n              <select className=\"custom-select\" onChange={handleExamChange}>\n                <option value=\"0\">select examination type</option>\n                {loadingData && <option>loading data.......</option>}\n                {examType &&\n                  examType.length > 0 &&\n                  examType.map(({ id, examName }) => {\n                    return (\n                      <option value={`${id}/${examName}`} key={id}>\n                        {examName}\n                      </option>\n                    );\n                  })}\n              </select>\n            </div>\n          )}\n          <div className=\"form-group\">\n            {selectedExamName && (\n              <p className=\"lead\">\n                <span>\n                  Selected Examination : <b>{selectedExamName}</b>\n                </span>\n              </p>\n            )}\n          </div>\n\n          <div className=\"\">\n            <p className=\"text-center\">\n              <b> Preview of the question</b>\n            </p>\n          </div>\n          <div className=\"\" dangerouslySetInnerHTML={setHtml(preview)} />\n\n          <h4> Type Question</h4>\n\n          <Editor\n            editorState={question}\n            onEditorStateChange={handleChange}\n            editorClassName=\"writeQuestion\"\n            placeholder=\"Type your question here.....\"\n            toolbar={DraftJsToolBar}\n          />\n\n          <div className=\"input-group\">\n            <textarea\n              className=\"form-control\"\n              aria-label=\"With textarea\"\n              value={text}\n              onChange={handleTextChange}\n              ref={textAnswer}\n            ></textarea>\n            <div\n              className=\"input-group-append append-div\"\n              onClick={handleAnswerSaved}\n            >\n              <span className=\"input-group-text append-text\">save answer</span>\n            </div>\n          </div>\n\n          <div className=\"answers-div\">\n            {answers &&\n              answers.length > 0 &&\n              answers.map(({ option, isCorrect }, index) => {\n                return (\n                  <div\n                    className=\"div-select-answer\"\n                    key={index}\n                    onClick={() => selectAnswer(index)}\n                  >\n                    <p className={isCorrect ? \"correctAnswer\" : \"\"}>{option}</p>\n\n                    <span\n                      className=\"remove-span\"\n                      onClick={(e) => removeAnswer(e, index)}\n                    >\n                      &#10006;\n                    </span>\n                  </div>\n                );\n              })}\n          </div>\n\n          <div className=\"form-group\">\n            <label>Explanation for the answer if any</label>\n            <textarea\n              className=\"form-control\"\n              aria-label=\"With textarea\"\n              value={explanation}\n              onChange={handleExplanationChange}\n            ></textarea>\n          </div>\n\n          {editMode ? (\n            <div className=\"text-center\">\n              <button\n                disabled={submitted}\n                className=\"btn btn-lg btn-danger\"\n                onClick={editQuestionInDatabase}\n              >\n                {submitted\n                  ? \"editing question please wait......\"\n                  : \"edit question\"}\n              </button>\n            </div>\n          ) : (\n            <div className=\"text-center\">\n              <button\n                disabled={submitted}\n                className=\"btn btn-lg btn-success\"\n                onClick={saveQuestionToDatabase}\n              >\n                {submitted\n                  ? \"saving question please wait......\"\n                  : \"save question\"}\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </NewQuestionStyles>\n  );\n};\n\nexport default SaveNewQuestion;\n","/app/src/common/draftJSToolBar.js",[],"/app/src/components/loadQuestionsComponent.js",["510","511","512","513","514","515"],"import React, { useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\nimport { GetDifferentExamination, GetAllQuestions } from \"../graphql/queries\";\nimport { DeleteOneQuestion } from \"../graphql/mutation\";\nimport ShowQuestionComponent from \"./showQuestionComponent\";\nimport Loading from \"../common/loading\";\nimport styled from \"styled-components\";\nimport EditButton from \"./editButton\";\n\nconst LoadQuestionsStyle = styled.div``;\n\nconst buttonsToDisplay = (total, numberPerPage) => {\n  const buttonNumber = +total / +numberPerPage;\n  let array = [];\n  array.length = Math.ceil(buttonNumber);\n  return array.fill(1);\n};\n\nconst LoadQuestionsComponent = ({ history }) => {\n  const [examType, setExamType] = useState([]);\n  const [loadingData, setLoading] = useState(false);\n  const [selectedExamId, setSelectedExamId] = useState(\"\");\n  const [selectedExamName, setSelectedExamName] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [questions, setQuestions] = useState({});\n  const [totalQuestion, setTotalQuestion] = useState(0);\n  const [queryRan, setQueryRan] = useState(false);\n\n  const [questionsQuery, questionsQueryResult] = useLazyQuery(GetAllQuestions);\n  const [examsQuery, examsQueryResult] = useLazyQuery(GetDifferentExamination);\n\n  const [deleteQuestion, deleteQuestionResult] = useMutation(DeleteOneQuestion);\n\n  useEffect(() => {\n    examsQuery({\n      variables: {\n        examType: \"multiple choice questions\",\n      },\n    });\n  }, []);\n\n  useEffect(() => {\n    if (examsQueryResult.data) {\n      setExamType(examsQueryResult.data.getExamByType);\n      setLoading(false);\n    }\n\n    if (examsQueryResult.loading) {\n      setLoading(true);\n    }\n\n    if (examsQueryResult.error) {\n      setErrors(examsQueryResult.error.message);\n      setLoading(false);\n    }\n  }, [examsQueryResult.data, examsQueryResult.error]);\n\n \n\n  useEffect(() => {\n    if (questionsQueryResult.error) {\n      setErrors(questionsQueryResult.error.message);\n      setLoading(true);\n      setQueryRan(!queryRan);\n    }\n\n    if (questionsQueryResult.data) {\n      setQuestions(questionsQueryResult.data.getAllQuestions.questions);\n      setTotalQuestion(questionsQueryResult.data.getAllQuestions.totalQuestion);\n      setLoading(false);\n    }\n  }, [questionsQueryResult.error, questionsQueryResult.data]);\n\n  useEffect(() => {\n    if (deleteQuestionResult.error) {\n      setErrors(deleteQuestionResult.error.message);\n      setLoading(true);\n    }\n\n    if (deleteQuestionResult.data) {\n      if (deleteQuestionResult.data.deleteQuestion) {\n        window.alert(\"question deleted successfully\");\n        setLoading(false);\n      }\n    }\n  }, [deleteQuestionResult.error, deleteQuestionResult.data]);\n\n  const getMoreQuestions = (e, index) => {\n    try {\n      e.stopPropagation();\n      e.preventDefault();\n      setLoading(true);\n      setQueryRan(!queryRan);\n      questionsQueryResult.fetchMore({\n        variables: {\n          examId: selectedExamId,\n          offset: questions.length * (index - 1),\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult) return prev;\n          return Object.assign({}, prev, {\n            getAllQuestions: {\n              totalQuestion: fetchMoreResult.getAllQuestions.totalQuestion,\n              __typename: \"QuestionsTotal\",\n              questions: [\n                //...prev.getAllQuestions.questions,\n                ...fetchMoreResult.getAllQuestions.questions,\n              ],\n            },\n          });\n        },\n      });\n    } catch (error) {}\n  };\n\n  const handleExamChange = async (e) => {\n    const value = e.target.value;\n    if (value == \"0\") return;\n    const splitValue = value.split(\"/\");\n    setSelectedExamId(splitValue[0]);\n    setSelectedExamName(splitValue[1]);\n    try {\n      setQueryRan(!queryRan);\n      questionsQuery({\n        variables: {\n          examId: splitValue[0],\n          offset: 0,\n        },\n        fetchPolicy: \"cache-and-network\",\n      });\n    } catch (error) {}\n  };\n\n  const handleButtonAction = (question) => {\n    history.push(\"/edit_question\", {\n      question: question,\n    });\n  };\n\n  const handleQuestionDeleteAction = async ({ questionId, index }) => {\n    //delete the question here\n    try {\n      setLoading(true);\n      await deleteQuestion({\n        variables: {\n          questionId,\n        },\n        refetchQueries: [\n          {\n            query: GetAllQuestions,\n            variables: {\n              examId: selectedExamId,\n              offset: questions.length * (index - 1),\n            },\n          },\n        ],\n      });\n    } catch (error) {}\n  };\n\n  return (\n    <LoadQuestionsStyle>\n      <div className=\"row\">\n        <div className=\"col-md-8 offset-md-2\">\n          {errors && <p className=\"lead text-danger\">Error: {errors}</p>}\n          <div className=\"form-group\">\n            <select className=\"custom-select\" onChange={handleExamChange}>\n              <option value=\"0\">select examination type</option>\n              {examsQueryResult.loading && <option>loading data.......</option>}\n              {examType &&\n                examType.length > 0 &&\n                examType.map(({ id, examName }) => {\n                  return (\n                    <option value={`${id}/${examName}`} key={id}>\n                      {examName}\n                    </option>\n                  );\n                })}\n            </select>\n          </div>\n\n          <div className=\"form-group\">\n            {selectedExamName && (\n              <p className=\"lead\">\n                Selected Examination:{\" \"}\n                <span>\n                  {selectedExamName && selectedExamName.toUpperCase()}\n                </span>\n              </p>\n            )}\n          </div>\n\n          {questions && questions.length > 0 ? (\n            questions.map((question, index) => {\n              return (\n                <React.Fragment key={index}>\n                  <ShowQuestionComponent\n                    question={question}\n                    components={[\n                      EditButton({\n                        variables: question,\n                        style: \"info\",\n                        buttonName: \"Edit Question\",\n                        action: handleButtonAction,\n                      }),\n                      EditButton({\n                        variables: {\n                          questionId: question.id,\n                          index: index + 1,\n                        },\n                        style: \"danger\",\n                        buttonName: \"Delete Question\",\n                        action: handleQuestionDeleteAction,\n                      }),\n                    ]}\n                  />\n                </React.Fragment>\n              );\n            })\n          ) : (\n            <div>\n              {queryRan && (\n                <p>\n                  No questions saved yet for the selected examination;{\" \"}\n                  {selectedExamName}\n                </p>\n              )}\n            </div>\n          )}\n\n          {loadingData && <Loading />}\n\n          <nav aria-label=\"Page navigation example\">\n            <ul className=\"pagination\">\n              {totalQuestion > 20 &&\n                buttonsToDisplay(totalQuestion, 20).map((_, index) => {\n                  return (\n                    <li\n                      className=\"page-item\"\n                      key={index}\n                      onClick={(e) => getMoreQuestions(e, index + 1)}\n                    >\n                      <a className=\"page-link\" href=\"\">\n                        {index + 1}\n                      </a>\n                    </li>\n                  );\n                })}\n            </ul>\n          </nav>\n        </div>\n      </div>\n    </LoadQuestionsStyle>\n  );\n};\n\nexport default LoadQuestionsComponent;\n","/app/src/components/showQuestionComponent.js",[],"/app/src/common/loading.js",[],"/app/src/components/editButton.js",[],"/app/src/components/editQuestionComponent.js",[],"/app/src/components/createExaminationSchedule.js",["516","517","518","519","520","521","522","523","524"],"import React, { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport {\n  CreateExaminationSchedule,\n  CreateSpellingExaminationSchedule,\n  CreateEssayExaminationSchedule,\n} from \"../graphql/mutation\";\nimport ExaminationTypeComponent from \"../common/examinationTypeComponent\";\nimport styled from \"styled-components\";\n\nconst CreateExaminationScheduleStyles = styled.div`\n  .div-time-input {\n    display: flex;\n    justify-content: space-around;\n  }\n  .sm-width {\n    width: 30%;\n  }\n\n  .div-time-input span {\n    margin-bottom: 10px;\n  }\n`;\n\nconst CreateExaminationScheduleComponent = () => {\n  const [errors, setErrors] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [totalQuestions, setTotalQuestions] = useState(\"\");\n  const [scheduleExamName, setScheduleExamName] = useState(\"\");\n  const [hours, setHours] = useState(\"\");\n  const [minutes, setMinutes] = useState(\"\");\n  const [selExamType, setSelExamType] = useState(null);\n  const [selExamDetails, setSelExamDetails] = useState(null);\n\n  const [createSchedule, createScheduleResult] = useMutation(\n    CreateExaminationSchedule\n  );\n\n  const [createSpellingSchedule, createSpellingScheduleResult] = useMutation(\n    CreateSpellingExaminationSchedule\n  );\n\n  const [createEssaySchedule, createEssayScheduleResult] = useMutation(\n    CreateEssayExaminationSchedule\n  );\n\n  useEffect(() => {\n    if (createEssayScheduleResult.error) {\n      setErrors(createEssayScheduleResult.error.message);\n      setProcessing(!processing);\n    }\n    if (createEssayScheduleResult.data) {\n      setProcessing(!processing);\n      setTotalQuestions(\"\");\n      setScheduleExamName(\"\");\n      setHours(\"\");\n      setMinutes(\"\");\n      window.alert(\"Examination schedule created successfully\");\n    }\n  }, [createEssayScheduleResult.error, createEssayScheduleResult.data]);\n\n  useEffect(() => {\n    if (createSpellingScheduleResult.error) {\n      setErrors(createSpellingScheduleResult.error.message);\n      setProcessing(!processing);\n    }\n    if (createSpellingScheduleResult.data) {\n      setProcessing(!processing);\n      setTotalQuestions(\"\");\n      setScheduleExamName(\"\");\n      setHours(\"\");\n      setMinutes(\"\");\n      window.alert(\"Examination schedule created successfully\");\n    }\n  }, [createSpellingScheduleResult.error, createSpellingScheduleResult.data]);\n\n  useEffect(() => {\n    if (createScheduleResult.error) {\n      setErrors(createScheduleResult.error.message);\n      setProcessing(!processing);\n    }\n    if (createScheduleResult.data) {\n      setProcessing(!processing);\n      setTotalQuestions(\"\");\n      setScheduleExamName(\"\");\n      setHours(\"\");\n      setMinutes(\"\");\n      window.alert(\"Examination schedule created successfully\");\n    }\n  }, [createScheduleResult.error, createScheduleResult.data]);\n\n  const handleFormSubmit = async (e) => {\n    e.preventDefault();\n    if (!selExamDetails) {\n      return window.alert(\"please select the examination type\");\n    }\n    //gather all the input here\n    if (scheduleExamName == \"\") {\n      return window.alert(\"The Examination name is a required field \");\n    }\n    if (totalQuestions == \"\") {\n      return window.alert(\"The total questions field is required.\");\n    }\n    if (hours == \"\" && minutes == \"\") {\n      return window.alert(\"Please set the examination duration\");\n    }\n    const duration = +hours * 60 + +minutes;\n    const scheduleObj = {\n      numberofQuestions: +totalQuestions,\n      examinationName: scheduleExamName,\n      active: false,\n      examinationDuration: duration,\n      questions: [],\n      questionType: selExamType,\n      examTypeID: selExamDetails.examId,\n      examTypeName: selExamDetails.examName,\n    };\n    const confirmDetails = window.confirm(`Please confirm the following details: \\n\n                                           Examination schedule name : ${scheduleExamName} \\n\n                                           Number of questions: ${totalQuestions} \\n\n                                           Examination duration: ${\n                                             hours ? hours : 0\n                                           } hours : ${minutes} minutes \\n\n\n    `);\n    if (!confirmDetails) return;\n    switch (selExamType) {\n      case \"multiple choice questions\":\n        try {\n          setProcessing(!processing);\n          await createSchedule({\n            variables: {\n              input: scheduleObj,\n            },\n          });\n        } catch (error) {}\n        break;\n      case \"spelling examination\":\n        try {\n          setProcessing(!processing);\n          await createSpellingSchedule({\n            variables: {\n              input: scheduleObj,\n            },\n          });\n        } catch (error) {}\n\n        break;\n      case \"short answer exam\":\n        try {\n          setProcessing(!processing);\n          await createEssaySchedule({\n            variables: {\n              input: scheduleObj,\n            },\n          });\n        } catch (error) {}\n        break;\n      case \"essay exam\":\n        break;\n      case \"quantitative exam\":\n        break;\n\n      default:\n        break;\n    }\n  };\n  const handleChange = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    switch (name) {\n      case \"totalQuestions\":\n        setTotalQuestions(value);\n        break;\n      case \"scheduleExamName\":\n        setScheduleExamName(value);\n        break;\n      case \"hours\":\n        setHours(value);\n        break;\n      case \"minutes\":\n        setMinutes(value);\n        break;\n    }\n  };\n\n  const selectedExamTypeFunc = (examType) => {\n    setSelExamType(examType);\n  };\n  const selectedExamNameFunc = ({ examId, examName }) => {\n    setSelExamDetails({ examId, examName });\n  };\n  return (\n    <CreateExaminationScheduleStyles>\n      <div className=\"row\">\n        <div className=\"col-md-8 offset-md-2\">\n          <h3 className=\"text-center\">Create New Examination Schedule</h3>\n          {errors && <p className=\"lead text-danger\">Error: {errors}</p>}\n          <ExaminationTypeComponent\n            selectedExamTypeFunc={selectedExamTypeFunc}\n            selectedExamNameFunc={selectedExamNameFunc}\n            display=\"all\"\n          />\n          <form onSubmit={handleFormSubmit}>\n            <div className=\"mb-3\">\n              <label htmlFor=\"examinationName\" className=\"form-label\">\n                Examination schedule name\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"examinationName\"\n                value={scheduleExamName}\n                name=\"scheduleExamName\"\n                onChange={handleChange}\n                aria-describedby=\"examHelp\"\n              />\n              <div id=\"examHelp\" className=\"form-text\">\n                Name of the schedule examination\n              </div>\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"totalQuestions\" className=\"form-label\">\n                Total Question\n              </label>\n\n              <input\n                type=\"number\"\n                value={totalQuestions}\n                className=\"form-control sm-width\"\n                id=\"totalQuestions\"\n                name=\"totalQuestions\"\n                aria-describedby=\"emailHelp\"\n                onChange={handleChange}\n              />\n              <div id=\"emailHelp\" className=\"form-text\">\n                Total number of questions in the examination\n              </div>\n            </div>\n            <div className=\"mb-3\">\n              <div className=\"row\">\n                <div className=\"col-md-3\">\n                  <input\n                    type=\"number\"\n                    name=\"hours\"\n                    className=\"form-control\"\n                    value={hours}\n                    onChange={handleChange}\n                  />\n                  <span>Hour</span>\n                </div>\n\n                <div className=\"col-md-3\">\n                  <input\n                    type=\"number\"\n                    name=\"minutes\"\n                    className=\"form-control\"\n                    value={minutes}\n                    onChange={handleChange}\n                  />\n                  <span>Minutes</span>\n                </div>\n              </div>\n\n              <div id=\"emailHelp\" className=\"form-text\">\n                Set the duration of the examination\n              </div>\n            </div>\n\n            <div className=\"text-center\">\n              <button\n                type=\"submit\"\n                disabled={processing}\n                className=\"btn btn-success btn-lg\"\n              >\n                {processing\n                  ? \"please wait.....\"\n                  : \"submit examination schedule\"}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </CreateExaminationScheduleStyles>\n  );\n};\n\nexport default CreateExaminationScheduleComponent;\n","/app/src/components/addQuestionsToExamination.js",["525","526","527","528","529","530","531","532","533","534"],"/app/src/common/loadQuestionsComponent.js",["535","536","537","538","539","540"],"import React, { useEffect, useState } from \"react\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { GetAllQuestions, GetAllSpellingQuestions } from \"../graphql/queries\";\nimport ShowQuestionComponent from \"./showQuestionsComponent\";\nimport ShowSpellingComponent from \"./showSpellingComponent\";\nimport Loading from \"../common/loading\";\nimport styled from \"styled-components\";\n\nconst LoadQuestionsStyle = styled.div``;\n\nconst buttonsToDisplay = (total, numberPerPage) => {\n  const buttonNumber = +total / +numberPerPage;\n  let array = [];\n  array.length = Math.ceil(buttonNumber);\n  return array.fill(1);\n};\n\nconst LoadQuestionsComponent = ({\n  examId,\n  handleQuestionClick,\n  examType,\n}) => {\n  const [loadingData, setLoading] = useState(false);\n  const [errors, setErrors] = useState(null);\n  const [questions, setQuestions] = useState({});\n  const [totalQuestion, setTotalQuestion] = useState(0);\n  const [queryRan, setQueryRan] = useState(false);\n\n  const [questionsQuery, questionsQueryResult] = useLazyQuery(GetAllQuestions, {\n    variables: {\n      examId: examId,\n    },\n  });\n\n  const [spellingQuestionsQuery, spellingQuestionsQueryResult] = useLazyQuery(\n    GetAllSpellingQuestions,\n    {\n      variables: {\n        examId: examId,\n      },\n    }\n  );\n\n  useEffect(() => {\n    switch (examType) {\n      case \"multiple choice questions\":\n        questionsQuery();\n        break;\n\n      case \"spelling examination\":\n        spellingQuestionsQuery();\n        break;\n      case \"short answer exam\":\n        break;\n      case \"essay exam\":\n        break;\n      case \"quantitative exam\":\n        break;\n    }\n  }, [examId]);\n\n  //effects for multiple choice questions\n  useEffect(() => {\n    if (questionsQueryResult.error) {\n      setErrors(questionsQueryResult.error.message);\n      setLoading(true);\n      setQueryRan(!queryRan);\n    }\n\n    if (questionsQueryResult.data) {\n      setQuestions(questionsQueryResult.data.getAllQuestions.questions);\n      setTotalQuestion(questionsQueryResult.data.getAllQuestions.totalQuestion);\n      setLoading(false);\n    }\n  }, [questionsQueryResult.error, questionsQueryResult.data]);\n\n  //effect for spelling questions loading\n  useEffect(() => {\n    if (spellingQuestionsQueryResult.error) {\n      setErrors(spellingQuestionsQueryResult.error.message);\n      setLoading(true);\n      setQueryRan(!queryRan);\n    }\n\n    if (spellingQuestionsQueryResult.data) {\n\n      setQuestions(\n        spellingQuestionsQueryResult.data.getAllSpellingQuestions.questions\n      );\n      setTotalQuestion(\n        spellingQuestionsQueryResult.data.getAllSpellingQuestions.totalQuestion\n      );\n      \n      setLoading(false);\n    }\n  }, [spellingQuestionsQueryResult.error, spellingQuestionsQueryResult.data]);\n\n  //get more questions for multiple choice questions\n  const getMoreQuestions = (e, index) => {\n    try {\n      e.stopPropagation();\n      e.preventDefault();\n      setLoading(true);\n      setQueryRan(!queryRan);\n      questionsQueryResult.fetchMore({\n        variables: {\n          examId: examId,\n          offset: questions.length * (index - 1),\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult) return prev;\n          return Object.assign({}, prev, {\n            getAllQuestions: {\n              totalQuestion: fetchMoreResult.getAllQuestions.totalQuestion,\n              __typename: \"QuestionsTotal\",\n              questions: [\n                //...prev.getAllQuestions.questions,\n                ...fetchMoreResult.getAllQuestions.questions,\n              ],\n            },\n          });\n        },\n      });\n    } catch (error) {}\n  };\n\n  //get more questions for spelling questions\n  const getMoreSpellingQuestions = (e, index) => {\n    try {\n      e.stopPropagation();\n      e.preventDefault();\n      setLoading(true);\n      setQueryRan(!queryRan);\n      spellingQuestionsQueryResult.fetchMore({\n        variables: {\n          examId: examId,\n          offset: questions.length * (index - 1),\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult) return prev;\n          return Object.assign({}, prev, {\n            getAllSpellingQuestions: {\n              totalQuestion:\n                fetchMoreResult.getAllSpellingQuestions.totalQuestion,\n              __typename: \"QuestionsTotal\",\n              questions: [\n                //...prev.getAllQuestions.questions,\n                ...fetchMoreResult.getAllSpellingQuestions.questions,\n              ],\n            },\n          });\n        },\n      });\n    } catch (error) {}\n  };\n\n  return (\n    <LoadQuestionsStyle>\n      {errors && <p className=\"lead text-danger\">Error: {errors}</p>}\n\n      {examType === \"multiple choice questions\" &&\n      questions &&\n      questions.length > 0 ? (\n        questions.map((question, index) => {\n          return (\n            <div key={index} onClick={() => handleQuestionClick(question)}>\n              <ShowQuestionComponent question={question} />\n            </div>\n          );\n        })\n      ) : (\n        <div>{queryRan && <p>No questions saved yet.</p>}</div>\n      )}\n\n      {examType === \"spelling examination\" && questions &&\n      questions.length > 0 ? (\n        questions.map((word, index) => {\n          return (\n            <div key={index} onClick={() => handleQuestionClick(word)}>\n              <ShowSpellingComponent question={word} />\n            </div>\n          );\n        })\n      ) : (\n        <div>{queryRan && <p>No questions saved yet.</p>}</div>\n      )}\n\n      {loadingData && <Loading />}\n\n      <nav aria-label=\"Page navigation example\">\n        <ul className=\"pagination\">\n          {examType === \"multiple choice questions\" &&\n            totalQuestion > 0 &&\n            buttonsToDisplay(totalQuestion, 20).map((_, index) => {\n              return (\n                <li\n                  className=\"page-item\"\n                  key={index}\n                  onClick={(e) => getMoreQuestions(e, index + 1)}\n                >\n                  <a className=\"page-link\" href=\"\">\n                    {index + 1}\n                  </a>\n                </li>\n              );\n            })}\n\n          {examType === \"spelling examination\" &&\n            totalQuestion > 0 &&\n            buttonsToDisplay(totalQuestion, 20).map((_, index) => {\n              return (\n                <li\n                  className=\"page-item\"\n                  key={index}\n                  onClick={(e) => getMoreSpellingQuestions(e, index + 1)}\n                >\n                  <a className=\"page-link\" href=\"\">\n                    {index + 1}\n                  </a>\n                </li>\n              );\n            })}\n        </ul>\n      </nav>\n    </LoadQuestionsStyle>\n  );\n};\n\nexport default LoadQuestionsComponent;\n","/app/src/common/showQuestionsComponent.js",[],"/app/src/components/login.js",["541","542","543","544"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { LoginUser } from \"../graphql/queries\";\nimport state from \"../applicationState\";\nimport { useRecoilState } from \"recoil\";\nimport store from \"store\";\nconst LoginStyle = styled.div``;\n\nconst Login = (props) => {\n  const [isAuth, setAuthState] = useRecoilState(state.authState);\n  const [currentUser, setCurrentUser] = useRecoilState(state.currentUserState);\n  const [token, setToken] = useRecoilState(state.authToken);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [submitted, setSubmitted] = useState(false);\n\n  useEffect(() => {\n    //check if the person is authenticated already\n    \n  }, []);\n\n  const [loginUserFunction, loginUserResult] = useLazyQuery(LoginUser, {\n    variables: {\n      username,\n      password,\n    },\n  });\n  useEffect(() => {\n    if (\n      submitted &&\n      loginUserResult.data &&\n      loginUserResult.data.loginUser &&\n      loginUserResult.called\n    ) {\n      const typename = loginUserResult.data.loginUser.__typename;\n\n      if (typename === \"Error\") {\n        const message = loginUserResult.data.loginUser.message;\n        setError(message);\n        setSubmitted(!submitted);\n      } else {\n        //we are good here we have the baggages here\n        const {\n          id,\n          token,\n          username,\n          userType,\n          name,\n        } = loginUserResult.data.loginUser;\n        store.set(\"authToken\", token);\n        store.set(\"isAuth\", true);\n        store.set(\n          \"currentUser\",\n          JSON.stringify({ id, username, userType, name })\n        );\n        setAuthState(true);\n        setCurrentUser({ id, username, userType, name });\n        setToken(token);\n        setSubmitted(!submitted);\n\n        if (userType === \"super-admin\") {\n          props.history.push(\"/dashboard\");\n        } else if (userType === \"student\") {\n          props.history.push(\"/exam_start_page\");\n        }\n      }\n    }\n    if (loginUserResult.error) {\n      setSubmitted(!submitted);\n    }\n  }, [loginUserResult, submitted]);\n\n  const submitForm = (event) => {\n    event.preventDefault();\n    setSubmitted(!submitted);\n    loginUserFunction();\n  };\n\n  const onInputChange = (event) => {\n    event.stopPropagation();\n    const name = event.target.name;\n    switch (name) {\n      case \"password\":\n        setPassword(event.target.value);\n        break;\n      case \"username\":\n        setUsername(event.target.value);\n        break;\n      default:\n        break;\n    }\n  };\n  return (\n    <LoginStyle>\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3\">\n          <p className=\"text-danger\">{error}</p>\n          <p className=\"lead text-center\">Login</p>\n          <form onSubmit={submitForm}>\n            <div className=\"form-group\">\n              <label htmlFor=\"name\">Username </label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                name=\"username\"\n                aria-describedby=\"username\"\n                value={username}\n                onChange={onInputChange}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"password\">password</label>\n              <input\n                type=\"password\"\n                className=\"form-control\"\n                id=\"password\"\n                onChange={onInputChange}\n                name=\"password\"\n                value={password}\n              />\n            </div>\n\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              disabled={submitted}\n            >\n              {submitted ? \"bypassing security.....\" : \"login\"}\n            </button>\n          </form>\n        </div>\n      </div>\n    </LoginStyle>\n  );\n};\n\nexport default Login;\n","/app/src/components/publicRoute.js",[],"/app/src/components/dashboard.js",[],"/app/src/components/activeExams.js",["545","546","547","548","549","550","551"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { GetActiveExamination } from \"../graphql/queries\";\nimport { StartExamination } from \"../graphql/mutation\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport state from \"../applicationState\";\nimport Loading from \"../common/loading\";\nimport store from \"store\";\nimport Modal from \"react-modal\";\nModal.setAppElement(\"#root\");\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\nconst ActiveExamStyles = styled.div`\n  .div-panel {\n    padding: 20px;\n    color: #fff;\n    background: #2a8e86;\n    min-height: 200px;\n    margin-bottom: 20px;\n  }\n  p {\n    font-size: 18px;\n  }\n  span {\n    font-size: 16px;\n    color: #010605;\n    padding: 10px;\n  }\n  .m {\n    flex-direction: row;\n  }\n`;\n\nconst convertMinutesToHours = (minutesToConvert) => {\n  const hours = Math.floor(minutesToConvert / 60);\n  const minutes = minutesToConvert - hours * 60;\n  if (hours == 0) {\n    return `${minutes} minutes`;\n  }\n  return `${hours} hours ${minutes} minutes`;\n};\n\nconst ActiveExams = ({ history }) => {\n  const [activeExams, setActiveExams] = useState([]);\n  const [errors, setError] = useState(null);\n  const { loading, error, data } = useQuery(GetActiveExamination);\n  const [processing, setProcessing] = useState(false);\n  const [examQuestions, setExamQuestions] = useRecoilState(\n    state.questionsState\n  );\n  const [duration, setDuration] = useRecoilState(state.examDurationState);\n  const currentLoginUser = useRecoilValue(state.currentLoginUserState);\n  const [examStarted, setExamStarted] = useRecoilState(\n    state.currentLoginUserState\n  );\n  const [startExaminationFunction, startExaminationResult] = useMutation(\n    StartExamination\n  );\n\n  const [examProcessing, setExamProcessing] = useState(false);\n\n  //useeffect of start exam function\n\n  useEffect(() => {\n    if (startExaminationResult.data) {\n      if (\n        startExaminationResult.data.startExam.__typename == \"ExamTakenSuccess\"\n      ) {\n        //we are successful here we need to save everything here\n        const { examId, questionType } = startExaminationResult.data.startExam;\n        setExamStarted(true);\n        //persists it to store here\n        store.set(\"examStarted\", true);\n        store.set(\"examQuestions\", examQuestions);\n        store.set(\"currentIndex\", 0);\n        store.set(\"duration\", duration);\n        store.set(\"examId\", examId);\n        store.set(\"totalQuestions\", examQuestions.length);\n        setExamProcessing(!examProcessing);\n        switch (questionType) {\n          case \"multiple choice questions\":\n            history.replace(`/exam/multi_choice/${examId}`);\n            break;\n          case \"spelling examination\":\n            history.replace(`/exam/spelling/${examId}`);\n            break;\n          case \"short answer exam\":\n            history.replace(`/exam/short_essay/${examId}`);\n            break;\n          case \"essay exam\":\n            break;\n          case \"quantitative exam\":\n            break;\n        }\n      } else if (startExaminationResult.data.startExam.__typename == \"Error\") {\n        const errorObj = startExaminationResult.data.startExam;\n        setError(errorObj);\n        setExamProcessing(!examProcessing);\n      }\n    }\n\n    if (startExaminationResult.loading) {\n      setExamProcessing(!examProcessing);\n    }\n\n    if (startExaminationResult.error) {\n      setError(startExaminationResult.error.message);\n      setExamProcessing(!examProcessing);\n    }\n  }, [\n    startExaminationResult.data,\n    startExaminationResult.error,\n    startExaminationResult.loading,\n  ]);\n\n  useEffect(() => {\n    if (error) {\n      setError(error);\n      setProcessing(!processing);\n    }\n    if (loading) {\n      setProcessing(!processing);\n    }\n\n    if (data) {\n      const examination = data && data.activeExamination;\n      setProcessing(!processing);\n      setActiveExams(examination);\n    }\n  }, [data, loading, error]);\n\n  const startExamination = async (\n    e,\n    { id, questions, examinationDuration, examinationName, questionType }\n  ) => {\n    e.preventDefault();\n    setExamQuestions(questions);\n    setDuration(examinationDuration);\n    store.set(\"examDetails\", {\n      examName: examinationName,\n      examType: questionType,\n      examDuration: examinationDuration,\n    });\n    //get the canidate details from the currentLoginUser\n    if (!currentLoginUser) {\n      return alert(\"How did we get here please login.\");\n    }\n\n    const examDetails = {\n      examDetails: {\n        examinationName,\n        examinationId: id,\n        numberOfQuestions: +questions.length,\n        duration: +examinationDuration,\n      },\n      timeExamStarted: new Date(),\n      canidateDetails: {\n        username: currentLoginUser.username,\n        name: currentLoginUser.name,\n      },\n      examStarted: true,\n      examFinished: false,\n      questionType,\n    };\n\n    try {\n      await startExaminationFunction({\n        variables: {\n          examDetails: examDetails,\n        },\n      });\n    } catch (error) {}\n  };\n  return (\n    <ActiveExamStyles>\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <div className=\"text-center\">{processing && <Loading />}</div>\n\n          {errors && (\n            <p className=\"lead text-center text-danger\">{errors.message}</p>\n          )}\n        </div>\n      </div>\n      {activeExams && activeExams.length > 0 ? (\n        <div className=\"row\">\n          {activeExams.map(\n            ({\n              id,\n              numberofQuestions,\n              examinationName,\n              examinationDuration,\n              questions,\n              questionType,\n            }) => {\n              return (\n                <div className=\"col-md-3\" key={id}>\n                  <div className=\"div-panel\">\n                    <p>\n                      Examination :{\" \"}\n                      <b>\n                        <span>\n                          {examinationName && examinationName.toUpperCase()}\n                        </span>\n                      </b>\n                    </p>\n                    <p>\n                      Number of Questions:{\" \"}\n                      <span>\n                        <b>{numberofQuestions}</b>\n                      </span>\n                    </p>\n                    <p>\n                      Duration :{\" \"}\n                      <span>\n                        <b>\n                          {examinationDuration &&\n                            convertMinutesToHours(examinationDuration)}{\" \"}\n                        </b>\n                      </span>\n                    </p>\n\n                    <p>\n                      Examination Type :{\" \"}\n                      <span>\n                        <b>{questionType.toUpperCase()}</b>\n                      </span>\n                    </p>\n                    <div className=\"text-center\">\n                      <button\n                        className=\"btn btn-warning\"\n                        onClick={(e) =>\n                          startExamination(e, {\n                            questions,\n                            examinationDuration,\n                            examinationName,\n                            id,\n                            questionType,\n                          })\n                        }\n                      >\n                        Start Examination\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              );\n            }\n          )}\n        </div>\n      ) : (\n        <div>\n          <p className=\"lead text-info text-center\">\n            No active examination at the moment\n          </p>\n        </div>\n      )}\n\n      <Modal\n        isOpen={examProcessing}\n        style={customStyles}\n        contentLabel=\"Examination starting modal\"\n      >\n        <p>\n          Instructions\n          <span>Relax as we get you all started with your exams</span>\n        </p>\n        <p>Please wait.....</p>\n      </Modal>\n    </ActiveExamStyles>\n  );\n};\n\nexport default ActiveExams;\n","/app/src/applicationState/examDurationState.js",["552"],"import { selector, atom } from \"recoil\";\n\nconst examDurationState = atom({\n  key: \"examDurationState\",\n});\n\nexport default examDurationState;\n","/app/src/localStorage.js",[],"/app/src/applicationState/examStartedState.js",[],"/app/src/methods/generateScripts.js",["553","554"],"const generateScripts = (questionArray = []) => {\n  //loop through the question array and generate\n  let scriptArray = [];\n  for (let i = 0; i < questionArray.length; i++) {\n    const currentQuestion = questionArray[i];\n    const question = currentQuestion.question;\n    const answers = currentQuestion.answers;\n    const explanation = currentQuestion.explanation;\n    const questionNumber = i + 1;\n    const selectedAnswerArray = answers.filter(\n      (answer) => answer.selected == true\n    );\n    let selectedOption = \"You did not select an answer.\";\n    if (selectedAnswerArray.length > 0) {\n      selectedOption = selectedAnswerArray[0].option;\n    }\n    const correctAnswerArray = answers.filter(\n      (answer) => answer.isCorrect == true\n    );\n    let correctOption = correctAnswerArray[0].option;\n\n    let questionObject = {\n      number: questionNumber,\n      selectedOption,\n      correctOption,\n      explanation,\n      question,\n    };\n\n    scriptArray.push(questionObject);\n  }\n  re\n};\n\nexport default generateScripts;\n","/app/src/applicationState/skippedQuestions.js",[],"/app/src/components/displayQuizScriptComponent.js",["555","556","557","558","559","560"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { GetCanidateExamResult } from \"../graphql/queries\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport moment from \"moment\";\nimport Loading from \"../common/loading\";\nimport DisplayScriptComponent from \"../common/displayScriptComponent\";\n\nconst DisplayQuizScriptComponentStyles = styled.div`\n  p {\n    font-size: 18px;\n  }\n  .question {\n    font-size: 16px;\n  }\n  span {\n    padding-left: 50px;\n  }\n  .question-panel {\n    display: flex;\n    font-size: 16px;\n  }\n  .question-divs {\n    padding-left: 20px;\n  }\n  .details {\n    background-color: #0b2f27;\n    color: #fff;\n    padding: 30px;\n  }\n  .text-name {\n    color: #7abbff !important;\n  }\n  .spanDetails {\n    float: right;\n    font-weight: bold;\n    color: #7c23f3;\n  }\n  .score {\n    font-size: 35px;\n    text-align: center;\n  }\n`;\n\nconst convertMinutesToHours = (minutesToConvert) => {\n  const hours = Math.floor(minutesToConvert / 60);\n  const minutes = minutesToConvert - hours * 60;\n  if (hours == 0) {\n    return `${minutes} minutes`;\n  }\n  return `${hours} hours ${minutes} minutes`;\n};\n\nconst DisplayQuizScriptComponent = () => {\n  const match = useRouteMatch(\"/examination_script/:examId\");\n  const [processing, setProcessing] = useState(false);\n  const [errors, setErrors] = useState(null);\n  const [scripts, setScripts] = useState(null);\n  const [nodata, setNoData] = useState(null);\n  const [getScriptFunction, getScriptResult] = useLazyQuery(\n    GetCanidateExamResult,\n    {\n      variables: {\n        examId: match.params.examId,\n      },\n    }\n  );\n\n  useEffect(() => {\n    setProcessing(!processing);\n    getScriptFunction();\n  }, []);\n\n  useEffect(() => {\n    if (getScriptResult.data) {\n      const scriptsData = getScriptResult.data.getExamOfCanidate;\n      if (scriptsData) {\n        setScripts(scriptsData);\n      } else {\n        setNoData(true);\n      }\n      setProcessing(!processing);\n    }\n    if (getScriptResult.error) {\n      const message = getScriptResult.error.message;\n      setProcessing(!processing);\n      setErrors(message);\n    }\n  }, [getScriptResult.loading, getScriptResult.data, getScriptResult.error]);\n\n  const setHtml = (html) => {\n    return { __html: html };\n  };\n\n  return (\n    <DisplayQuizScriptComponentStyles>\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          {errors && <p className=\"text-center lead text-danger\">{errors}</p>}\n\n          {processing && (\n            <div className=\"text-center\">\n              <Loading />\n            </div>\n          )}\n\n          {nodata && (\n            <div className=\"text-center\">\n              <p className=\"lead text-info\">\n                No examination matching that query\n              </p>\n            </div>\n          )}\n\n          {\n            scripts && (\n              <React.Fragment>\n                <DisplayScriptComponent scripts={scripts} />\n              </React.Fragment>\n            )\n            /* end of scripts matter here */\n          }\n        </div>\n      </div>\n    </DisplayQuizScriptComponentStyles>\n  );\n};\n\nexport default DisplayQuizScriptComponent;\n","/app/src/components/authorized.js",[],"/app/src/components/notAuthorizedComponent.js",[],"/app/src/components/viewExamResult.js",["561"],"import React, { useState, useEffect } from \"react\";\nimport SelectExaminationComponent from \"../common/selectExaminationComponent\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { GetExaminationResult } from \"../graphql/queries\";\nimport Loading from \"../common/loading\";\nimport moment from \"moment\";\nimport { useHistory } from \"react-router-dom\";\nimport methods from \"../methods\";\nimport styled from \"styled-components\";\n\nconst ViewExamResultStyles = styled.div`\n  .div-selected {\n    padding: 20px 0;\n    font-size: 20px;\n  }\n  .exam-details {\n    font-size: 20px;\n    margin-bottom: 40px;\n    padding: 20 0px;\n    span {\n      float: right;\n    }\n  }\n`;\n\nconst ViewExamResult = () => {\n  const [examObj, setExamObj] = useState(null);\n  const [examScheduleObj, setExamScheduleObj] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [examResults, setExamResults] = useState([]);\n  const [nodata, setNoData] = useState(null);\n  const [processing, setProcessing] = useState(false);\n\n  const history = useHistory();\n\n  const [resultQuery, resultQueryData] = useLazyQuery(GetExaminationResult, {\n    variables: {\n      examScheduleId: examScheduleObj && examScheduleObj.examScheduleId,\n    },\n  });\n\n  useEffect(() => {\n    if (resultQueryData.called && resultQueryData.loading) {\n      setProcessing(!processing);\n    }\n    if (resultQueryData.error) {\n      setErrors(resultQueryData.error);\n      setProcessing(!processing);\n    }\n\n    if (resultQueryData.data) {\n      const data = resultQueryData.data.getExamResults;\n\n      if (data.length > 0) {\n        setExamResults(data);\n      } else {\n        setNoData(true);\n      }\n      setProcessing(false);\n    }\n  }, [resultQueryData.loading, resultQueryData.data, resultQueryData.error]);\n\n  const handleExamChange = ({ examId, examName }) => {\n    setExamObj({ examId, examName });\n  };\n\n  const handleExamScheduleChange = ({ examScheduleId, examScheduleName }) => {\n    setExamScheduleObj({\n      examScheduleId,\n      examScheduleName,\n    });\n    resultQuery();\n  };\n\n  const showScriptPage = ({\n    id,\n    timeExamStarted,\n    examDetails,\n    canidateDetails,\n    timeExamEnded,\n    score,\n    scripts,\n    questionType,\n  }) => {\n    switch (questionType) {\n      case \"multiple choice questions\":\n        history.push(`/view_canidate_script`, {\n          scripts: {\n            id,\n            timeExamStarted,\n            examDetails,\n            canidateDetails,\n            timeExamEnded,\n            score,\n            scripts,\n          },\n        });\n        break;\n\n      case \"spelling examination\":\n        history.push(`/view_canidate_spelling_script`, {\n          scripts: {\n            id,\n            timeExamStarted,\n            examDetails,\n            canidateDetails,\n            timeExamEnded,\n            score,\n            scripts,\n          },\n        });\n        break;\n        case \"short answer exam\":\n          history.push(`/view_canidate_essay_script`, {\n            scripts: {\n              id,\n              timeExamStarted,\n              examDetails,\n              canidateDetails,\n              timeExamEnded,\n              score,\n              scripts,\n            },\n          });\n          break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <ViewExamResultStyles>\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3\">\n          <h3 className=\"text-center text-primary\">View Examination Result </h3>\n          <SelectExaminationComponent\n            examFunc={handleExamChange}\n            examTypeFunc={handleExamScheduleChange}\n          />\n\n          <div className=\"div-selected\">\n            {examObj && (\n              <p>Examination Type: {examObj.examName.toUpperCase()}</p>\n            )}\n\n            {examScheduleObj && (\n              <p>\n                Examination Schedule :{\" \"}\n                {examScheduleObj.examScheduleName.toUpperCase()}\n              </p>\n            )}\n            <hr />\n          </div>\n          <div className=\"exam-details\">\n            {examResults.length > 0 && (\n              <React.Fragment>\n                <p>\n                  Examination Name :{\" \"}\n                  <span>\n                    {examResults[0].examDetails.examinationName.toUpperCase()}\n                  </span>\n                </p>\n                <p>\n                  Duration :{\" \"}\n                  <span>\n                    {methods.Utils.ConvertMinutesToHours(\n                      examResults[0].examDetails.duration\n                    )}\n                  </span>\n                </p>\n                <p>\n                  Number of Questions :{\" \"}\n                  <span>{examResults[0].examDetails.numberOfQuestions}</span>\n                </p>\n              </React.Fragment>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-md-8 offset-md-2\">\n          {processing && (\n            <div className=\"text-center\">\n              <Loading />\n            </div>\n          )}\n\n          {errors && (\n            <div className=\"text-center\">\n              <p className=\"text-center lead text-danger\">{errors.message}</p>\n            </div>\n          )}\n\n          {nodata && (\n            <p className=\"text-center lead\">\n              no result for the selected examination\n            </p>\n          )}\n\n          {examResults.length > 0 && (\n            <div className=\"table-responsive\">\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">S/N</th>\n                    <th scope=\"col\">Canidate Details</th>\n                    <th scope=\"col\">Score</th>\n                    <th scope=\"col\">Time Spent</th>\n                    <th scope=\"col\">Action</th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                  {examResults.map(\n                    (\n                      {\n                        id,\n                        timeExamStarted,\n                        examDetails,\n                        canidateDetails: { username, name },\n                        timeExamEnded,\n                        score,\n                        scripts,\n                        questionType,\n                      },\n                      index\n                    ) => {\n                      return (\n                        <tr key={id}>\n                          <td>\n                            <p>{index + 1}</p>\n                          </td>\n                          <td>\n                            <p>Name: {name.toUpperCase()}</p>\n                            <p>Username: {username}</p>\n                          </td>\n\n                          <td>\n                            <p>Score: {score}</p>\n                          </td>\n\n                          <td>\n                            <p>\n                              Time started :\n                              {moment(timeExamStarted).format(\n                                \"dddd, MMMM Do YYYY, h:mm:ss a\"\n                              )}\n                            </p>\n\n                            <p>\n                              Time ended :\n                              {moment(timeExamEnded).format(\n                                \"dddd, MMMM Do YYYY, h:mm:ss a\"\n                              )}\n                            </p>\n                          </td>\n\n                          <td>\n                            <p>\n                              <button\n                                className=\"btn btn-sm btn-danger\"\n                                onClick={() =>\n                                  showScriptPage({\n                                    id,\n                                    timeExamStarted,\n                                    examDetails,\n                                    canidateDetails: {\n                                      username,\n                                      name,\n                                    },\n                                    timeExamEnded,\n                                    score,\n                                    scripts,\n                                    questionType,\n                                  })\n                                }\n                              >\n                                view script\n                              </button>\n                            </p>\n                          </td>\n                        </tr>\n                      );\n                    }\n                  )}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </div>\n      </div>\n    </ViewExamResultStyles>\n  );\n};\n\nexport default ViewExamResult;\n","/app/src/common/selectExaminationComponent.js",["562","563","564"],"import React, { useState, useEffect } from \"react\";\nimport { useQuery, useLazyQuery } from \"@apollo/client\";\nimport { GetAllExamination, GetExamScheduleByType } from \"../graphql/queries\";\n\nimport styled from \"styled-components\";\n\nimport Loading from \"../common/loading\";\n\nconst SelectExaminationStyles = styled.div``;\n\nconst SelectExaminationComponent = ({ examFunc, examTypeFunc }) => {\n  const [selectedExamId, setSelectedExamId] = useState(\"\");\n\n  const [errors, setErrors] = useState(null);\n  const [examType, setExamType] = useState([]);\n\n  const [scheduleExams, setScheduleExams] = useState([]);\n  const [processing, setProcessing] = useState(false);\n  const { loading, error, data } = useQuery(GetAllExamination);\n  const [scheduleExamQuery, scheduleExamResult] = useLazyQuery(\n    GetExamScheduleByType,\n    {\n      variables: {\n        examTypeId: selectedExamId,\n      },\n    }\n  );\n\n  //get exam schedule by type\n  useEffect(() => {\n    if (scheduleExamResult.error) {\n      setProcessing(!processing);\n      setErrors(scheduleExamResult.error.message);\n    }\n\n    if (scheduleExamResult.called && scheduleExamResult.loading) {\n      setProcessing(!processing);\n    }\n\n    if (scheduleExamResult.data) {\n      setProcessing(!processing);\n      setScheduleExams(scheduleExamResult.data.getExamScheduleByType);\n    }\n  }, [\n    scheduleExamResult.error,\n    scheduleExamResult.loading,\n    scheduleExamResult.data,\n    scheduleExamResult.called,\n  ]);\n\n  //load exam type schedule\n  useEffect(() => {\n    if (error) {\n      setErrors(error.message);\n    }\n    if (data) {\n      setExamType(data.getAllExam);\n    }\n  }, [loading, error, data]);\n\n  const handleExamChange = async (e) => {\n    const value = e.target.value;\n    if (value == \"0\") return;\n    const splitValue = value.split(\"/\");\n    setSelectedExamId(splitValue[0]);\n    examFunc({ examId: splitValue[0], examName: splitValue[1] });\n\n    scheduleExamQuery();\n  };\n\n  const handleScheduleExamChange = (e) => {\n    const value = e.target.value;\n    if (value == \"0\") return;\n    const splitValue = value.split(\"/\");\n\n    examTypeFunc({\n      examScheduleId: splitValue[0],\n      examScheduleName: splitValue[1],\n    });\n  };\n\n  return (\n    <SelectExaminationStyles>\n      <div className=\"text-center\">{loading && <Loading />}</div>\n      <div className=\"text-center\">\n        {errors && <p className=\"lead text-danger\">{errors.message}</p>}\n      </div>\n      <div className=\"form-group\">\n        <select className=\"custom-select\" onChange={handleExamChange}>\n          <option value=\"0\">select examination type</option>\n          {loading && <option>loading data.......</option>}\n          {examType &&\n            examType.length > 0 &&\n            examType.map(({ id, examName }) => {\n              return (\n                <option value={`${id}/${examName}`} key={id}>\n                  {examName}\n                </option>\n              );\n            })}\n        </select>\n      </div>\n\n      <select className=\"form-control\" onChange={handleScheduleExamChange}>\n        <option value=\"0\">select examination </option>\n        {processing && <option value=\"0\">loading data....</option>}\n        {scheduleExams &&\n          scheduleExams.length > 0 &&\n          scheduleExams.map(({ id, examinationName }) => {\n            return (\n              <option key={id} value={`${id}/${examinationName}`}>\n                {examinationName}\n              </option>\n            );\n          })}\n      </select>\n    </SelectExaminationStyles>\n  );\n};\n\nexport default SelectExaminationComponent;\n","/app/src/components/viewCanidateExaminationScripts.js",[],"/app/src/common/displayScriptComponent.js",["565"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\n\nconst DisplayQuizScriptComponentStyles = styled.div`\n  p {\n    font-size: 18px;\n  }\n  .question {\n    font-size: 16px;\n  }\n  span {\n    padding-left: 50px;\n  }\n  .question-panel {\n    display: flex;\n    font-size: 16px;\n  }\n  .question-divs {\n    padding-left: 20px;\n  }\n  .details {\n    background-color: #0b2f27;\n    color: #fff;\n    padding: 30px;\n  }\n  .text-name {\n    color: #7abbff !important;\n  }\n  .spanDetails {\n    float: right;\n    font-weight: bold;\n    color: #7c23f3;\n  }\n  .score {\n    font-size: 35px;\n    text-align: center;\n  }\n`;\n\nconst setHtml = (html) => {\n  return { __html: html };\n};\n\nconst DisplayScriptComponent = ({ scripts }) => {\n  return (\n    <DisplayQuizScriptComponentStyles>\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          {\n            scripts && (\n              <React.Fragment>\n                <div className=\"details\">\n                  <h2 className=\"text-center text-name\">\n                    <b>{scripts.examDetails.examinationName.toUpperCase()}</b>\n                  </h2>\n\n                  <p>\n                    Time started :\n                    <span className=\"spanDetails\">\n                      {moment(scripts.timeExamStarted).format(\n                        \"dddd, MMMM Do YYYY, h:mm:ss a\"\n                      )}\n                    </span>\n                  </p>\n                  <p>\n                    Time ended :\n                    <span className=\"spanDetails\">\n                      {moment(scripts.timeExamEnded).format(\n                        \"dddd, MMMM Do YYYY, h:mm:ss a\"\n                      )}\n                    </span>\n                  </p>\n                  <p>\n                    Exam Duration :{\" \"}\n                    <span className=\"spanDetails\">\n                      {scripts.examDetails.duration}\n                    </span>\n                  </p>\n\n                  <p>\n                    Time Taken :\n                    <span className=\"spanDetails\">\n                      {moment(scripts.timeExamEnded).diff(\n                        moment(scripts.timeExamStarted),\n                        \"minutes\"\n                      )}\n                    </span>\n                  </p>\n                </div>\n                <p className=\"score\">\n                  Score :\n                  <span>\n                    {scripts.score} /{scripts.examDetails.numberOfQuestions}\n                  </span>\n                </p>\n                <hr />\n                {scripts.scripts.map(\n                  (\n                    {\n                      number,\n                      selectedOption,\n                      correctOption,\n                      explanation,\n                      question,\n                    },\n                    index\n                  ) => {\n                    let gotTheAnswer;\n\n                    if (selectedOption) {\n                      if (selectedOption == correctOption) {\n                        gotTheAnswer = true;\n                      }\n                    }\n                    return (\n                      <div key={index}>\n                        <div className=\"question-panel\">\n                          <div>{number}).</div>\n                          <div\n                            className=\"question-divs\"\n                            dangerouslySetInnerHTML={setHtml(question)}\n                          />\n                        </div>\n\n                        {gotTheAnswer ? (\n                          <p>\n                            <span className=\"text-success\">\n                              {correctOption}\n                              <span style={{ fontSize: 30 + \"px\" }}>\n                                &#10004;\n                              </span>\n                            </span>\n                            <br />\n                            <span>{explanation}</span>\n                          </p>\n                        ) : (\n                          <p>\n                            {selectedOption ? (\n                              <React.Fragment>\n                                <span className=\"text-danger\">\n                                  selected answer : {selectedOption}\n                                  <span style={{ fontSize: 30 + \"px\" }}>\n                                    &#10006;\n                                  </span>\n                                </span>\n                                <br />\n                                <span className=\"text-success\">\n                                  correct answer : {correctOption}\n                                </span>\n                                <br />\n                                <span>{explanation}</span>\n                              </React.Fragment>\n                            ) : (\n                              <React.Fragment>\n                                <span>\n                                  you did not select any option{\" \"}\n                                  <span\n                                    className=\"text-danger\"\n                                    style={{ fontSize: 20 + \"px\" }}\n                                  >\n                                    &#10006;\n                                  </span>\n                                </span>\n                                <br />\n                                <span className=\"text-success\">\n                                  correct answer : {correctOption}\n                                </span>\n                                <br />\n                                <span>{explanation}</span>\n                              </React.Fragment>\n                            )}\n                          </p>\n                        )}\n\n                        <hr />\n                      </div>\n                    );\n                  }\n                )}\n              </React.Fragment>\n            )\n            /* end of scripts matter here */\n          }\n        </div>\n      </div>\n    </DisplayQuizScriptComponentStyles>\n  );\n};\n\nexport default DisplayScriptComponent;\n","/app/src/components/createSubjectCourse.js",["566"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useMutation } from \"@apollo/client\";\nimport { CreateCourseSubject } from \"../graphql/mutation\";\n\nconst CreateSubjectCourseStyles = styled.div`\n  .div-form {\n    margin-top: 50px;\n  }\n  .div-exam {\n    p {\n      padding: 10px;\n\n      background: #c0c0c0;\n    }\n  }\n`;\n\nconst CreateSubjectCourse = () => {\n  const [text, setText] = useState(\"\");\n  const [errors, setErrors] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [loadingData, setLoading] = useState(false);\n  const [selectedExamType, setSelectedExamType] = useState(null);\n  const [createExamFunc, createExamResult] = useMutation(CreateCourseSubject);\n\n  useEffect(() => {\n    if (createExamResult.data) {\n      setProcessing(!processing);\n    }\n    if (createExamResult.error) {\n      setProcessing(!processing);\n      setErrors(createExamResult.error);\n    }\n  }, [createExamResult.data, createExamResult.error]);\n\n  const handleTextChange = (e) => {\n    const value = e.target.value;\n    setText(value);\n  };\n\n  const handleFormSubmit = async (e) => {\n    e.preventDefault();\n    const confirmSave = window.confirm(`Confirm the following information: \\n\n                                        Course/Subject : ${text} \\n Examination Type : ${selectedExamType}`);\n    if (!confirmSave) return;\n    setProcessing(!processing);\n    setLoading(!loadingData);\n    //save the stuff here\n    if (selectedExamType) {\n      try {\n        await createExamFunc({\n          variables: {\n            examName: text,\n            examType: selectedExamType,\n          },\n        });\n        setText(\"\");\n        setSelectedExamType(null);\n      } catch (error) {}\n    }\n  };\n\n  const handleExamTypeChange = (e) => {\n    const value = e.target.value;\n    if (value !== \"0\") {\n      setSelectedExamType(value);\n    }\n  };\n\n  return (\n    <CreateSubjectCourseStyles>\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3\">\n          <h3 className=\"text-center text-primary\">\n            Create New Course/Subject\n          </h3>\n          <div className=\"div-form\">\n            {errors && (\n              <p className=\"text-center lead text-danger\">{errors.message}</p>\n            )}\n\n            <form onSubmit={handleFormSubmit}>\n              <div className=\"form-group\">\n                <select\n                  className=\"custom-select\"\n                  onChange={handleExamTypeChange}\n                >\n                  <option value=\"0\">select examination type</option>\n                  <option value=\"multiple choice questions\">\n                    Multiple choice questions\n                  </option>\n                  <option value=\"spelling examination\">\n                    Spelling examination{\" \"}\n                  </option>\n                  <option value=\"short answer exam\">Short answer type</option>\n                  <option value=\"essay exam\">Essay examination</option>\n                  <option value=\"quantitative exam\">\n                    Quantitative examination\n                  </option>\n                </select>\n              </div>\n              <div className=\"form-group\">\n                <label className=\"form-label\">Course/Subject Name: </label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  value={text}\n                  onChange={handleTextChange}\n                />\n              </div>\n\n              {selectedExamType && (\n                <p>Selected examination type : {selectedExamType}</p>\n              )}\n\n              <div className=\"text-center\">\n                <button\n                  type=\"submit\"\n                  disabled={processing}\n                  className=\"btn btn-success\"\n                >\n                  {processing ? \"please wait.....\" : \"create subject/course\"}\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </CreateSubjectCourseStyles>\n  );\n};\n\nexport default CreateSubjectCourse;\n","/app/src/components/activateScheduleExaminationPanel.js",["567","568","569"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GetAllScheduleExamination } from \"../graphql/queries\";\nimport { UpdateExaminationSchedule } from \"../graphql/mutation\";\nimport Loading from \"../common/loading\";\nimport methods from \"../methods\";\n\nconst ActivateStyles = styled.div``;\n\nconst ActivateScheduleExaminationPanel = ({ history }) => {\n  const [scheduleExams, setScheduleExams] = useState([]);\n  const [processing, setProcessing] = useState(false);\n  const [errors, setErrors] = useState(null);\n  const { loading, data, error } = useQuery(GetAllScheduleExamination);\n  const [nodata, setNoData] = useState(null);\n\n  //make schedule active or inactive\n  const [changeStatusFunc, changeStatusResult] = useMutation(\n    UpdateExaminationSchedule\n  );\n\n  useEffect(() => {\n    if (changeStatusResult.data) {\n      const result = changeStatusResult.data.changeExamStatus.__typename;\n      if (result == \"Error\") {\n        setErrors(changeStatusResult.data.changeExamStatus.message);\n      }\n      setProcessing(!processing);\n    }\n\n    if (changeStatusResult.error) {\n      setErrors(changeStatusResult.error);\n      setProcessing(!processing);\n    }\n  }, [changeStatusResult.data, changeStatusResult.error]);\n\n  useEffect(() => {\n    if (data) {\n      const scheduleData = data.getAllExamSchedule;\n      if (scheduleData.length > 0) {\n        setScheduleExams(scheduleData);\n      } else {\n        setNoData(true);\n      }\n    }\n\n    if (error) {\n      setErrors(error);\n    }\n  }, [loading, data, error]);\n\n  const handleActiveExaminationChangeState = async ({ id, status }) => {\n    try {\n      setProcessing(!processing);\n      await changeStatusFunc({\n        variables: {\n          examId: id,\n          status: !status,\n        },\n        refetchQueries: [\n          {\n            query: GetAllScheduleExamination,\n          },\n        ],\n      });\n    } catch (error) {}\n  };\n  return (\n    <ActivateStyles>\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <h3 className=\"text-center text-primary\">\n            Activate Examination Panel\n          </h3>\n          {loading && (\n            <div className=\"text-center\">\n              <Loading />\n            </div>\n          )}\n\n          {errors && (\n            <p className=\"text-center lead text-danger\">{errors.message}</p>\n          )}\n\n          {nodata && <p className=\"lead text-center\">No data avaliable..</p>}\n\n          {scheduleExams.length > 0 && (\n            <div className=\"table-responsive\">\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">S/N</th>\n                    <th scope=\"col\">Exam Schedule</th>\n                    <th scope=\"col\">Course Type</th>\n                    <th scope=\"col\">Exam Type</th>\n                    <th scope=\"col\">Details</th>\n                    <th scope=\"col\">Status</th>\n                    <th scope=\"col\">Action</th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                  {scheduleExams.map(\n                    (\n                      {\n                        id,\n                        active,\n                        numberofQuestions,\n                        examinationName,\n                        examinationDuration,\n                        questions,\n                        examTypeName,\n                        questionType\n                      },\n                      index\n                    ) => {\n                      return (\n                        <tr key={id}>\n                          <td>\n                            <p>{index + 1}</p>\n                          </td>\n                          <td>\n                            <p>{examinationName.toUpperCase()}</p>\n                          </td>\n                          <td>\n                            <p>{examTypeName.toUpperCase()}</p>\n                          </td>\n                          <td>\n                            <p>{questionType.toUpperCase()}</p>\n                          </td>\n                          <td>\n                            <p>Questions saved : {questions.length}</p>\n                            <p>\n                              Duration :{\" \"}\n                              {methods.Utils.ConvertMinutesToHours(\n                                examinationDuration\n                              )}\n                            </p>\n                            <p>Number of Questions: {numberofQuestions}</p>\n                          </td>\n                          <td>\n                            {active ? (\n                              <p className=\"text-success\">Active</p>\n                            ) : (\n                              <p className=\"text-danger\">Not Active</p>\n                            )}\n                          </td>\n                          <td>\n                            {active ? (\n                              <button\n                                disabled={processing}\n                                className=\"btn btn-success btn-sm\"\n                                onClick={() =>\n                                  handleActiveExaminationChangeState({\n                                    id,\n                                    status: active,\n                                  })\n                                }\n                              >\n                                {!processing\n                                  ? \"make inactive\"\n                                  : \"please wait....\"}\n                              </button>\n                            ) : numberofQuestions == questions.length ? (\n                              /* we can activate the exam here else go add questions*/\n                              <button\n                                disabled={processing}\n                                className=\"btn btn-danger btn-sm\"\n                                onClick={() =>\n                                  handleActiveExaminationChangeState({\n                                    id,\n                                    status: active,\n                                  })\n                                }\n                              >\n                                {!processing\n                                  ? \"make active\"\n                                  : \"please wait....\"}\n                              </button>\n                            ) : (\n                              <button\n                                className=\"btn btn-info btn-sm\"\n                                onClick={() =>\n                                  history.push(\"/add_questions_examination\")\n                                }\n                              >\n                                complete exam questions\n                              </button>\n                            )}\n                          </td>\n                        </tr>\n                      );\n                    }\n                  )}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </div>\n      </div>\n    </ActivateStyles>\n  );\n};\n\nexport default ActivateScheduleExaminationPanel;\n","/app/src/components/createUserAccount.js",["570","571","572","573","574","575"],"import React, { useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { CreateNewUserAccount } from \"../graphql/mutation\";\nimport styled from \"styled-components\";\n\nconst CreateUserAccountStyles = styled.div``;\n\nconst CreateUserAccount = () => {\n  const [username, setUsername] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [active, setActive] = useState(false);\n  const [userType, setUserType] = useState(\"0\");\n  const [processing, setProcessing] = useState(false);\n  const [errors, setErrors] = useState(null);\n\n  const [createUserFunction, createUserResult] = useMutation(\n    CreateNewUserAccount\n  );\n\n  useEffect(() => {\n    if (createUserResult.data) {\n      if (createUserResult.data.createUser.__typename == \"User\") {\n        const { name, username, userType } = createUserResult.data.createUser;\n        \n        setUsername(\"\");\n        setName(\"\");\n        setPassword(\"\");\n        setActive(false);\n        setUserType(\"0\");\n        setErrors(null);\n        window.alert(\n          `The account with the details created successfully: \\n Name: ${name} \\n Username: ${username} \\n Account Type: ${userType}`\n        );\n      } else {\n        const errorObject = createUserResult.data.createUser;\n        setErrors(errorObject);\n      }\n      setProcessing(false);\n    }\n\n    if (createUserResult.error) {\n      setProcessing(!processing);\n      setErrors(createUserResult.error);\n    }\n  }, [createUserResult.data, createUserResult.error]);\n\n  const handleInputChange = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    switch (name) {\n      case \"userType\":\n        if (value == \"0\") return;\n        setUserType(value);\n        break;\n      case \"name\":\n        setName(value);\n      case \"password\":\n        setPassword(value);\n        break;\n      case \"username\":\n        setUsername(value);\n        break;\n    }\n  };\n  const handleUserTypeChange = (e) => {\n    const isChecked = e.target.checked;\n    if (isChecked) {\n      setActive(true);\n    } else {\n      setActive(false);\n    }\n  };\n  const submitUserFormDetails = async (e) => {\n    e.preventDefault();\n    if (!name) {\n      return window.alert(\"The full name of the user is required\");\n    }\n    if (!username) {\n      return window.alert(\"A username for login password is required\");\n    }\n    if (!password) {\n      return window.alert(\n        \"Password is a required field. You cannot login without a passord.\"\n      );\n    }\n\n    if (userType == \"0\") {\n      return window.alert(\"Please select the user account type\");\n    }\n\n    const userDetails = {\n      username,\n      name,\n      password,\n      userType,\n      active,\n    };\n    //submit details here\n    //confirm submission here\n    const confirmDetails = window.confirm(\n      `Please confirm the following details: \\n\\n Username: ${username} \\n\\n Name: ${name} \\n\\n Password: ${password} \\n\\n Account Type: ${userType} \\n\\n Account Active: ${active}`\n    );\n    if (!confirmDetails) return;\n    try {\n      setProcessing(!processing);\n      await createUserFunction({\n        variables: { ...userDetails },\n      });\n    } catch (error) {}\n  };\n  return (\n    <CreateUserAccountStyles>\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3\">\n          <h3 className=\"text-center text-primary\">Create New User Account</h3>\n          {errors && <p className=\"lead text-danger\">{errors.message}</p>}\n          <form onSubmit={submitUserFormDetails}>\n            <div className=\"mb-3\">\n              <label htmlFor=\"name\" className=\"form-label\">\n                Name\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"name\"\n                name=\"name\"\n                aria-describedby=\"usernameHelp\"\n                onChange={handleInputChange}\n                value={name}\n              />\n              <div id=\"usernameHelp\" className=\"form-text\">\n                full name of the user.\n              </div>\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"username\" className=\"form-label\">\n                Username\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"username\"\n                name=\"username\"\n                aria-describedby=\"usernameHelp\"\n                onChange={handleInputChange}\n                value={username}\n              />\n              <div id=\"usernameHelp\" className=\"form-text\">\n                username for login.\n              </div>\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"password\" className=\"form-label\">\n                Password\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"password\"\n                name=\"password\"\n                onChange={handleInputChange}\n                value={password}\n              />\n            </div>\n            <div className=\"mb-3 form-check\">\n              <input\n                type=\"checkbox\"\n                className=\"form-check-input\"\n                id=\"activeCheck\"\n                value={active}\n                onChange={handleUserTypeChange}\n              />\n              <label className=\"form-check-label\" htmlFor=\"activeCheck\">\n                User Active\n              </label>\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"userType\" className=\"form-label\">\n                Account Type\n              </label>\n              <select\n                className=\"form-control\"\n                name=\"userType\"\n                onChange={handleInputChange}\n                value={userType}\n              >\n                <option value=\"0\">select account type</option>\n                <option value=\"student\">student</option>\n                <option value=\"admin\">admin</option>\n              </select>\n            </div>\n            <div className=\"mb-3 text-center\">\n              <button\n                type=\"submit\"\n                disabled={processing}\n                className=\"btn btn-primary btn-lg\"\n              >\n                {!processing\n                  ? \"Create User Account\"\n                  : \"Creating account. Please wait......\"}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </CreateUserAccountStyles>\n  );\n};\n\nexport default CreateUserAccount;\n","/app/src/components/usersPanel.js",["576","577"],"import React, { useState, useEffect } from \"react\";\nimport { GetUsersByStatus } from \"../graphql/queries\";\nimport { ChangeActiveStatusOfUsers } from \"../graphql/mutation\";\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\nimport UserPanelTable from \"../common/usersTablePanel\";\nimport Loading from \"../common/loading\";\n\n\nimport styled from \"styled-components\";\n\nconst UsersPanelStyles = styled.div``;\n\nconst buttonsToDisplay = (total, numberPerPage) => {\n  const buttonNumber = +total / +numberPerPage;\n  let array = [];\n  array.length = Math.ceil(buttonNumber);\n  return array.fill(1);\n};\n\nconst UsersPanel = ({currentUser}) => {\n  const [status, setStatus] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [usersArray, setUsers] = useState([]);\n  const [totalUsers, setTotalUsers] = useState(0);\n  const [processingData, setProcessingData] = useState(false);\n  const [errors, setErrors] = useState(null);\n  const [usersQuery, usersQueryResult] = useLazyQuery(GetUsersByStatus, {\n    variables: {\n      status: status,\n      offset: 0,\n    },\n  });\n\n  const [statusFunction, statusFunctionResult] = useMutation(\n    ChangeActiveStatusOfUsers\n  );\n\n  useEffect(() => {\n    if (statusFunctionResult.data) {\n      setProcessingData(false);\n      setProcessing(false);\n      window.alert(\"successfull\");\n    }\n    if (statusFunctionResult.error) {\n      setErrors(statusFunctionResult.error);\n      setProcessing(false);\n      setProcessingData(!processingData);\n    }\n  }, [statusFunctionResult.data, statusFunctionResult.error]);\n\n  useEffect(() => {\n    if (usersQueryResult.data) {\n      const usersData = usersQueryResult.data.usersByStatus.users;\n      const totalData = usersQueryResult.data.usersByStatus.totalUsersByStatus;\n      setUsers(usersData);\n      setTotalUsers(totalData);\n      setProcessing(false);\n    }\n    if (usersQueryResult.error) {\n      setErrors(usersQueryResult.error);\n      setProcessing(false);\n    }\n  }, [usersQueryResult.data, usersQueryResult.error]);\n\n  const getMoreUsers = (e, index) => {\n    try {\n      e.stopPropagation();\n      e.preventDefault();\n      setProcessing(true);\n\n      usersQueryResult.fetchMore({\n        variables: {\n          status: status,\n          offset: usersArray.length * (index - 1),\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult) return prev;\n          return Object.assign({}, prev, {\n            usersByStatus: {\n              totalUsersByStatus:\n                fetchMoreResult.usersByStatus.totalUsersByStatus,\n              __typename: \"UserQueryResult\",\n              users: [\n                //...prev.getAllQuestions.questions,\n                ...fetchMoreResult.usersByStatus.users,\n              ],\n            },\n          });\n        },\n      });\n    } catch (error) {}\n  };\n\n  const handleStatusChange = (e) => {\n    const value = e.target.value;\n    if (value === \"0\") return;\n    if (value === \"active\") {\n      setStatus(true);\n    } else if (value === \"inactive\") {\n      setStatus(false);\n    }\n    //call the query here\n    usersQuery();\n    setProcessing(!processing);\n  };\n\n  const activateDeactivateAccount = async ({ id, active }) => {\n    try {\n      setProcessingData(!processingData);\n      await statusFunction({\n        variables: {\n          id,\n          active,\n        },\n        refetchQueries: [\n          {\n            query: GetUsersByStatus,\n            variables: {\n              status: active,\n              offset: 0,\n            },\n          },\n        ],\n      });\n    } catch (error) {}\n  };\n\n  return (\n    <UsersPanelStyles>\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3 mb-3\">\n          <h3 className=\"text-center text-primary\">Users Account</h3>\n          {errors && (\n            <p className=\"lead text-danger text-center\"> {errors.message}</p>\n          )}\n\n          <select className=\"form-control\" onChange={handleStatusChange}>\n            <option value=\"0\">select user account state</option>\n            <option value=\"active\">active</option>\n            <option value=\"inactive\">in active</option>\n          </select>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-md-8 offset-md-2\">\n          {processing && (\n            <div className=\"text-center\">\n              <Loading />\n            </div>\n          )}\n          {usersArray.length > 0 && (\n            <UserPanelTable\n              users={usersArray}\n              changeStatusFunc={activateDeactivateAccount}\n              processing={processingData}\n              currentUser={currentUser}\n            />\n          )}\n\n          <nav aria-label=\"Page navigation example\">\n            <ul className=\"pagination\">\n              {totalUsers > 50 &&\n                buttonsToDisplay(totalUsers, 50).map((_, index) => {\n                  return (\n                    <li\n                      className=\"page-item\"\n                      key={index}\n                      onClick={(e) => getMoreUsers(e, index + 1)}\n                    >\n                      <a className=\"page-link\" href=\"\">\n                        {index + 1}\n                      </a>\n                    </li>\n                  );\n                })}\n            </ul>\n          </nav>\n        </div>\n      </div>\n    </UsersPanelStyles>\n  );\n};\n\nexport default UsersPanel;\n","/app/src/common/usersTablePanel.js",["578"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport methods from \"../methods\";\nimport Modal from \"react-modal\";\nimport { useMutation } from \"@apollo/client\";\nimport { ChangeUserPasswordMutation } from \"../graphql/mutation\";\n\nModal.setAppElement(\"#root\");\n\nconst customStyles = {\n  content: {\n    width: \"500px\",\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\nconst UsersTablePanelStyles = styled.div``;\n\nconst UsersTablePanel = ({\n  users,\n  changeStatusFunc,\n  processing,\n  currentUser,\n}) => {\n  const [processingData, setProcessing] = useState(false);\n  const [password, setPassword] = useState(\"\");\n  const [errors, setErrors] = useState(null);\n  const [username, setUserName] = useState(null);\n  const [submitting, setSubmitting] = useState(false);\n\n  //mutation here\n  const [changePasswordFunction, changePasswordResult] = useMutation(\n    ChangeUserPasswordMutation\n  );\n\n  useEffect(() => {\n    if (changePasswordResult.data) {\n      window.alert(\"password was changed successfully\");\n      setProcessing(!processingData);\n      setSubmitting(!submitting);\n    }\n\n    if (changePasswordResult.error) {\n      setErrors(changePasswordResult.error);\n      setProcessing(!processingData);\n      setSubmitting(!submitting);\n    }\n  }, [changePasswordResult.data, changePasswordResult.error]);\n\n  const handlePasswordButtonClick = (username) => {\n    if (username) {\n      setUserName(username);\n      setProcessing(!processingData);\n    }\n  };\n\n  const handleStatusChange = ({ id, active }) => {\n    changeStatusFunc({ id, active });\n  };\n\n  const handleTextChange = (e) => {\n    const value = e.target.value;\n    setPassword(value);\n  };\n  const handlePasswordChange = async (e) => {\n    e.preventDefault();\n    setSubmitting(!submitting);\n    try {\n      await changePasswordFunction({\n        variables: {\n          username,\n          newPassword: password,\n        },\n      });\n    } catch (error) {}\n  };\n\n  return (\n    <UsersTablePanelStyles>\n      <div className=\"table-responsive\">\n        <table className=\"table table-success table-striped\">\n          <thead>\n            <tr>\n              <th scope=\"col\">S/N</th>\n              <th scope=\"col\">User Details</th>\n              <th scope=\"col\">Account Type</th>\n              <th scope=\"col\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {users &&\n              users.length > 0 &&\n              users.map(({ username, id, userType, active, name }, index) => {\n                return (\n                  <tr key={id}>\n                    <td>\n                      <p>{index + 1}</p>\n                    </td>\n\n                    <td>\n                      <p>Name: {name.toUpperCase()}</p>\n                      <p>Username: {username.toUpperCase()}</p>\n                    </td>\n\n                    <td>\n                      <p>{userType.toUpperCase()}</p>\n                    </td>\n\n                    <td>\n                      <div\n                        className=\"btn-group\"\n                        role=\"group\"\n                        aria-label=\"Action Group\"\n                      >\n                        {methods.Utils.DisableCurrentUser(\n                          currentUser,\n                          username\n                        ) === true ? null : (\n                          <button\n                            type=\"button\"\n                            disabled={processing}\n                            className={\n                              active ? \"btn btn-danger\" : \"btn btn-success\"\n                            }\n                            onClick={() => handleStatusChange({ id, active })}\n                          >\n                            {active ? \"Deactivate account\" : \"Activate Account\"}\n                          </button>\n                        )}\n                        <button\n                          type=\"button\"\n                          className=\"btn btn-warning\"\n                          onClick={() => handlePasswordButtonClick(username)}\n                        >\n                          change password\n                        </button>\n                      </div>\n                    </td>\n                  </tr>\n                );\n              })}\n          </tbody>\n        </table>\n      </div>\n      <Modal\n        isOpen={processingData}\n        style={customStyles}\n        contentLabel=\"Change password modal\"\n      >\n        {errors && <p className=\"text-danger text-center\">{errors.message}</p>}\n        <form onSubmit={handlePasswordChange}>\n          <div className=\"mb-3\">\n            <label htmlFor=\"password\" className=\"form-label\">\n              password\n            </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"password\"\n              aria-describedby=\"passwordHelp\"\n              value={password}\n              onChange={handleTextChange}\n            />\n            <div id=\"passwordHelp\" className=\"form-text\">\n              Enter a new password.\n            </div>\n          </div>\n\n          <div className=\"text-center\">\n            <div className=\"btn-group\" role=\"group\" aria-label=\"Action Group\">\n              <button\n                onClick={() => setProcessing(!processingData)}\n                className=\"btn btn-warning\"\n              >\n                close\n              </button>\n\n              <button\n                disabled={submitting}\n                type=\"submit\"\n                className=\"btn btn-primary\"\n              >\n                {submitting\n                  ? \"changing password please wait.....\"\n                  : \"Change Password\"}\n              </button>\n            </div>\n          </div>\n        </form>\n      </Modal>\n    </UsersTablePanelStyles>\n  );\n};\n\nexport default UsersTablePanel;\n","/app/src/components/uploadMedia.js",["579","580","581","582","583"],"import React, { useState, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport settings from \"../config\";\nconst axios = require(\"axios\").default;\n\nconst UploadMediaStyles = styled.div`\n  .upload-container {\n    display: flex;\n    border: 1px solid #87cac4;\n    border-radius: 22px 0px;\n    margin-top: 5%;\n  }\n\n  .leftside {\n    width: 20%;\n    background-color: #6aa552;\n    border-radius: 22px 0 0px 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    h3 {\n      writing-mode: vertical-rl;\n      color: #1e29c3;\n    }\n  }\n\n  .rightside {\n    width: 80%;\n    padding: 20px;\n  }\n`;\n\nconst UploadMedia = () => {\n  const [media, setMedia] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [fileType, setFileType] = useState(\"\");\n  const [file, setFile] = useState(null);\n  const [submitted, setSubmitted] = useState(false);\n  const [progressStatus, setProgressStatus] = useState(0);\n\n  const fileRef = useRef();\n\n  const handleChange = (e) => {\n    const value = e.target.value;\n    const name = e.target.name;\n    switch (name) {\n      case \"media\":\n        if (value != \"0\") {\n          setMedia(value);\n        }\n        break;\n      case \"description\":\n        setDescription(value);\n        break;\n      case \"fileType\":\n        if (value != \"0\") {\n          setFileType(value);\n        }\n        break;\n    }\n  };\n\n  const onFileChange = (e) => {\n    const file = e.target.files[0];\n\n    const extention = [\"jpg\", \"jpeg\", \"png\", \"gif\", \"mp4\"];\n    //check for the type of image we are uploading\n    if (media === \"image\") {\n      //check extension\n      const position = file.name.lastIndexOf(\".\");\n      const fileExt = file.name.substr(position + 1, file.name.length);\n      const index = extention.indexOf(fileExt);\n      if (index == -1) {\n        window.alert(`please you can only select an image.`);\n        return;\n      }\n    }\n\n    if (media === \"pdf\") {\n      //check extension\n      const position = file.name.lastIndexOf(\".\");\n      const fileExt = file.name.substr(position + 1, file.name.length);\n      if (fileExt != \"pdf\") {\n        window.alert(`please select only a pdf file`);\n        return;\n      }\n    }\n    //save the file here\n    setFile(file);\n  };\n\n  const handleFormSubmit = async (e) => {\n    e.preventDefault();\n    //check if we have a file stored in state\n    if (!file) {\n      window.alert(\"please select a file to upload\");\n      return;\n    }\n    if (!description) {\n      window.alert(\"file description is required\");\n      return;\n    }\n\n    if (!fileType) {\n      window.alert(\"file type is required.Please select the file type\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"description\", description);\n    formData.append(\"digitalAssets\", file);\n    formData.append(\"assetType\", fileType);\n    setSubmitted(true);\n\n    await axios.request({\n      method: \"post\",\n      url: `${settings.API_URL}/api/uploadFile`,\n      data: formData,\n      onUploadProgress: (ProgressEvent) => {\n        setProgressStatus(\n          parseFloat(\n            (ProgressEvent.loaded / ProgressEvent.total) * 100\n          ).toFixed(2)\n        );\n      },\n    });\n    setProgressStatus(100);\n    setSubmitted(false);\n    setMedia(\"0\");\n    setDescription(\"\");\n    setFileType(\"0\");\n    fileRef.current.value = \"\";\n    setFile(null);\n  };\n  return (\n    <UploadMediaStyles>\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3\">\n          <div className=\"media-div\">\n            <div className=\"upload-container\">\n              <div className=\"leftside\">\n                <h3>Upload Media Files</h3>\n              </div>\n              <div className=\"rightside\">\n                <form onSubmit={handleFormSubmit}>\n                  <div className=\"form-group\">\n                    <label>Media Type</label>\n                    <select\n                      className=\"form-control\"\n                      name=\"media\"\n                      onChange={handleChange}\n                      value={media}\n                    >\n                      <option value=\"0\">select media type</option>\n                      <option value=\"pdf\">documents (pdf)</option>\n                      <option value=\"image\">image</option>\n                    </select>\n                  </div>\n\n                  <div className=\"form-group\">\n                    <label>Media Type</label>\n                    <select\n                      className=\"form-control\"\n                      name=\"fileType\"\n                      onChange={handleChange}\n                      value={fileType}\n                    >\n                      <option value=\"0\">select file type</option>\n                      <option value=\"course materials\">course materials</option>\n                      <option value=\"past questions\">past questions</option>\n                    </select>\n                  </div>\n\n                  <div className=\"form-group\">\n                    <label>Description</label>\n                    <textarea\n                      name=\"description\"\n                      className=\"form-control\"\n                      aria-label=\"With textarea\"\n                      value={description}\n                      onChange={handleChange}\n                    ></textarea>\n                  </div>\n\n                  <div className=\"form-group\">\n                    <label className=\"form-control\">Select file</label>\n                    <input\n                      type=\"file\"\n                      className=\"file\"\n                      onChange={onFileChange}\n                      id=\"fileInput\"\n                      ref={fileRef}\n                    />\n                  </div>\n\n                  {submitted && (\n                    <div className=\"progress mb-3\">\n                      <div\n                        className=\"progress-bar\"\n                        role=\"progressbar\"\n                        style={{ width: progressStatus + \"%\" }}\n                        aria-valuenow={progressStatus}\n                        aria-valuemin=\"0\"\n                        aria-valuemax=\"100\"\n                      ></div>\n                    </div>\n                  )}\n\n                  <div className=\"text-center\">\n                    <button\n                      type=\"submit\"\n                      disabled={submitted}\n                      className=\"btn btn-success\"\n                    >\n                      submit\n                    </button>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </UploadMediaStyles>\n  );\n};\n\nexport default UploadMedia;\n","/app/src/config.js",[],"/app/src/globalStyles.js",[],"/app/src/components/saveSpellingQuestions.js",["584","585","586","587","588","589","590","591"],"import React, { useEffect, useState } from \"react\";\nimport { GetDifferentExamination } from \"../graphql/queries\";\nimport { SaveSpelling, EditSpelling } from \"../graphql/mutation\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst SpellingQuestionStyles = styled.div`\n  .btn-wl {\n    cursor: pointer;\n  }\n\n  .input-row {\n    margin: 10px 0px;\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .input-spelling {\n    margin: 10px;\n    text-align: center;\n    font-size: 40px;\n    width: 80px;\n    height: 80px;\n  }\n  .guide-div {\n    margin: 20px 0 0 0px;\n  }\n`;\n\nconst createInputBox = (number) => {\n  let inputArray = [];\n  for (let i = 0; i < number; i++) {\n    let obj = {\n      value: \"\",\n      index: i,\n    };\n    inputArray.push(obj);\n  }\n  return inputArray;\n};\n\nconst createInputBoxWithWord = (word) => {\n  let inputArray = [];\n  for (let i = 0; i < word.length; i++) {\n    let obj = {\n      value: word[i],\n      index: i,\n    };\n    inputArray.push(obj);\n  }\n  return inputArray;\n};\n\nconst SaveSpellingQuestion = () => {\n  const [inputArray, setArrayInput] = useState([]);\n  const [wordLength, setWordLength] = useState(\"\");\n  const [inputLength, setInputLength] = useState(0);\n  const [correctSpelling, setCorrectSpelling] = useState(\"\");\n  const [spellingClue, setSpellingClue] = useState(\"\");\n  const [selectedExamType, setExamType] = useState(\"\");\n  const [examTypeData, setExamDataType] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [examId, setExamId] = useState(null);\n  const [examName, setExamName] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [submitted, setSubmitted] = useState(false);\n  const [editId, setEditId] = useState(null);\n\n  const [examTypeQuery, examTypeResult] = useLazyQuery(GetDifferentExamination);\n  const [saveSpellingMutation, saveSpellingResult] = useMutation(SaveSpelling);\n\n  const [editSpellingMutation, editSpellingResult] = useMutation(EditSpelling);\n  const location = useLocation();\n\n  //check if we are having an edit\n  const history = useHistory();\n  const question = location.state && location.state.question;\n  const wordLengthFunction = () => {\n    setInputLength(wordLength);\n    let arr = createInputBox(wordLength);\n    setArrayInput(arr);\n  };\n\n  useEffect(() => {\n    //we are running an update we need to load stuffs here\n    //updating a question here\n    if (question) {\n      const { word, clue, correctWord, id, examinationType, examId } = question;\n      setInputLength(word.length);\n      setWordLength(word.length);\n      let arr = createInputBoxWithWord(word);\n      setArrayInput(arr);\n      setExamName(examinationType);\n      setExamId(examId);\n      setCorrectSpelling(correctWord);\n      setSpellingClue(clue);\n      setEditId(id);\n    }\n  }, []);\n\n  useEffect(() => {\n    examTypeQuery({\n      variables: {\n        examType: \"spelling examination\",\n      },\n    });\n  }, []);\n\n  useEffect(() => {\n    if (saveSpellingResult.data) {\n      setSubmitted(false);\n      setArrayInput([]);\n      setWordLength(\"\");\n      setCorrectSpelling(\"\");\n      setSpellingClue(\"\");\n      alert(\"spelling question saved successful\");\n    }\n\n    if (saveSpellingResult.error) {\n      setSubmitted(false);\n      setErrors(saveSpellingResult.error);\n    }\n  }, [saveSpellingResult.data, saveSpellingResult.error]);\n\n  //edit question mutation\n  useEffect(() => {\n    if (editSpellingResult.data) {\n      setSubmitted(false);\n      setArrayInput([]);\n      setWordLength(\"\");\n      setCorrectSpelling(\"\");\n      setSpellingClue(\"\");\n      alert(\"edit was successful\");\n      history.push(\"/load_spelling_question\");\n    }\n\n    if (editSpellingResult.error) {\n      setSubmitted(false);\n      setErrors(saveSpellingResult.error);\n    }\n  }, [editSpellingResult.data, editSpellingResult.error]);\n\n  useEffect(() => {\n    if (examTypeResult.loading) {\n      setLoading(true);\n    }\n    if (examTypeResult.data) {\n      const data = examTypeResult.data.getExamByType;\n      setExamDataType(data);\n      setLoading(false);\n    }\n    if (examTypeResult.error) {\n      setLoading(false);\n      setErrors(examTypeResult.error);\n    }\n  }, [examTypeResult.data, examTypeResult.error, examTypeResult.loading]);\n\n  const handleWordLengthChange = (e) => {\n    const value = e.target.value;\n    if (typeof +value == \"number\") {\n      setWordLength(+value);\n    }\n  };\n\n  const handleTextInputChange = (e, index) => {\n    const value = e.target.value;\n    if (value.length <= 1) {\n      let arrayOfInputs = [...inputArray];\n      const newValue = {\n        value: value.toUpperCase(),\n        index,\n      };\n      arrayOfInputs[index] = newValue;\n      setArrayInput(arrayOfInputs);\n    }\n  };\n\n  const handleSpelling = (e) => {\n    const value = e.target.value;\n    const name = e.target.name;\n    switch (name) {\n      case \"correctSpelling\":\n        if (value.length <= wordLength) {\n          setCorrectSpelling(value);\n        }\n        break;\n\n      case \"spellingClue\":\n        setSpellingClue(value);\n        break;\n    }\n  };\n\n  const handleExamChange = (e) => {\n    const value = e.target.value;\n    if (value !== \"0\") setExamType(value);\n    const splitValue = value.split(\"/\");\n    const examId = splitValue[0];\n    const examName = splitValue[1];\n    setExamId(examId);\n    setExamName(examName);\n  };\n\n  const handleQuestionSubmission = async () => {\n    //get all the values from the check box\n    let buildWord = \"\";\n    inputArray.map(({ value }) => {\n      const letter = value;\n      buildWord += letter;\n    });\n    //check if the world contain any asterik\n    const checkValue = buildWord.indexOf(\"*\");\n    if (checkValue == -1) {\n      alert(\"please enter at least one asterik character\");\n      return;\n    }\n    const inputValue = {\n      word: buildWord,\n      correctWord: correctSpelling,\n      clue: spellingClue,\n      examinationType: examName,\n      examId,\n      createdAt: new Date(),\n    };\n    try {\n      setSubmitted(true);\n      if (editId) {\n        await editSpellingMutation({\n          variables: {\n            input: inputValue,\n            questionId: editId,\n          },\n        });\n      } else {\n        await saveSpellingMutation({\n          variables: {\n            input: inputValue,\n          },\n        });\n      }\n    } catch (error) {}\n  };\n\n  return (\n    <SpellingQuestionStyles>\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3\">\n          <div className=\"card\">\n            <div className=\"text-center\">\n              {errors && <p className=\"text-center lead\">{errors.message}</p>}\n            </div>\n\n            {editId === null && (\n              <div className=\"form-group\">\n                <select className=\"custom-select\" onChange={handleExamChange}>\n                  <option value=\"0\">select examination type</option>\n                  {loading && <option>loading data.......</option>}\n                  {examTypeData.map(({ id, examName }) => {\n                    return (\n                      <option value={`${id}/${examName}`} key={id}>\n                        {examName}\n                      </option>\n                    );\n                  })}\n                </select>\n              </div>\n            )}\n\n            {examId && examName && (\n              <React.Fragment>\n                {editId === null && (\n                  <p className=\"lead\">saving questions into {examName}</p>\n                )}\n                {editId && <p className=\"lead\">Editing Question</p>}\n                <div className=\"input-group word-length\">\n                  <input\n                    type=\"text\"\n                    value={wordLength}\n                    onChange={handleWordLengthChange}\n                    className=\"form-control\"\n                    placeholder=\"word length...\"\n                    aria-label=\"Input group example\"\n                    aria-describedby=\"btnGroupAddon2\"\n                  />\n                  <div\n                    className=\"input-group-prepend btn-wl\"\n                    onClick={wordLengthFunction}\n                  >\n                    <div className=\"input-group-text\" id=\"btnGroupAddon2\">\n                      Enter word length\n                    </div>\n                  </div>\n                </div>\n                {inputArray.length > 0 && (\n                  <div className=\"guide-div\">\n                    <p>\n                      Enter the spelling word. Use * to denote the missing word\n                    </p>\n                  </div>\n                )}\n\n                <div className=\"input-row\">\n                  {inputArray.map(({ value, index }, ind) => {\n                    return (\n                      <input\n                        key={ind}\n                        type=\"text\"\n                        value={value}\n                        className=\"form-control input-spelling\"\n                        onChange={(e) => handleTextInputChange(e, index)}\n                      />\n                    );\n                  })}\n                </div>\n                {inputArray.length > 0 && (\n                  <React.Fragment>\n                    <div className=\"form-group\">\n                      <label htmlFor=\"correctSpelling\">Correct spelling</label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        value={correctSpelling}\n                        id=\"correctSpelling\"\n                        placeholder=\"Correct spelling\"\n                        name=\"correctSpelling\"\n                        onChange={handleSpelling}\n                      />\n                    </div>\n\n                    <div className=\"form-group\">\n                      <label htmlFor=\"spellingClue\">Clue</label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        value={spellingClue}\n                        id=\"spellingClue\"\n                        placeholder=\"Spelling clue\"\n                        name=\"spellingClue\"\n                        onChange={handleSpelling}\n                      />\n                    </div>\n\n                    <div className=\"text-center\">\n                      {editId ? (\n                        <button\n                          disabled={submitted}\n                          className=\"btn btn-warning\"\n                          onClick={handleQuestionSubmission}\n                        >\n                          {\" \"}\n                          {!submitted\n                            ? \"Edit Question\"\n                            : \"editing please wait....\"}\n                        </button>\n                      ) : (\n                        <button\n                          disabled={submitted}\n                          className=\"btn btn-success\"\n                          onClick={handleQuestionSubmission}\n                        >\n                          {\" \"}\n                          {!submitted\n                            ? \"Save Spelling Questions\"\n                            : \"Saving please wait....\"}\n                        </button>\n                      )}\n                    </div>\n                  </React.Fragment>\n                )}\n              </React.Fragment>\n            )}\n          </div>\n        </div>\n      </div>\n    </SpellingQuestionStyles>\n  );\n};\n\nexport default SaveSpellingQuestion;\n","/app/src/methods/saveBulkSpellingQuestions.js",["592","593","594"],"const saveBulkSpellingQuestions = (excelArray, examId, examinationType) => {\n  //build the question and return the array data\n  let questionsArray = [];\n  for (let i = 0; i < excelArray.length; i++) {\n    let currentArray = excelArray[i];\n    let questionObject = {};\n    //loop through the second array\n    for (let j = 0; j < currentArray.length; j++) {\n      const arrayValue = currentArray[j];\n\n      switch (j) {\n        case 0:\n          questionObject.word = arrayValue;\n          break;\n        case 1:\n          questionObject.correctWord = arrayValue;\n        case 2:\n          questionObject.clue = arrayValue;\n          break;\n      }\n    }\n    //check if the word has asterisks\n    if (questionObject.word.indexOf(\"*\") != -1) {\n      questionObject.examId = examId;\n      questionObject.examinationType = examinationType;\n      questionObject.createdAt = new Date();\n      questionsArray.push(questionObject);\n    }\n  }\n  return { type: \"result\", payload: questionsArray };\n};\n\nexport default saveBulkSpellingQuestions;\n","/app/src/common/examinationTypeComponent.js",["595","596","597","598","599","600"],"import React, { useEffect, useState } from \"react\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { GetDifferentExamination } from \"../graphql/queries\";\n\nconst ExaminationTypeComponent = ({\n  selectedExamTypeFunc,\n  selectedExamNameFunc,\n  display,\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState(null);\n  const [examTypeData, setExamDataType] = useState([]);\n  const [selectedExamName, setSelectedExamName] = useState(null);\n  const [examTypeQuery, examTypeResult] = useLazyQuery(GetDifferentExamination);\n\n  useEffect(() => {\n    if (examTypeResult.loading) {\n      setLoading(true);\n    }\n    if (examTypeResult.data) {\n      const data = examTypeResult.data.getExamByType;\n      setExamDataType(data);\n      setLoading(false);\n    }\n    if (examTypeResult.error) {\n      setLoading(false);\n      setErrors(examTypeResult.error);\n    }\n  }, [examTypeResult.data, examTypeResult.error, examTypeResult.loading]);\n\n  const handleExamChange = (e) => {\n    const value = e.target.value;\n    if (value == \"0\") return;\n    const splitValue = value.split(\"/\");\n    //extract selected schedules here\n    const selValue = examTypeData.find((e) => e.id == splitValue[0]);\n    const examSchedules = selValue && selValue.examSchedules;\n    setSelectedExamName(splitValue[1]);\n    selectedExamNameFunc({\n      examId: splitValue[0],\n      examName: splitValue[1],\n      examSchedules: examSchedules,\n    });\n  };\n\n  const handleExamTypeChange = (e) => {\n    const value = e.target.value;\n    if (value !== \"0\") {\n      selectedExamTypeFunc(value);\n      setSelectedExamName(null);\n      examTypeQuery({\n        variables: {\n          examType: value,\n        },\n      });\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {errors && <p className=\"lead text-danger\">Error: {errors}</p>}\n      <div className=\"form-group\">\n        <label className=\"form-label\">Select examination type</label>\n        <select className=\"custom-select\" onChange={handleExamTypeChange}>\n          <option value=\"0\">select examination type</option>\n          {display == \"all\" && (\n         <React.Fragment>\n              <option value=\"multiple choice questions\">\n                Multiple choice questions\n              </option>\n              <option value=\"spelling examination\">\n                Spelling examination{\" \"}\n              </option>\n\n              <option value=\"short answer exam\">Short answer type</option>\n              <option value=\"essay exam\">Essay examination</option>\n\n              <option value=\"quantitative exam\">\n                Quantitative examination\n              </option>\n            </React.Fragment>\n          )}\n\n          {display == 1 && (\n            <React.Fragment>\n              <option value=\"multiple choice questions\">\n                Multiple choice questions\n              </option>\n              <option value=\"spelling examination\">\n                Spelling examination{\" \"}\n              </option>\n            </React.Fragment>\n          )}\n\n          {display == 2 && (\n            <React.Fragment>\n              <option value=\"short answer exam\">Short answer type</option>\n              <option value=\"essay exam\">Essay examination</option>\n            </React.Fragment>\n          )}\n\n          {display == 3 && (\n            <React.Fragment>\n              <option value=\"quantitative exam\">\n                Quantitative examination\n              </option>\n            </React.Fragment>\n          )}\n        </select>\n      </div>\n      <div className=\"form-group\">\n        <label className=\"form-label\">Select examination name</label>\n        <select className=\"custom-select\" onChange={handleExamChange}>\n          <option value=\"0\">select subject </option>\n          {loading && <option>loading data.......</option>}\n          {examTypeData.map(({ id, examName }) => {\n            return (\n              <option value={`${id}/${examName}`} key={id}>\n                {examName}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n\n      <div className=\"form-group\">\n        {selectedExamName && (\n          <p className=\"lead\">\n            Selected Examination name : <span>{selectedExamName}</span>\n          </p>\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default ExaminationTypeComponent;\n","/app/src/common/showSpellingComponent.js",[],"/app/src/components/startSpellingExam.js",["601","602","603","604","605","606"],"/app/src/methods/markSpellingScripts.js",[],"/app/src/components/spellingExamSummary.js",["607","608"],"/app/src/components/viewSpellingExaminationScript.js",[],"/app/src/common/displaySpellingScriptComponent.js",[],"/app/src/components/displaySpellingScriptComponent.js",["609","610","611","612"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { GetCanidateExamResult } from \"../graphql/queries\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport Loading from \"../common/loading\";\nimport DisplaySpellingScriptComponent from \"../common/displaySpellingScriptComponent\";\n\nconst DisplayQuizScriptComponentStyles = styled.div`\n  p {\n    font-size: 18px;\n  }\n  .question {\n    font-size: 16px;\n  }\n  span {\n    padding-left: 50px;\n  }\n  .question-panel {\n    display: flex;\n    font-size: 16px;\n  }\n  .question-divs {\n    padding-left: 20px;\n  }\n  .details {\n    background-color: #0b2f27;\n    color: #fff;\n    padding: 30px;\n  }\n  .text-name {\n    color: #7abbff !important;\n  }\n  .spanDetails {\n    float: right;\n    font-weight: bold;\n    color: #7c23f3;\n  }\n  .score {\n    font-size: 35px;\n    text-align: center;\n  }\n`;\n\nconst convertMinutesToHours = (minutesToConvert) => {\n  const hours = Math.floor(minutesToConvert / 60);\n  const minutes = minutesToConvert - hours * 60;\n  if (hours == 0) {\n    return `${minutes} minutes`;\n  }\n  return `${hours} hours ${minutes} minutes`;\n};\n\nconst DisplayQuizScriptComponent = () => {\n  const match = useRouteMatch(\"/spelling_examination_script/:examId\");\n  const [processing, setProcessing] = useState(false);\n  const [errors, setErrors] = useState(null);\n  const [scripts, setScripts] = useState(null);\n  const [nodata, setNoData] = useState(null);\n  const [getScriptFunction, getScriptResult] = useLazyQuery(\n    GetCanidateExamResult,\n    {\n      variables: {\n        examId: match.params.examId,\n      },\n    }\n  );\n\n  useEffect(() => {\n    setProcessing(!processing);\n    getScriptFunction();\n  }, []);\n\n  useEffect(() => {\n    if (getScriptResult.data) {\n      const scriptsData = getScriptResult.data.getExamOfCanidate;\n      if (scriptsData) {\n        setScripts(scriptsData);\n      } else {\n        setNoData(true);\n      }\n      setProcessing(!processing);\n    }\n    if (getScriptResult.error) {\n      const message = getScriptResult.error.message;\n      setProcessing(!processing);\n      setErrors(message);\n    }\n  }, [getScriptResult.loading, getScriptResult.data, getScriptResult.error]);\n\n  return (\n    <DisplayQuizScriptComponentStyles>\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          {errors && <p className=\"text-center lead text-danger\">{errors}</p>}\n\n          {processing && (\n            <div className=\"text-center\">\n              <Loading />\n            </div>\n          )}\n\n          {nodata && (\n            <div className=\"text-center\">\n              <p className=\"lead text-info\">\n                No examination matching that query\n              </p>\n            </div>\n          )}\n\n          { console.log(scripts)}\n\n          {\n            scripts && (\n              <React.Fragment>\n                <DisplaySpellingScriptComponent scripts={scripts} />\n              </React.Fragment>\n            )\n            /* end of scripts matter here */\n          }\n        </div>\n      </div>\n    </DisplayQuizScriptComponentStyles>\n  );\n};\n\nexport default DisplayQuizScriptComponent;\n","/app/src/components/loadSpellingQuestions.js",["613","614","615","616","617","618"],"import React, { useEffect, useState } from \"react\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport {\n  GetDifferentExamination,\n  GetAllSpellingQuestions,\n} from \"../graphql/queries\";\nimport { DeleteOneSpellingQuestion } from \"../graphql/mutation\";\nimport { useLocation } from \"react-router-dom\";\nimport Loading from \"../common/loading\";\nimport styled from \"styled-components\";\n\nconst LoadQuestionsStyle = styled.div``;\n\nconst buttonsToDisplay = (total, numberPerPage) => {\n  const buttonNumber = +total / +numberPerPage;\n  let array = [];\n  array.length = Math.ceil(buttonNumber);\n  return array.fill(1);\n};\n\nconst LoadQuestionsComponent = ({ history }) => {\n  const [examType, setExamType] = useState([]);\n  const [loadingData, setLoading] = useState(false);\n  const [selectedExamId, setSelectedExamId] = useState(\"\");\n  const [selectedExamName, setSelectedExamName] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [questions, setQuestions] = useState({});\n  const [totalQuestion, setTotalQuestion] = useState(0);\n  const [queryRan, setQueryRan] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n  const location = useLocation();\n  const details = location.state && location.state.details;\n  const [questionsQuery, questionsQueryResult] = useLazyQuery(\n    GetAllSpellingQuestions\n  );\n  const [examsQuery, examsQueryResult] = useLazyQuery(GetDifferentExamination);\n\n  const [deleteQuestion, deleteQuestionResult] = useMutation(\n    DeleteOneSpellingQuestion\n  );\n\n \n\n  useEffect(() => {\n    examsQuery({\n      variables: {\n        examType: \"spelling examination\",\n      },\n    });\n  }, []);\n\n  useEffect(() => {\n    if (examsQueryResult.data) {\n      setExamType(examsQueryResult.data.getExamByType);\n      setLoading(false);\n    }\n\n    if (examsQueryResult.loading) {\n      setLoading(true);\n    }\n\n    if (examsQueryResult.error) {\n      setErrors(examsQueryResult.error.message);\n      setLoading(false);\n    }\n  }, [examsQueryResult.data, examsQueryResult.error]);\n\n  useEffect(() => {\n    if (questionsQueryResult.error) {\n      setErrors(questionsQueryResult.error.message);\n      setLoading(true);\n      setQueryRan(!queryRan);\n    }\n\n    if (questionsQueryResult.data) {\n      setQuestions(questionsQueryResult.data.getAllSpellingQuestions.questions);\n      setTotalQuestion(\n        questionsQueryResult.data.getAllSpellingQuestions.totalQuestion\n      );\n      setLoading(false);\n    }\n  }, [questionsQueryResult.error, questionsQueryResult.data]);\n\n  useEffect(() => {\n    if (deleteQuestionResult.error) {\n      setErrors(deleteQuestionResult.error.message);\n      setLoading(true);\n      setSubmitted(false);\n    }\n\n    if (deleteQuestionResult.data) {\n      if (deleteQuestionResult.data.deleteSpellingQuestion) {\n        window.alert(\"question deleted successfully\");\n        setLoading(false);\n        setSubmitted(false);\n      }\n    }\n  }, [deleteQuestionResult.error, deleteQuestionResult.data]);\n\n  const getMoreQuestions = (e, index) => {\n    try {\n      e.stopPropagation();\n      e.preventDefault();\n      setLoading(true);\n      setQueryRan(!queryRan);\n      questionsQueryResult.fetchMore({\n        variables: {\n          examId: selectedExamId,\n          offset: questions.length * (index - 1),\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult) return prev;\n          return Object.assign({}, prev, {\n            getAllSpellingQuestions: {\n              totalQuestion:\n                fetchMoreResult.getAllSpellingQuestions.totalQuestion,\n              __typename: \"QuestionsTotal\",\n              questions: [\n                //...prev.getAllQuestions.questions,\n                ...fetchMoreResult.getAllSpellingQuestions.questions,\n              ],\n            },\n          });\n        },\n      });\n    } catch (error) {}\n  };\n\n  const handleExamChange = async (e) => {\n    const value = e.target.value;\n    if (value == \"0\") return;\n    const splitValue = value.split(\"/\");\n    setSelectedExamId(splitValue[0]);\n    setSelectedExamName(splitValue[1]);\n    try {\n      setQueryRan(!queryRan);\n      questionsQuery({\n        variables: {\n          examId: splitValue[0],\n          offset: 0,\n        },\n        fetchPolicy: \"cache-and-network\",\n      });\n    } catch (error) {}\n  };\n\n  const handleEditSpelling = ({\n    word,\n    clue,\n    correctWord,\n    id,\n    examinationType,\n    examId,\n    index,\n    questionsLength,\n  }) => {\n    history.push(\"/add_spelling_question\", {\n      question: {\n        word,\n        clue,\n        correctWord,\n        id,\n        examinationType,\n        examId,\n        index,\n        questionsLength,\n      },\n    });\n  };\n\n  const handleQuestionDeleteAction = async ({ questionId, index }) => {\n    const confirmDelete = window.confirm(\"Are you sure?\");\n    if (!confirmDelete) return;\n    //delete the question here\n    try {\n      setSubmitted(true);\n      setLoading(true);\n      await deleteQuestion({\n        variables: {\n          questionId,\n        },\n        refetchQueries: [\n          {\n            query: GetAllSpellingQuestions,\n            variables: {\n              examId: selectedExamId,\n              offset: questions.length * (index - 1),\n            },\n          },\n        ],\n      });\n    } catch (error) {}\n  };\n\n  return (\n    <LoadQuestionsStyle>\n      <div className=\"row\">\n        <div className=\"col-md-8 offset-md-2\">\n          {errors && <p className=\"lead text-danger\">Error: {errors}</p>}\n          <div className=\"form-group\">\n            <select className=\"custom-select\" onChange={handleExamChange}>\n              <option value=\"0\">select examination type</option>\n              {examsQueryResult.loading && <option>loading data.......</option>}\n              {examType &&\n                examType.length > 0 &&\n                examType.map(({ id, examName }) => {\n                  return (\n                    <option value={`${id}/${examName}`} key={id}>\n                      {examName}\n                    </option>\n                  );\n                })}\n            </select>\n          </div>\n\n          <div className=\"form-group\">\n            {selectedExamName && (\n              <p className=\"lead\">\n                Selected Examination:{\" \"}\n                <span>\n                  {selectedExamName && selectedExamName.toUpperCase()}\n                </span>\n              </p>\n            )}\n          </div>\n\n          {questions && questions.length > 0 ? (\n            <table className=\"table\">\n              <caption>Spelling Questions</caption>\n              <thead className=\"thead-dark\">\n                <tr>\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">Spelling Word</th>\n                  <th scope=\"col\">Correct Word</th>\n                  <th scope=\"col\">Clue</th>\n                  <th scope=\"col\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {questions.map(\n                  (\n                    { word, clue, correctWord, id, examinationType, examId },\n                    index\n                  ) => {\n                    return (\n                      <tr key={index}>\n                        <th scope=\"row\">{index + 1}</th>\n                        <td>\n                          <p>{word.toUpperCase()}</p>\n                        </td>\n                        <td>\n                          <p>{correctWord.toUpperCase()}</p>\n                        </td>\n                        <td>\n                          <p>{clue}</p>\n                        </td>\n                        <td>\n                          <div\n                            className=\"btn-group\"\n                            role=\"group\"\n                            aria-label=\"Basic example\"\n                          >\n                            <button\n                              type=\"button\"\n                              className=\"btn btn-warning\"\n                              onClick={() =>\n                                handleEditSpelling({\n                                  word,\n                                  clue,\n                                  correctWord,\n                                  id,\n                                  examinationType,\n                                  examId,\n                                  index: index + 1,\n                                  questionsLength: questions.length,\n                                })\n                              }\n                            >\n                              Edit\n                            </button>\n                            <button\n                              disabled={submitted}\n                              type=\"button\"\n                              onClick={() =>\n                                handleQuestionDeleteAction({\n                                  questionId: id,\n                                  index: index + 1,\n                                })\n                              }\n                              className=\"btn btn-danger\"\n                            >\n                              {submitted ? \"please wait...\" : \"Delete\"}\n                            </button>\n                          </div>\n                        </td>\n                      </tr>\n                    );\n                  }\n                )}\n              </tbody>\n            </table>\n          ) : (\n            <div>\n              {queryRan && (\n                <p>\n                  No questions saved yet for the selected examination;{\" \"}\n                  {selectedExamName}\n                </p>\n              )}\n            </div>\n          )}\n\n          {loadingData && <Loading />}\n\n          <nav aria-label=\"Page navigation example\">\n            <ul className=\"pagination\">\n              {totalQuestion > 20 &&\n                buttonsToDisplay(totalQuestion, 20).map((_, index) => {\n                  return (\n                    <li\n                      className=\"page-item\"\n                      key={index}\n                      onClick={(e) => getMoreQuestions(e, index + 1)}\n                    >\n                      <a className=\"page-link\" href=\"\">\n                        {index + 1}\n                      </a>\n                    </li>\n                  );\n                })}\n            </ul>\n          </nav>\n        </div>\n      </div>\n    </LoadQuestionsStyle>\n  );\n};\n\nexport default LoadQuestionsComponent;\n","/app/src/components/saveEssayQuestions.js",["619","620","621","622","623","624","625","626"],"import React, { useEffect, useState, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport ExaminationTypeComponent from \"../common/examinationTypeComponent\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport DraftJsToolBar from \"../common/draftJSToolBar\";\nimport draftToHtml from \"draftjs-to-html\";\nimport { useMutation } from \"@apollo/client\";\nimport { SaveEssayQuestion } from \"../graphql/mutation\";\nimport {\n  EditorState,\n  convertToRaw,\n  ContentState,\n  convertFromHTML,\n} from \"draft-js\";\n\n\nconst SaveEssayQuestionStyles = styled.div`\n  .write-question {\n    background-color: #c0c0c0;\n    margin-bottom: 20px;\n    padding: 10px;\n  }\n  .possible-span {\n    padding: 5px;\n    display: inline-block;\n    background-color: #063c16;\n    margin-top: 10px;\n    margin-right: 10px;\n    cursor: pointer;\n    color: #fff;\n    border-radius: 0px 10px;\n  }\n  .file-details {\n    padding: 20px;\n    width: 30%;\n  }\n  .custom-width {\n    width: 50%;\n  }\n`;\n\nconst SaveEssayQuestionComponent = () => {\n  const [selectedExamType, setSelectedExamType] = useState(null);\n  const [examDetails, setExamDetails] = useState(null);\n  const [question, setQuestion] = useState(null);\n  const [preview, setPreview] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [clue, setClue] = useState(\"\");\n  const [possibleAnswers, setPossibleAnswers] = useState([]);\n  const [mediaType, setMediaType] = useState(\"\");\n  const [fileDetails, setFileDetails] = useState(null);\n  const [file, setFile] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [submitted, setSubmitted] = useState(false);\n  const [saveQuestionFunc, saveQuestionResult] = useMutation(SaveEssayQuestion);\n  const textAnswer = useRef();\n  const fileRef = useRef();\n  \n\n  useEffect(() => {\n    if (saveQuestionResult.error) {\n      setSubmitted(false);\n      setErrors(saveQuestionResult.error.message);\n    }\n    if (saveQuestionResult.data) {\n      //const data = saveQuestionResult.data.saveEssayQuestion;\n\n      setSubmitted(false);\n      setClue(\"\");\n      setText(\"\");\n      setMediaType(\"0\");\n      setPossibleAnswers([]);\n      setFileDetails(null);\n      setFile(null);\n      setQuestion(null);\n      fileRef.current.value = \"\";\n      window.alert(\"question saved to database.\");\n    }\n  }, [saveQuestionResult.data, saveQuestionResult.error]);\n\n  const handleExamNameFunc = ({ examId, examName }) => {\n    setExamDetails({\n      examId,\n      examName,\n    });\n  };\n\n  const handleExamTypeFunc = (selectedExamName) => {\n    setSelectedExamType(selectedExamName);\n  };\n  const handleChange = (editorState) => {\n    let html = draftToHtml(convertToRaw(editorState.getCurrentContent()));\n    setQuestion(editorState);\n    setPreview(html);\n  };\n\n  const setHtml = (html) => {\n    return { __html: html };\n  };\n\n  const handleTextChange = (e) => {\n    const value = e.target.value;\n    if (value.lastIndexOf(\",\") != -1) {\n      const oldValues = [...possibleAnswers];\n      const valueWithoutComma = value.substr(0, value.length - 1);\n      const old = oldValues.filter((e) => e != valueWithoutComma);\n      setPossibleAnswers([...old, valueWithoutComma]);\n      setText(\"\");\n    } else {\n      setText(value);\n    }\n  };\n\n  const handleTextClueChange = (e) => {\n    const value = e.target.value;\n    setClue(value);\n  };\n\n  const removePossibleAnswer = (answer) => {\n    const oldValues = [...possibleAnswers];\n    const newValues = oldValues.filter((e) => e != answer);\n    setPossibleAnswers(newValues);\n  };\n\n  const handleMediaChange = (e) => {\n    const value = e.target.value;\n    if (value !== \"0\") {\n      setMediaType(value);\n    }\n  };\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    const { name, size, type } = file;\n    const fileType = type.split(\"/\")[0];\n    if (mediaType != fileType) {\n      window.alert(\n        `please select the correct media type: Select a ${mediaType}`\n      );\n      fileRef.current.value = \"\";\n      return;\n      //remove the reference\n    }\n    setFile(file);\n    setFileDetails({\n      name,\n      size,\n      type,\n    });\n  };\n\n  const submitQuestionToDB = async () => {\n    if (!selectedExamType) {\n      return window.alert(\"please select the exam type. It is required\");\n    }\n    if (!preview) {\n      return window.alert(\n        \"we can not save a question without the actual question. can we ?\"\n      );\n    }\n    if (possibleAnswers.length == 0) {\n      return window.alert(\"please enter possible answers for the question\");\n    }\n    if (!examDetails) {\n      return window.alert(\"select the subject/examination the question is for\");\n    }\n    try {\n      const { examId, examName } = examDetails;\n      let inputQuestion = {\n        type: selectedExamType,\n        question: preview,\n        clue: clue,\n        possibleAnswers: possibleAnswers,\n        examId: examId,\n        examinationType: examName,\n      };\n      if (mediaType) {\n        inputQuestion.mediaType = mediaType;\n        inputQuestion.mediaFile = file;\n      }\n      setSubmitted(true);\n      await saveQuestionFunc({\n        variables: {\n          input: inputQuestion,\n        },\n      });\n    } catch (error) {}\n  };\n\n  return (\n    <SaveEssayQuestionStyles>\n      <div className=\"row\">\n        <div className=\"col-md-8 offset-md-2\">\n          <h3 className=\"text-center\">Add Essay Questions</h3>\n          {errors && <p className=\"text-danger lead\">{errors}</p>}\n          <ExaminationTypeComponent\n            selectedExamTypeFunc={handleExamTypeFunc}\n            selectedExamNameFunc={handleExamNameFunc}\n            display={2}\n          />\n\n          <div>\n            <p>\n              <b> Preview of the question</b>\n            </p>\n          </div>\n          <div className=\"\" dangerouslySetInnerHTML={setHtml(preview)} />\n\n          <h4> Type Question</h4>\n\n          <Editor\n            editorState={question}\n            onEditorStateChange={handleChange}\n            editorClassName=\"write-question\"\n            placeholder=\"Type your question here.....\"\n            toolbar={DraftJsToolBar}\n          />\n\n          <div className=\"form-group\">\n            <label className=\"form-label\">Possible answers</label>\n\n            <input\n              type=\"text\"\n              className=\"form-control custom-width\"\n              aria-label=\"With textarea\"\n              value={text}\n              onChange={handleTextChange}\n              ref={textAnswer}\n            />\n            <small className=\"form-text text-muted\">\n              Type each possible answer seperated by a comma (,)\n            </small>\n          </div>\n\n          {possibleAnswers.map((answer, index) => {\n            return (\n              <span\n                key={index}\n                className=\"possible-span\"\n                onClick={() => removePossibleAnswer(answer)}\n              >\n                {answer}\n              </span>\n            );\n          })}\n\n          <div className=\"form-group\">\n            <label className=\"form-label\">Answer clues </label>\n\n            <textarea\n              className=\"form-control custom-width\"\n              aria-label=\"With textarea\"\n              value={clue}\n              onChange={handleTextClueChange}\n            ></textarea>\n          </div>\n\n          <div className=\"form-group\">\n            <label className=\"form-label\">Media Type</label>\n            <select\n              className=\"custom-width form-control\"\n              onChange={handleMediaChange}\n              value={mediaType}\n            >\n              <option value=\"0\">select media type</option>\n              <option value=\"video\">video</option>\n              <option value=\"audio\">audio</option>\n              <option value=\"image\">image</option>\n            </select>\n          </div>\n\n          <div className=\"form-group\">\n            <input\n              type=\"file\"\n              ref={fileRef}\n              className=\"file-input\"\n              onChange={handleFileChange}\n            />\n          </div>\n\n          {fileDetails && (\n            <div className=\"file-details\">\n              <p>file name: {fileDetails.name}</p>\n\n              <p>file type: {fileDetails.type}</p>\n\n              <p>file size: {+fileDetails.size / 1000} KB</p>\n            </div>\n          )}\n\n          <div className=\"float-right mb-3\">\n            <button\n              className=\"btn btn-success\"\n              disabled={submitted}\n              onClick={submitQuestionToDB}\n            >\n              {submitted\n                ? \"submitting please wait....\"\n                : \"Save Essay Questions \"}\n            </button>\n          </div>\n        </div>\n      </div>\n    </SaveEssayQuestionStyles>\n  );\n};\n\nexport default SaveEssayQuestionComponent;\n","/app/src/components/addEssayQuestionsToExam.js",["627","628","629","630","631","632"],"import React, { useState, useEffect } from \"react\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport { AutoGenerateEssayQuestions } from \"../graphql/queries\";\nimport { AddEssayQuestionsArrayToScheduleExam } from \"../graphql/mutation\";\nimport styled from \"styled-components\";\nimport LoadEssayQuestionsComponent from \"../common/loadEssayQuestionComponent\";\nimport ExaminationTypeComponent from \"../common/examinationTypeComponent\";\n\nconst AddQuestionStyles = styled.div`\n  .div-details {\n    margin: 20px 0px;\n  }\n  .question-divs {\n    padding-left: 10px;\n    cursor: pointer;\n  }\n\n  .div-question-details {\n    display: flex;\n    padding: 10px;\n    font-size: 16px;\n  }\n  .exam-details {\n    background: #02291c;\n    text-align: center;\n    padding: 20px;\n    color: #fff;\n  }\n`;\n\nconst setHtml = (html) => {\n  return { __html: html };\n};\n\nconst AddEssayQuestionsToExam = () => {\n  const [errors, setErrors] = useState(null);\n  const [examType, setExamType] = useState([]);\n  const [processing, setProcessing] = useState(false);\n  const [examData, setExamData] = useState(null);\n  const [loadQuestion, setLoadQuestion] = useState(false);\n  const [questionLoading, setQuestionLoading] = useState(false);\n  const [selectedQuestion, setSelectedQuestion] = useState([]);\n  const [submitted, setSubmitted] = useState(false);\n  const [autoProcessing, setAutoProcessing] = useState(false);\n  const [scheduleArray, setScheduleArray] = useState([]);\n  const [examScheduleDetails, setExamScheduleDetails] = useState(null);\n\n  //auto generate essay questions\n  const [autoGenerateFunc, autoGenResult] = useLazyQuery(\n    AutoGenerateEssayQuestions,\n    {\n      variables: {\n        examId: examData && examData.examId,\n        number: examScheduleDetails && examScheduleDetails.numberofQuestions,\n      },\n    }\n  );\n\n  //add essay questions to exam\n  const [addEssayQuestionToExam, addQuestionsToExamResult] = useMutation(\n    AddEssayQuestionsArrayToScheduleExam\n  );\n\n  //auto generate essay questions\n  useEffect(() => {\n    if (autoGenResult.data) {\n      //set the questions selected here\n      const autoQuestions = autoGenResult.data.autoGenEssayQuestions;\n      setAutoProcessing(!autoProcessing);\n      setSelectedQuestion(autoQuestions);\n    }\n    if (autoGenResult.error) {\n      setErrors(autoGenResult.error);\n      setAutoProcessing(!autoProcessing);\n    }\n  }, [autoGenResult.data, autoGenResult.error]);\n\n  //add essay question to exam mutation\n  useEffect(() => {\n    if (addQuestionsToExamResult.error) {\n      setProcessing(!processing);\n      setSubmitted(!submitted);\n      setErrors(addQuestionsToExamResult.error.message);\n    }\n\n    if (\n      addQuestionsToExamResult.data &&\n      addQuestionsToExamResult.data.addEssayQuestionsToExam\n    ) {\n      setProcessing(!processing);\n      window.alert(\"questions added successfully\");\n    }\n  }, [addQuestionsToExamResult.error, addQuestionsToExamResult.data]);\n\n  const handleLoadQuestions = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setLoadQuestion(!loadQuestion);\n    setQuestionLoading(!questionLoading);\n  };\n\n  const handleQuestionClick = (question) => {\n    const selectedQuestionLength = selectedQuestion.length;\n    const totalQuestion = examScheduleDetails.numberofQuestions;\n    const findQuestion = selectedQuestion.some((ques) => {\n      return ques.id == question.id;\n    });\n\n    if (findQuestion) {\n      return;\n    }\n    if (selectedQuestionLength < totalQuestion) {\n      //add the question to the question array\n      //check if the question has been saved before\n      setSelectedQuestion((questions) => {\n        return [...questions, question];\n      });\n    } else {\n      //remove the last item and append the new question\n      const oldItems = [...selectedQuestion];\n      oldItems.pop();\n      oldItems.push(question);\n      setSelectedQuestion(oldItems);\n    }\n  };\n\n  const removeQuestionFromQuestionArray = (id) => {\n    const remainQuestion = selectedQuestion.filter((ele) => ele.id !== id);\n    setSelectedQuestion(remainQuestion);\n  };\n\n  const handleSubmitQuestion = async () => {\n    if (examScheduleDetails.numberofQuestions > selectedQuestion.length) {\n      //we have not selected the complete questions\n      return window.alert(\n        `Please complete the questions. You have ${\n          examScheduleDetails.numberofQuestions - selectedQuestion.length\n        } questions left to add to the examination. `\n      );\n    }\n\n    const arrayOfEssayQuestions = selectedQuestion.map(\n      ({\n        type,\n        question,\n        clue,\n        possibleAnswers,\n        mediaUrl,\n        examId,\n        examinationType,\n        mediaType,\n        id,\n      }) => {\n        const questionObj = {\n          type,\n          question,\n          clue,\n          possibleAnswers,\n          mediaUrl,\n          examId: examId,\n          examinationType,\n          mediaType,\n          id,\n        };\n        return questionObj;\n      }\n    );\n    await addEssayQuestionToExam({\n      variables: {\n        questionsArray: arrayOfEssayQuestions,\n        scheduleId: examScheduleDetails.id,\n      },\n    });\n  };\n\n  const autoGenerateQuestionsToAdd = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const examId = examData && examData.examId;\n    const number = examScheduleDetails && examScheduleDetails.numberofQuestions;\n    if (examId && number) {\n      setAutoProcessing(!autoProcessing);\n      switch (examType) {\n        case \"short answer exam\":\n          autoGenerateFunc();\n          break;\n      }\n    }\n  };\n\n  const selectedExamTypeFunc = (examType) => {\n    //clear everything before setting\n    setExamData(null);\n    setExamScheduleDetails(null);\n    setScheduleArray([]);\n    setExamType(examType);\n  };\n\n  const selectedExamFunc = ({ examId, examName, examSchedules }) => {\n    setExamData({\n      examId,\n      examName,\n      examSchedules,\n    });\n    \n    if (examSchedules) {\n      setScheduleArray(examSchedules);\n    } else {\n      setScheduleArray([]);\n    }\n  };\n\n  const handleScheduleExamChange = (e) => {\n    const value = e.target.value;\n    if (value == \"0\") return;\n    //filter and find the selected details\n    const selectedSchedule = scheduleArray.find((e) => e.id === value);\n    if (selectedSchedule) {\n      setSelectedQuestion(selectedSchedule.questions);\n    }\n    setExamScheduleDetails(selectedSchedule);\n    //query for the details of the selected paper\n    //if we already have questions load the selected questions array here\n  };\n\n  return (\n    <AddQuestionStyles>\n      <div className=\"row\">\n        <div className=\"col-md-4 offset-md-1\">\n          <h4 className=\"text-center\">Add Essay Question to Examination</h4>\n\n          <ExaminationTypeComponent\n            selectedExamTypeFunc={selectedExamTypeFunc}\n            selectedExamNameFunc={selectedExamFunc}\n            display={2}\n          />\n\n          <select className=\"form-control\" onChange={handleScheduleExamChange}>\n            <option value=\"0\">select examination </option>\n\n            {scheduleArray.map(({ id, examinationName }) => {\n              return (\n                <option key={id} value={id}>\n                  {examinationName}\n                </option>\n              );\n            })}\n          </select>\n\n          {examScheduleDetails && (\n            <div className=\"div-details\">\n              <div className=\"exam-details\">\n                <p className=\"lead\">\n                  <span>{examScheduleDetails.examinationName}</span>\n                </p>\n                <p className=\"lead\">\n                  Total Questions :{\" \"}\n                  <span>{examScheduleDetails.numberofQuestions}</span>\n                </p>\n\n                <p className=\"lead\">\n                  Examination Duration :{\" \"}\n                  <span>{examScheduleDetails.examinationDuration} minutes</span>\n                </p>\n\n                <p className=\"lead\">\n                  Questions Added :{\" \"}\n                  <span>{examScheduleDetails.questions.length}</span>\n                </p>\n              </div>\n\n              <div\n                className=\"button-div text-center\"\n                onClick={handleLoadQuestions}\n              >\n                <button className=\"btn btn-success\">\n                  Manually Add Questions\n                </button>\n\n                <button\n                  disabled={autoProcessing}\n                  className=\"btn btn-info m-2\"\n                  onClick={autoGenerateQuestionsToAdd}\n                >\n                  {autoProcessing\n                    ? \"auto selecting questions\"\n                    : \"Auto Add Questions\"}\n                </button>\n              </div>\n\n              {examScheduleDetails && questionLoading && (\n                <React.Fragment>\n                  <h5 className=\"text-center\">Questions</h5>\n                  <LoadEssayQuestionsComponent\n                    examId={examData && examData.examId}\n                    handleQuestionClick={handleQuestionClick}\n                    examType={examType}\n                  />\n                </React.Fragment>\n              )}\n            </div>\n          )}\n        </div>\n\n        <div className=\"col-md-4 offset-md-2\">\n          {selectedQuestion && selectedQuestion.length > 0 && (\n            <p className=\"text-center lead\">\n              Remaining questions:{\" \"}\n              {examScheduleDetails &&\n                examScheduleDetails.numberofQuestions -\n                  +selectedQuestion.length}\n            </p>\n          )}\n          {selectedQuestion.length > 0 &&\n            selectedQuestion.map(({ question, id }, index) => {\n              return (\n                <div\n                  className=\"div-question-details\"\n                  key={id}\n                  onClick={() => removeQuestionFromQuestionArray(id)}\n                >\n                  <div>{index + 1}).</div>\n                  <div\n                    className=\"question-divs\"\n                    dangerouslySetInnerHTML={setHtml(question)}\n                  />\n                </div>\n              );\n            })}\n\n          {selectedQuestion.length > 0 && (\n            <div className=\"text-center\">\n              <button\n                onClick={handleSubmitQuestion}\n                className=\"btn btn-danger btn-lg\"\n                disabled={submitted}\n              >\n                {submitted\n                  ? \"submitting please wait....\"\n                  : \"Save Question Selection\"}\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </AddQuestionStyles>\n  );\n};\n\nexport default AddEssayQuestionsToExam;\n","/app/src/common/loadEssayQuestionComponent.js",["633","634","635","636"],"import React, { useEffect, useState } from \"react\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { GetAllEssayQuestions } from \"../graphql/queries\";\nimport ShowQuestionComponent from \"./showQuestionsComponent\";\nimport Loading from \"../common/loading\";\nimport styled from \"styled-components\";\n\nconst LoadQuestionsStyle = styled.div``;\n\nconst buttonsToDisplay = (total, numberPerPage) => {\n  const buttonNumber = +total / +numberPerPage;\n  let array = [];\n  array.length = Math.ceil(buttonNumber);\n  return array.fill(1);\n};\n\nconst LoadEssayQuestionComponent = ({\n  examId,\n  handleQuestionClick,\n  examType,\n}) => {\n  const [loadingData, setLoading] = useState(false);\n  const [errors, setErrors] = useState(null);\n  const [questions, setQuestions] = useState({});\n  const [totalQuestion, setTotalQuestion] = useState(0);\n  const [queryRan, setQueryRan] = useState(false);\n\n  const [essayQuestionsQuery, essayQuestionsQueryResult] = useLazyQuery(\n    GetAllEssayQuestions,\n    {\n      variables: {\n        examId: examId,\n      },\n    }\n  );\n\n  useEffect(() => {\n    switch (examType) {\n      case \"short answer exam\":\n        essayQuestionsQuery();\n        break;\n      case \"essay exam\":\n        break;\n    }\n  }, [examId]);\n\n  //effect for spelling questions loading\n  useEffect(() => {\n    if (essayQuestionsQueryResult.error) {\n      setErrors(essayQuestionsQueryResult.error.message);\n      setLoading(true);\n      setQueryRan(!queryRan);\n    }\n\n    if (essayQuestionsQueryResult.data) {\n      setQuestions(\n        essayQuestionsQueryResult.data.getAllEssayQuestions.questions\n      );\n      setTotalQuestion(\n        essayQuestionsQueryResult.data.getAllEssayQuestions.totalQuestion\n      );\n\n      setLoading(false);\n    }\n  }, [essayQuestionsQueryResult.error, essayQuestionsQueryResult.data]);\n\n  //get more questions for multiple choice questions\n  const getMoreQuestions = (e, index) => {\n    try {\n      e.stopPropagation();\n      e.preventDefault();\n      setLoading(true);\n      setQueryRan(!queryRan);\n      essayQuestionsQueryResult.fetchMore({\n        variables: {\n          examId: examId,\n          offset: questions.length * (index - 1),\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult) return prev;\n          return Object.assign({}, prev, {\n            getAllEssayQuestions: {\n              totalQuestion: fetchMoreResult.getAllEssayQuestions.totalQuestion,\n              __typename: \"QuestionsTotal\",\n              questions: [\n                //...prev.getAllQuestions.questions,\n                ...fetchMoreResult.getAllEssayQuestions.questions,\n              ],\n            },\n          });\n        },\n      });\n    } catch (error) {}\n  };\n\n  return (\n    <LoadQuestionsStyle>\n      {errors && <p className=\"lead text-danger\">Error: {errors}</p>}\n\n      {examType === \"short answer exam\" &&\n      questions &&\n      questions.length > 0 ? (\n        questions.map((question, index) => {\n          return (\n            <div key={index} onClick={() => handleQuestionClick(question)}>\n              <ShowQuestionComponent question={question} />\n            </div>\n          );\n        })\n      ) : (\n        <div>{queryRan && <p>No questions saved yet.</p>}</div>\n      )}\n\n      {loadingData && <Loading />}\n\n      <nav aria-label=\"Page navigation example\">\n        <ul className=\"pagination\">\n          {examType === \"short answer exam\" &&\n            totalQuestion > 0 &&\n            buttonsToDisplay(totalQuestion, 20).map((_, index) => {\n              return (\n                <li\n                  className=\"page-item\"\n                  key={index}\n                  onClick={(e) => getMoreQuestions(e, index + 1)}\n                >\n                  <a className=\"page-link\" href=\"\">\n                    {index + 1}\n                  </a>\n                </li>\n              );\n            })}\n        </ul>\n      </nav>\n    </LoadQuestionsStyle>\n  );\n};\n\nexport default LoadEssayQuestionComponent;\n","/app/src/components/startEssayExam.js",["637","638","639","640","641","642","643","644"],"/app/src/common/questionNumberDiv.js",["645"],"import React, { useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { HashLink } from \"react-router-hash-link\";\nconst NumberStyles = styled.div`\n  .number-panel {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .num-div {\n    width: 50px;\n    height: 50px;\n    padding: 20px;\n    color: #fff;\n    background-color: black;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 5px;\n  }\n  .has-answered {\n    background-color: green;\n  }\n\n  .sticky {\n    position: fixed;\n    top: 0;\n    z-index: 1000;\n  }\n`;\n\nconst QuestionNumberDiv = ({ questionsArray = [] }) => {\n  const divRef = useRef();\n\n  const sticky = divRef && divRef.current && divRef.current.offsetTop;\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", scrollFunction);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollFunction);\n    };\n  });\n\n  const scrollFunction = () => {\n    if (window.pageYOffset > sticky) {\n      divRef && divRef.current && divRef.current.classList.add(\"sticky\");\n    } else {\n      divRef && divRef.current && divRef.current.classList.remove(\"sticky\");\n    }\n  };\n\n  return (\n    <NumberStyles>\n      <div className=\"number-panel\" ref={divRef}>\n        {questionsArray.map(({ number, textBox: { hasAnswered } }) => {\n          return (\n            <React.Fragment key={number}>\n              {hasAnswered == false ? (\n                <HashLink to={`#${number}`} className=\"num-div\">\n                  {number}\n                </HashLink>\n              ) : (\n                <HashLink to={`#${number}`} className=\"num-div has-answered\">\n                  {number}\n                </HashLink>\n              )}\n            </React.Fragment>\n          );\n        })}\n      </div>\n    </NumberStyles>\n  );\n};\n\nexport default QuestionNumberDiv;\n","/app/src/common/essayQuestionComponent.js",["646","647"],"import React, { useState, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport VideoComponent from \"../common/videoComponent\";\nimport AudioComponent from \"../common/audioComponent\";\nimport ImageComponent from \"../common/imageComponent\";\nimport settings from \"../config\";\n\n\nconst baseUrl = settings.API_URL;\nconst EssayComponentStyles = styled.div`\n  .number {\n    font-size: 20px;\n  }\n  .div-panel {\n    border: 1px solid #c0c0c0;\n    padding: 20px;\n    margin-bottom: 20px;\n  }\n  .question-panel {\n    display: flex;\n  }\n  .question-divs {\n    margin-left: 40px;\n    font-size: 20px;\n  }\n  .media {\n    margin-left: 40px;\n  }\n\n  .clue {\n    font-size: 16px;\n    color: #082b79;\n  }\n\n  input {\n    border-top-style: hidden;\n    border-right-style: hidden;\n    border-left-style: hidden;\n    border-bottom-style: groove;\n    border-bottom: 2px solid black;\n    width: 50%;\n    background: none;\n  }\n\n  .no-outline:focus {\n    outline: none;\n    padding: 10px;\n  }\n  .clue {\n    font-size: 20px;\n    margin: 20px 0px;\n  }\n  .hideMe{\n      display: none;\n  }\n`;\n\nconst setHtml = (html) => {\n  return { __html: html };\n};\n\nconst EssayExamQuestionComponent = ({\n  data: {\n    number,\n    question,\n    clue,\n    mediaUrl,\n    mediaType,\n    index,\n    textBox: { value },\n    onChangeText,\n  },\n}) => {\n\n\n  const onTextAnswerChange = (e, index) => {\n    const text = e.target.value;\n    onChangeText({ value: text, index });\n  };\n\n  return (\n    <EssayComponentStyles>\n      <div className=\"card div-panel\" id={`${index+ 1}`}>\n        <div className=\"question-panel\">\n          <div className=\"number\">{number}.</div>\n          <div\n            className=\"question-divs\"\n            dangerouslySetInnerHTML={setHtml(question)}\n          />\n        </div>\n        {mediaType && (\n          <div className=\"media\">\n            {mediaType === \"video\" && (\n              <VideoComponent src={`${baseUrl}/${mediaUrl}`} type={mediaType} />\n            )}\n            {mediaType === \"audio\" && (\n              <AudioComponent src={`${baseUrl}/${mediaUrl}`} type={mediaType} />\n            )}\n\n            {mediaType === \"image\" && (\n              <ImageComponent src={`${baseUrl}/${mediaUrl}`} />\n            )}\n          </div>\n        )}\n\n        <input\n          type=\"text\"\n          className=\"no-outline\"\n          placeholder=\"type your answer here....\"\n          value={value}\n          onChange={(e) => onTextAnswerChange(e, index)}\n        />\n\n        <div className=\"clue\">\n          {clue && (\n            <p className=\"clue\">\n              Question clue:{\" \"}\n              <b>\n                <i>{clue}</i>\n              </b>\n            </p>\n          )}\n        </div>\n\n      </div>\n    </EssayComponentStyles>\n  );\n};\n\nexport default EssayExamQuestionComponent;\n","/app/src/common/videoComponent.js",[],"/app/src/common/audioComponent.js",[],"/app/src/common/imageComponent.js",["648"],"import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ImageStyles = styled.div`\n  margin-bottom: 10px;\n  .img{\n    width: 240px;\n  }\n`;\n\nconst ImageComponent = ({ src }) => {\n  return (\n    <ImageStyles>\n      <img src={src} className=\"img\" />\n    </ImageStyles>\n  );\n};\n\nexport default ImageComponent;\n","/app/src/methods/markEssayExamination.js",[],"/app/src/components/essayExamSummary.js",["649"],"/app/src/components/displayEssayScriptComponent.js",["650","651"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { GetCanidateExamResult } from \"../graphql/queries\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport Loading from \"../common/loading\";\nimport DisplayEssayScriptComponent from \"../common/displayEssayScript\";\n\n\nconst DisplayEssayScriptStyles = styled.div`\n  p {\n    font-size: 18px;\n  }\n  .question {\n    font-size: 16px;\n  }\n  span {\n    padding-left: 50px;\n  }\n  .question-panel {\n    display: flex;\n    font-size: 16px;\n  }\n  .question-divs {\n    padding-left: 20px;\n  }\n  .details {\n    background-color: #0b2f27;\n    color: #fff;\n    padding: 30px;\n  }\n  .text-name {\n    color: #7abbff !important;\n  }\n  .spanDetails {\n    float: right;\n    font-weight: bold;\n    color: #7c23f3;\n  }\n  .score {\n    font-size: 35px;\n    text-align: center;\n  }\n`;\n\n\nconst DisplayQuizScriptComponent = () => {\n  const match = useRouteMatch(\"/essay_examination_script/:examId\");\n  const [processing, setProcessing] = useState(false);\n  const [errors, setErrors] = useState(null);\n  const [scripts, setScripts] = useState(null);\n  const [nodata, setNoData] = useState(null);\n  const [getScriptFunction, getScriptResult] = useLazyQuery(\n    GetCanidateExamResult,\n    {\n      variables: {\n        examId: match.params.examId,\n      },\n    }\n  );\n\n  useEffect(() => {\n    setProcessing(!processing);\n    getScriptFunction();\n  }, []);\n\n  useEffect(() => {\n    if (getScriptResult.data) {\n      const scriptsData = getScriptResult.data.getExamOfCanidate;\n      if (scriptsData) {\n        setScripts(scriptsData);\n      } else {\n        setNoData(true);\n      }\n      setProcessing(!processing);\n    }\n    if (getScriptResult.error) {\n      const message = getScriptResult.error.message;\n      setProcessing(!processing);\n      setErrors(message);\n    }\n  }, [getScriptResult.loading, getScriptResult.data, getScriptResult.error]);\n\n  return (\n    <DisplayEssayScriptStyles>\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          {errors && <p className=\"text-center lead text-danger\">{errors}</p>}\n\n          {processing && (\n            <div className=\"text-center\">\n              <Loading />\n            </div>\n          )}\n\n          {nodata && (\n            <div className=\"text-center\">\n              <p className=\"lead text-info\">\n                No examination matching that query\n              </p>\n            </div>\n          )}\n\n          {\n            scripts && (\n              <React.Fragment>\n                <DisplayEssayScriptComponent scripts={scripts} />\n              </React.Fragment>\n            )\n            /* end of scripts matter here */\n          }\n        </div>\n      </div>\n    </DisplayEssayScriptStyles>\n  );\n};\n\nexport default DisplayQuizScriptComponent;\n","/app/src/common/displayEssayScript.js",[],"/app/src/components/viewEssayExaminationScripts.js",[],"/app/src/components/loadEssayQuestions.js",["652","653","654","655","656","657"],"import React, { useEffect, useState } from \"react\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport {\n  GetDifferentExamination,\n  GetAllEssayQuestions,\n} from \"../graphql/queries\";\nimport { DeleteOneEssayQuestion } from \"../graphql/mutation\";\nimport { useLocation } from \"react-router-dom\";\nimport Loading from \"../common/loading\";\nimport styled from \"styled-components\";\nimport methods from \"../methods\";\n\nconst LoadQuestionsStyle = styled.div``;\n\nconst buttonsToDisplay = (total, numberPerPage) => {\n  const buttonNumber = +total / +numberPerPage;\n  let array = [];\n  array.length = Math.ceil(buttonNumber);\n  return array.fill(1);\n};\n\nconst LoadQuestionsComponent = ({ history }) => {\n  const [examType, setExamType] = useState([]);\n  const [loadingData, setLoading] = useState(false);\n  const [selectedExamId, setSelectedExamId] = useState(\"\");\n  const [selectedExamName, setSelectedExamName] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [questions, setQuestions] = useState({});\n  const [totalQuestion, setTotalQuestion] = useState(0);\n  const [queryRan, setQueryRan] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n  const location = useLocation();\n  const details = location.state && location.state.details;\n  const [questionsQuery, questionsQueryResult] = useLazyQuery(\n    GetAllEssayQuestions\n  );\n  const [examsQuery, examsQueryResult] = useLazyQuery(GetDifferentExamination);\n\n  const [deleteQuestion, deleteQuestionResult] = useMutation(\n    DeleteOneEssayQuestion\n  );\n\n  useEffect(() => {\n    examsQuery({\n      variables: {\n        examType: \"short answer exam\",\n      },\n    });\n  }, []);\n\n  useEffect(() => {\n    if (examsQueryResult.data) {\n      setExamType(examsQueryResult.data.getExamByType);\n      setLoading(false);\n    }\n\n    if (examsQueryResult.loading) {\n      setLoading(true);\n    }\n\n    if (examsQueryResult.error) {\n      setErrors(examsQueryResult.error.message);\n      setLoading(false);\n    }\n  }, [examsQueryResult.data, examsQueryResult.error]);\n\n  useEffect(() => {\n    if (questionsQueryResult.error) {\n      setErrors(questionsQueryResult.error.message);\n      setLoading(true);\n      setQueryRan(!queryRan);\n    }\n\n    if (questionsQueryResult.data) {\n      setQuestions(questionsQueryResult.data.getAllEssayQuestions.questions);\n      setTotalQuestion(\n        questionsQueryResult.data.getAllEssayQuestions.totalQuestion\n      );\n      setLoading(false);\n    }\n  }, [questionsQueryResult.error, questionsQueryResult.data]);\n\n  useEffect(() => {\n    if (deleteQuestionResult.error) {\n      setErrors(deleteQuestionResult.error.message);\n      setLoading(true);\n      setSubmitted(false);\n    }\n\n    if (deleteQuestionResult.data) {\n      if (deleteQuestionResult.data.deleteEssayQuestion) {\n        window.alert(\"question deleted successfully\");\n        setLoading(false);\n        setSubmitted(false);\n      }\n    }\n  }, [deleteQuestionResult.error, deleteQuestionResult.data]);\n\n  const getMoreQuestions = (e, index) => {\n    try {\n      e.stopPropagation();\n      e.preventDefault();\n      setLoading(true);\n      setQueryRan(!queryRan);\n      questionsQueryResult.fetchMore({\n        variables: {\n          examId: selectedExamId,\n          offset: questions.length * (index - 1),\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult) return prev;\n          return Object.assign({}, prev, {\n            getAllEssayQuestions: {\n              totalQuestion: fetchMoreResult.getAllEssayQuestions.totalQuestion,\n              __typename: \"QuestionsTotal\",\n              questions: [\n                //...prev.getAllQuestions.questions,\n                ...fetchMoreResult.getAllEssayQuestions.questions,\n              ],\n            },\n          });\n        },\n      });\n    } catch (error) {}\n  };\n\n  const handleExamChange = async (e) => {\n    const value = e.target.value;\n    if (value == \"0\") return;\n    const splitValue = value.split(\"/\");\n    setSelectedExamId(splitValue[0]);\n    setSelectedExamName(splitValue[1]);\n    try {\n      setQueryRan(!queryRan);\n      questionsQuery({\n        variables: {\n          examId: splitValue[0],\n          offset: 0,\n        },\n        fetchPolicy: \"cache-and-network\",\n      });\n    } catch (error) {}\n  };\n\n  const handleEditEssay = ({\n    mediaType,\n    mediaUrl,\n    possibleAnswers,\n    clue,\n    question,\n    id,\n    examId\n  }) => {\n    history.push(\"/edit_essay_question\", {\n      questionData: {\n        mediaType,\n        mediaUrl,\n        possibleAnswers,\n        clue,\n        question,\n        id,\n        examId\n      },\n    });\n  };\n\n  const handleQuestionDeleteAction = async ({ questionId, index }) => {\n    const confirmDelete = window.confirm(\"Are you sure?\");\n    if (!confirmDelete) return;\n    //delete the question here\n    try {\n      setSubmitted(true);\n      setLoading(true);\n      await deleteQuestion({\n        variables: {\n          questionId,\n        },\n        refetchQueries: [\n          {\n            query: GetAllEssayQuestions,\n            variables: {\n              examId: selectedExamId,\n              offset: questions.length * (index - 1),\n            },\n          },\n        ],\n      });\n    } catch (error) {}\n  };\n\n  return (\n    <LoadQuestionsStyle>\n      <div className=\"row\">\n        <div className=\"col-md-8 offset-md-2\">\n          {errors && <p className=\"lead text-danger\">Error: {errors}</p>}\n          <div className=\"form-group\">\n            <select className=\"custom-select\" onChange={handleExamChange}>\n              <option value=\"0\">select examination type</option>\n              {examsQueryResult.loading && <option>loading data.......</option>}\n              {examType &&\n                examType.length > 0 &&\n                examType.map(({ id, examName }) => {\n                  return (\n                    <option value={`${id}/${examName}`} key={id}>\n                      {examName}\n                    </option>\n                  );\n                })}\n            </select>\n          </div>\n\n          <div className=\"form-group\">\n            {selectedExamName && (\n              <p className=\"lead\">\n                Selected Examination:{\" \"}\n                <span>\n                  {selectedExamName && selectedExamName.toUpperCase()}\n                </span>\n              </p>\n            )}\n          </div>\n\n          {questions && questions.length > 0 ? (\n            <table className=\"table\">\n              <caption>Short Essay Questions</caption>\n              <thead className=\"thead-dark\">\n                <tr>\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">Question</th>\n                  <th scope=\"col\">Possible Answer</th>\n                  <th scope=\"col\">Clue</th>\n                  <th scope=\"col\">Media Type</th>\n                  <th scope=\"col\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {questions.map(\n                  (\n                    {\n                      question,\n                      clue,\n                      possibleAnswers,\n                      id,\n                      examinationType,\n                      examId,\n                      mediaType,\n                      mediaUrl,\n                    },\n                    index\n                  ) => {\n                    return (\n                      <tr key={index}>\n                        <th scope=\"row\">{index + 1}</th>\n                        <td>\n                          <div\n                            className=\"question-divs\"\n                            dangerouslySetInnerHTML={methods.Utils.SetHtml(\n                              question\n                            )}\n                          />\n                        </td>\n                        <td>\n                          {possibleAnswers.map((ans) => {\n                            return <p key={ans}>{ans}</p>;\n                          })}\n                        </td>\n                        <td>\n                          <p>{clue}</p>\n                        </td>\n                        <td>\n                          <p>{mediaType ? mediaType : \"none\"}</p>\n                        </td>\n                        <td>\n                          <div\n                            className=\"btn-group\"\n                            role=\"group\"\n                            aria-label=\"Basic example\"\n                          >\n                            <button\n                              type=\"button\"\n                              className=\"btn btn-warning\"\n                              onClick={() =>\n                                handleEditEssay({\n                                  mediaType,\n                                  mediaUrl,\n                                  possibleAnswers,\n                                  clue,\n                                  question,\n                                  id,\n                                  examinationType,\n                                  examId,\n                                  index: index + 1,\n                                  questionsLength: questions.length,\n                                })\n                              }\n                            >\n                              Edit\n                            </button>\n                            <button\n                              disabled={submitted}\n                              type=\"button\"\n                              onClick={() =>\n                                handleQuestionDeleteAction({\n                                  questionId: id,\n                                  index: index + 1,\n                                })\n                              }\n                              className=\"btn btn-danger\"\n                            >\n                              {submitted ? \"please wait...\" : \"Delete\"}\n                            </button>\n                          </div>\n                        </td>\n                      </tr>\n                    );\n                  }\n                )}\n              </tbody>\n            </table>\n          ) : (\n            <div>\n              {queryRan && (\n                <p>\n                  No questions saved yet for the selected examination;{\" \"}\n                  {selectedExamName}\n                </p>\n              )}\n            </div>\n          )}\n\n          {loadingData && <Loading />}\n\n          <nav aria-label=\"Page navigation example\">\n            <ul className=\"pagination\">\n              {totalQuestion > 20 &&\n                buttonsToDisplay(totalQuestion, 20).map((_, index) => {\n                  return (\n                    <li\n                      className=\"page-item\"\n                      key={index}\n                      onClick={(e) => getMoreQuestions(e, index + 1)}\n                    >\n                      <a className=\"page-link\" href=\"\">\n                        {index + 1}\n                      </a>\n                    </li>\n                  );\n                })}\n            </ul>\n          </nav>\n        </div>\n      </div>\n    </LoadQuestionsStyle>\n  );\n};\n\nexport default LoadQuestionsComponent;\n","/app/src/components/editEssayQuestions.js",["658","659","660","661","662","663","664","665","666"],"import React, { useEffect, useState, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport DraftJsToolBar from \"../common/draftJSToolBar\";\nimport draftToHtml from \"draftjs-to-html\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport { EditEssayQuestion, DeleteMedia } from \"../graphql/mutation\";\nimport { GetAllEssayQuestions } from \"../graphql/queries\";\nimport {\n  EditorState,\n  convertToRaw,\n  ContentState,\n  convertFromHTML,\n} from \"draft-js\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport AudioComponent from \"../common/audioComponent\";\nimport VideoComponent from \"../common/videoComponent\";\nimport ImageComponent from \"../common/imageComponent\";\nimport settings from \"../config\";\n\nconst baseUrl = settings.API_URL;\n\nconst SaveEssayQuestionStyles = styled.div`\n  .write-question {\n    background-color: #c0c0c0;\n    margin-bottom: 20px;\n    padding: 10px;\n  }\n  .possible-span {\n    padding: 5px;\n    display: inline-block;\n    background-color: #063c16;\n    margin-top: 10px;\n    margin-right: 10px;\n    cursor: pointer;\n    color: #fff;\n    border-radius: 0px 10px;\n  }\n  .file-details {\n    padding: 20px;\n    width: 30%;\n  }\n  .custom-width {\n    width: 50%;\n  }\n  .media-div {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-wrap: wrap;\n  }\n`;\n\nconst SaveEssayQuestionComponent = () => {\n  const [essayQuestion, setQuestion] = useState(null);\n  const [preview, setPreview] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [clue, setClue] = useState(\"\");\n  const [possibleAnswers, setPossibleAnswers] = useState([]);\n  const [mediaType, setMediaType] = useState(\"\");\n  const [oldmediaType, setOldMediaType] = useState(\"\");\n  const [oldmediaUrl, setOldMediaUrl] = useState(\"\");\n  const [fileDetails, setFileDetails] = useState(null);\n  const [file, setFile] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [submitted, setSubmitted] = useState(false);\n  const [questionId, setQuestionId] = useState(null);\n  const [examId, setExamId] = useState(null);\n\n  const textAnswer = useRef();\n  const fileRef = useRef();\n\n  const [editQuestionFunc, editQuestionResult] = useMutation(EditEssayQuestion);\n  const [deleteMediaQuestionFunc, deleteMediaResult] = useMutation(DeleteMedia);\n\n  const [questionsQuery, questionsQueryResult] = useLazyQuery(\n    GetAllEssayQuestions\n  );\n\n  const location = useLocation();\n  const history = useHistory();\n  const questionData = location.state && location.state.questionData;\n\n  useEffect(() => {\n    if (questionData) {\n      const {\n        mediaType,\n        mediaUrl,\n        possibleAnswers,\n        clue,\n        question,\n        id,\n        examId,\n      } = questionData;\n      const blocksFromHTML = convertFromHTML(question);\n      const content = ContentState.createFromBlockArray(\n        blocksFromHTML.contentBlocks,\n        blocksFromHTML.entityMap\n      );\n      setQuestion(EditorState.createWithContent(content));\n      setPreview(question);\n      setPossibleAnswers(possibleAnswers);\n      setClue(clue);\n      setOldMediaType(mediaType);\n      setOldMediaUrl(mediaUrl);\n      setQuestionId(id);\n      setExamId(examId);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (deleteMediaResult.error) {\n      setErrors(deleteMediaResult.error.message);\n    }\n    if (deleteMediaResult.data) {\n      //we have a successful delete\n      //load the mediatype here\n      window.alert(\"media file removed successfully\");\n      setOldMediaType(null);\n      setOldMediaUrl(null);\n    }\n  }, [deleteMediaResult.error, deleteMediaResult.data]);\n\n  useEffect(() => {\n    if (editQuestionResult.error) {\n      setSubmitted(false);\n      setErrors(editQuestionResult.error.message);\n    }\n    if (editQuestionResult.data) {\n      window.alert(\"question edited successfully.\");\n      //make a redirect here\n      history.push(\"/load_essay_question\");\n    }\n  }, [editQuestionResult.data, editQuestionResult.error]);\n\n  const handleChange = (editorState) => {\n    let html = draftToHtml(convertToRaw(editorState.getCurrentContent()));\n    setQuestion(editorState);\n    setPreview(html);\n  };\n\n  const setHtml = (html) => {\n    return { __html: html };\n  };\n\n  const handleTextChange = (e) => {\n    const value = e.target.value;\n    if (value.lastIndexOf(\",\") != -1) {\n      const oldValues = [...possibleAnswers];\n      const valueWithoutComma = value.substr(0, value.length - 1);\n      const old = oldValues.filter((e) => e != valueWithoutComma);\n      setPossibleAnswers([...old, valueWithoutComma]);\n      setText(\"\");\n    } else {\n      setText(value);\n    }\n  };\n\n  const handleTextClueChange = (e) => {\n    const value = e.target.value;\n    setClue(value);\n  };\n\n  const removePossibleAnswer = (answer) => {\n    const oldValues = [...possibleAnswers];\n    const newValues = oldValues.filter((e) => e != answer);\n    setPossibleAnswers(newValues);\n  };\n\n  const handleMediaChange = (e) => {\n    const value = e.target.value;\n    if (value !== \"0\") {\n      setMediaType(value);\n    }\n  };\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    const { name, size, type } = file;\n    const fileType = type.split(\"/\")[0];\n    if (mediaType != fileType) {\n      window.alert(\n        `please select the correct media type: Select a ${mediaType}`\n      );\n      fileRef.current.value = \"\";\n      return;\n      //remove the reference\n    }\n    setFile(file);\n    setFileDetails({\n      name,\n      size,\n      type,\n    });\n  };\n\n  const submitQuestionToDB = async () => {\n    if (!preview) {\n      return window.alert(\n        \"we can not save a question without the actual question. can we ?\"\n      );\n    }\n    if (possibleAnswers.length == 0) {\n      return window.alert(\"please enter possible answers for the question\");\n    }\n\n    try {\n      let inputQuestion = {\n        question: preview,\n        clue: clue,\n        possibleAnswers: possibleAnswers,\n        id: questionId,\n      };\n      if (mediaType) {\n        inputQuestion.mediaType = mediaType;\n        inputQuestion.mediaFile = file;\n      }\n      const examinationId = examId;\n      setSubmitted(true);\n      await editQuestionFunc({\n        variables: {\n          input: inputQuestion,\n        },\n        refetchQueries: [\n          {\n            query: GetAllEssayQuestions,\n            variables: {\n              examId: examinationId,\n              offset: 0,\n            },\n          },\n        ],\n      });\n    } catch (error) {}\n  };\n\n  const deleteMediaFromFile = async () => {\n    const confirmDelete = window.confirm(\"Are you sure?\");\n    if (!confirmDelete) return;\n    try {\n      await deleteMediaQuestionFunc({\n        variables: {\n          questionId: questionId,\n          mediaUrl: oldmediaUrl,\n        },\n      });\n    } catch (error) {}\n  };\n\n  return (\n    <SaveEssayQuestionStyles>\n      <div className=\"row\">\n        <div className=\"col-md-8 offset-md-2\">\n          <h3 className=\"text-center\">Editing Questions</h3>\n          {errors && <p className=\"text-danger lead\">{errors}</p>}\n\n          <div>\n            <p>\n              <b> Preview of the question</b>\n            </p>\n          </div>\n          <div className=\"\" dangerouslySetInnerHTML={setHtml(preview)} />\n\n          <h4> Type Question</h4>\n\n          <Editor\n            editorState={essayQuestion}\n            onEditorStateChange={handleChange}\n            editorClassName=\"write-question\"\n            placeholder=\"Type your question here.....\"\n            toolbar={DraftJsToolBar}\n          />\n\n          <div className=\"form-group\">\n            <label className=\"form-label\">Possible answers</label>\n\n            <input\n              type=\"text\"\n              className=\"form-control custom-width\"\n              aria-label=\"With textarea\"\n              value={text}\n              onChange={handleTextChange}\n              ref={textAnswer}\n            />\n            <small className=\"form-text text-muted\">\n              Type each possible answer seperated by a comma (,)\n            </small>\n          </div>\n\n          {possibleAnswers.map((answer, index) => {\n            return (\n              <span\n                key={index}\n                className=\"possible-span\"\n                onClick={() => removePossibleAnswer(answer)}\n              >\n                {answer}\n              </span>\n            );\n          })}\n\n          <div className=\"form-group\">\n            <label className=\"form-label\">Answer clues </label>\n\n            <textarea\n              className=\"form-control custom-width\"\n              aria-label=\"With textarea\"\n              value={clue}\n              onChange={handleTextClueChange}\n            ></textarea>\n          </div>\n\n          {!oldmediaType && (\n            <React.Fragment>\n              <div className=\"form-group\">\n                <label className=\"form-label\">Media Type</label>\n                <select\n                  className=\"custom-width form-control\"\n                  onChange={handleMediaChange}\n                  value={mediaType}\n                >\n                  <option value=\"0\">select media type</option>\n                  <option value=\"video\">video</option>\n                  <option value=\"audio\">audio</option>\n                  <option value=\"image\">image</option>\n                </select>\n              </div>\n\n              <div className=\"form-group\">\n                <input\n                  type=\"file\"\n                  ref={fileRef}\n                  className=\"file-input\"\n                  onChange={handleFileChange}\n                />\n              </div>\n\n              {fileDetails && (\n                <div className=\"file-details\">\n                  <p>file name: {fileDetails.name}</p>\n\n                  <p>file type: {fileDetails.type}</p>\n\n                  <p>file size: {+fileDetails.size / 1000} KB</p>\n                </div>\n              )}\n            </React.Fragment>\n          )}\n\n          <div className=\"media-div\">\n            {oldmediaType === \"audio\" && (\n              <React.Fragment>\n                <AudioComponent src={`${baseUrl}/${oldmediaUrl}`} />\n                <button\n                  className=\"btn btn-danger\"\n                  onClick={deleteMediaFromFile}\n                >\n                  delete media\n                </button>\n              </React.Fragment>\n            )}\n\n            {oldmediaType === \"video\" && (\n              <React.Fragment>\n                <VideoComponent src={`${baseUrl}/${oldmediaUrl}`} />\n\n                <button\n                  className=\"btn btn-danger\"\n                  onClick={deleteMediaFromFile}\n                >\n                  delete media\n                </button>\n              </React.Fragment>\n            )}\n\n            {oldmediaType === \"image\" && (\n              <React.Fragment>\n                <ImageComponent src={`${baseUrl}/${oldmediaType}`} />\n                <button\n                  className=\"btn btn-danger\"\n                  onClick={deleteMediaFromFile}\n                >\n                  delete media\n                </button>\n              </React.Fragment>\n            )}\n          </div>\n\n          <div className=\"text-center mb-3\">\n            <button\n              className=\"btn btn-success\"\n              disabled={submitted}\n              onClick={submitQuestionToDB}\n            >\n              {submitted ? \"submitting please wait....\" : \"Edit Questions \"}\n            </button>\n          </div>\n        </div>\n      </div>\n    </SaveEssayQuestionStyles>\n  );\n};\n\nexport default SaveEssayQuestionComponent;\n",{"ruleId":"667","replacedBy":"668"},{"ruleId":"669","replacedBy":"670"},{"ruleId":"671","severity":1,"message":"672","line":11,"column":3,"nodeType":"673","messageId":"674","endLine":11,"endColumn":11},{"ruleId":"675","severity":1,"message":"676","line":88,"column":6,"nodeType":"677","endLine":88,"endColumn":24,"suggestions":"678"},{"ruleId":"671","severity":1,"message":"679","line":28,"column":5,"nodeType":"673","messageId":"674","endLine":28,"endColumn":13},{"ruleId":"675","severity":1,"message":"680","line":73,"column":6,"nodeType":"677","endLine":73,"endColumn":14,"suggestions":"681"},{"ruleId":"675","severity":1,"message":"682","line":106,"column":6,"nodeType":"677","endLine":110,"endColumn":4,"suggestions":"683"},{"ruleId":"671","severity":1,"message":"684","line":193,"column":10,"nodeType":"673","messageId":"674","endLine":193,"endColumn":16},{"ruleId":"671","severity":1,"message":"685","line":197,"column":10,"nodeType":"673","messageId":"674","endLine":197,"endColumn":15},{"ruleId":"686","severity":1,"message":"687","line":283,"column":13,"nodeType":"688","endLine":283,"endColumn":25},{"ruleId":"689","severity":1,"message":"690","line":286,"column":51,"nodeType":"691","messageId":"692","endLine":286,"endColumn":53},{"ruleId":"686","severity":1,"message":"693","line":288,"column":15,"nodeType":"688","endLine":288,"endColumn":18},{"ruleId":"689","severity":1,"message":"690","line":292,"column":51,"nodeType":"691","messageId":"692","endLine":292,"endColumn":53},{"ruleId":"686","severity":1,"message":"693","line":294,"column":15,"nodeType":"688","endLine":294,"endColumn":31},{"ruleId":"686","severity":1,"message":"693","line":300,"column":19,"nodeType":"688","endLine":300,"endColumn":22},{"ruleId":"686","severity":1,"message":"693","line":304,"column":19,"nodeType":"688","endLine":304,"endColumn":22},{"ruleId":"689","severity":1,"message":"690","line":310,"column":51,"nodeType":"691","messageId":"692","endLine":310,"endColumn":53},{"ruleId":"686","severity":1,"message":"693","line":312,"column":15,"nodeType":"688","endLine":312,"endColumn":31},{"ruleId":"686","severity":1,"message":"693","line":318,"column":19,"nodeType":"688","endLine":318,"endColumn":22},{"ruleId":"686","severity":1,"message":"693","line":324,"column":19,"nodeType":"688","endLine":324,"endColumn":22},{"ruleId":"689","severity":1,"message":"690","line":330,"column":51,"nodeType":"691","messageId":"692","endLine":330,"endColumn":53},{"ruleId":"686","severity":1,"message":"693","line":332,"column":15,"nodeType":"688","endLine":332,"endColumn":31},{"ruleId":"686","severity":1,"message":"693","line":338,"column":19,"nodeType":"688","endLine":338,"endColumn":22},{"ruleId":"686","severity":1,"message":"693","line":347,"column":19,"nodeType":"688","endLine":347,"endColumn":22},{"ruleId":"689","severity":1,"message":"690","line":353,"column":51,"nodeType":"691","messageId":"692","endLine":353,"endColumn":53},{"ruleId":"686","severity":1,"message":"693","line":355,"column":15,"nodeType":"688","endLine":355,"endColumn":31},{"ruleId":"686","severity":1,"message":"693","line":361,"column":19,"nodeType":"688","endLine":361,"endColumn":22},{"ruleId":"689","severity":1,"message":"690","line":367,"column":51,"nodeType":"691","messageId":"692","endLine":367,"endColumn":53},{"ruleId":"686","severity":1,"message":"693","line":369,"column":15,"nodeType":"688","endLine":369,"endColumn":31},{"ruleId":"686","severity":1,"message":"693","line":375,"column":19,"nodeType":"688","endLine":375,"endColumn":22},{"ruleId":"686","severity":1,"message":"693","line":382,"column":19,"nodeType":"688","endLine":382,"endColumn":22},{"ruleId":"689","severity":1,"message":"690","line":388,"column":51,"nodeType":"691","messageId":"692","endLine":388,"endColumn":53},{"ruleId":"686","severity":1,"message":"693","line":390,"column":15,"nodeType":"688","endLine":390,"endColumn":31},{"ruleId":"686","severity":1,"message":"693","line":396,"column":19,"nodeType":"688","endLine":396,"endColumn":22},{"ruleId":"686","severity":1,"message":"693","line":403,"column":19,"nodeType":"688","endLine":403,"endColumn":22},{"ruleId":"686","severity":1,"message":"693","line":410,"column":19,"nodeType":"688","endLine":410,"endColumn":22},{"ruleId":"689","severity":1,"message":"690","line":416,"column":51,"nodeType":"691","messageId":"692","endLine":416,"endColumn":53},{"ruleId":"686","severity":1,"message":"693","line":418,"column":15,"nodeType":"688","endLine":418,"endColumn":31},{"ruleId":"686","severity":1,"message":"693","line":424,"column":19,"nodeType":"688","endLine":424,"endColumn":22},{"ruleId":"686","severity":1,"message":"693","line":431,"column":19,"nodeType":"688","endLine":431,"endColumn":22},{"ruleId":"686","severity":1,"message":"693","line":438,"column":19,"nodeType":"688","endLine":438,"endColumn":22},{"ruleId":"689","severity":1,"message":"690","line":444,"column":51,"nodeType":"691","messageId":"692","endLine":444,"endColumn":53},{"ruleId":"686","severity":1,"message":"693","line":446,"column":15,"nodeType":"688","endLine":446,"endColumn":31},{"ruleId":"686","severity":1,"message":"693","line":452,"column":19,"nodeType":"688","endLine":452,"endColumn":22},{"ruleId":"686","severity":1,"message":"687","line":460,"column":15,"nodeType":"688","endLine":460,"endColumn":26},{"ruleId":"686","severity":1,"message":"687","line":464,"column":15,"nodeType":"688","endLine":464,"endColumn":26},{"ruleId":"686","severity":1,"message":"687","line":469,"column":13,"nodeType":"688","endLine":469,"endColumn":25},{"ruleId":"671","severity":1,"message":"694","line":56,"column":7,"nodeType":"673","messageId":"674","endLine":56,"endColumn":16},{"ruleId":"695","severity":1,"message":"696","line":57,"column":3,"nodeType":"697","messageId":"698","endLine":62,"endColumn":4},{"ruleId":"671","severity":1,"message":"699","line":88,"column":9,"nodeType":"673","messageId":"674","endLine":88,"endColumn":25},{"ruleId":"700","severity":1,"message":"701","line":12,"column":1,"nodeType":"702","endLine":23,"endColumn":3},{"ruleId":"689","severity":1,"message":"690","line":32,"column":34,"nodeType":"691","messageId":"692","endLine":32,"endColumn":36},{"ruleId":"675","severity":1,"message":"703","line":35,"column":6,"nodeType":"677","endLine":35,"endColumn":16,"suggestions":"704"},{"ruleId":"675","severity":1,"message":"705","line":40,"column":6,"nodeType":"677","endLine":40,"endColumn":8,"suggestions":"706"},{"ruleId":"689","severity":1,"message":"690","line":54,"column":44,"nodeType":"691","messageId":"692","endLine":54,"endColumn":46},{"ruleId":"689","severity":1,"message":"690","line":55,"column":45,"nodeType":"691","messageId":"692","endLine":55,"endColumn":47},{"ruleId":"689","severity":1,"message":"690","line":56,"column":45,"nodeType":"691","messageId":"692","endLine":56,"endColumn":47},{"ruleId":"689","severity":1,"message":"690","line":29,"column":59,"nodeType":"691","messageId":"692","endLine":29,"endColumn":61},{"ruleId":"689","severity":1,"message":"690","line":65,"column":32,"nodeType":"691","messageId":"692","endLine":65,"endColumn":34},{"ruleId":"689","severity":1,"message":"690","line":73,"column":32,"nodeType":"691","messageId":"692","endLine":73,"endColumn":34},{"ruleId":"689","severity":1,"message":"690","line":81,"column":32,"nodeType":"691","messageId":"692","endLine":81,"endColumn":34},{"ruleId":"689","severity":1,"message":"690","line":74,"column":13,"nodeType":"691","messageId":"692","endLine":74,"endColumn":15},{"ruleId":"707","severity":1,"message":"708","line":100,"column":40,"nodeType":"709","messageId":"710","endLine":100,"endColumn":42},{"ruleId":"689","severity":1,"message":"690","line":119,"column":31,"nodeType":"691","messageId":"692","endLine":119,"endColumn":33},{"ruleId":"671","severity":1,"message":"711","line":1,"column":10,"nodeType":"673","messageId":"674","endLine":1,"endColumn":18},{"ruleId":"671","severity":1,"message":"712","line":2,"column":8,"nodeType":"673","messageId":"674","endLine":2,"endColumn":13},{"ruleId":"700","severity":1,"message":"701","line":9,"column":1,"nodeType":"702","endLine":17,"endColumn":3},{"ruleId":"689","severity":1,"message":"690","line":6,"column":32,"nodeType":"691","messageId":"692","endLine":6,"endColumn":34},{"ruleId":"689","severity":1,"message":"690","line":9,"column":33,"nodeType":"691","messageId":"692","endLine":9,"endColumn":35},{"ruleId":"689","severity":1,"message":"690","line":14,"column":34,"nodeType":"691","messageId":"692","endLine":14,"endColumn":36},{"ruleId":"695","severity":1,"message":"696","line":35,"column":7,"nodeType":"697","messageId":"698","endLine":89,"endColumn":8},{"ruleId":"689","severity":1,"message":"713","line":38,"column":24,"nodeType":"691","messageId":"692","endLine":38,"endColumn":26},{"ruleId":"689","severity":1,"message":"690","line":43,"column":30,"nodeType":"691","messageId":"692","endLine":43,"endColumn":32},{"ruleId":"689","severity":1,"message":"690","line":54,"column":30,"nodeType":"691","messageId":"692","endLine":54,"endColumn":32},{"ruleId":"689","severity":1,"message":"690","line":66,"column":30,"nodeType":"691","messageId":"692","endLine":66,"endColumn":32},{"ruleId":"689","severity":1,"message":"690","line":76,"column":30,"nodeType":"691","messageId":"692","endLine":76,"endColumn":32},{"ruleId":"689","severity":1,"message":"713","line":87,"column":24,"nodeType":"691","messageId":"692","endLine":87,"endColumn":26},{"ruleId":"689","severity":1,"message":"690","line":95,"column":28,"nodeType":"691","messageId":"692","endLine":95,"endColumn":30},{"ruleId":"689","severity":1,"message":"690","line":97,"column":28,"nodeType":"691","messageId":"692","endLine":97,"endColumn":30},{"ruleId":"700","severity":1,"message":"701","line":135,"column":1,"nodeType":"702","endLine":135,"endColumn":52},{"ruleId":"675","severity":1,"message":"714","line":68,"column":6,"nodeType":"677","endLine":68,"endColumn":61,"suggestions":"715"},{"ruleId":"675","severity":1,"message":"714","line":86,"column":6,"nodeType":"677","endLine":86,"endColumn":77,"suggestions":"716"},{"ruleId":"689","severity":1,"message":"690","line":90,"column":15,"nodeType":"691","messageId":"692","endLine":90,"endColumn":17},{"ruleId":"689","severity":1,"message":"690","line":130,"column":19,"nodeType":"691","messageId":"692","endLine":130,"endColumn":21},{"ruleId":"707","severity":1,"message":"708","line":156,"column":36,"nodeType":"709","messageId":"710","endLine":156,"endColumn":38},{"ruleId":"707","severity":1,"message":"708","line":7,"column":33,"nodeType":"709","messageId":"710","endLine":7,"endColumn":35},{"ruleId":"689","severity":1,"message":"690","line":50,"column":13,"nodeType":"691","messageId":"692","endLine":50,"endColumn":15},{"ruleId":"700","severity":1,"message":"701","line":82,"column":1,"nodeType":"702","endLine":91,"endColumn":3},{"ruleId":"667","replacedBy":"717"},{"ruleId":"669","replacedBy":"718"},{"ruleId":"675","severity":1,"message":"719","line":88,"column":6,"nodeType":"677","endLine":88,"endColumn":57,"suggestions":"720"},{"ruleId":"675","severity":1,"message":"714","line":102,"column":6,"nodeType":"677","endLine":102,"endColumn":69,"suggestions":"721"},{"ruleId":"675","severity":1,"message":"722","line":116,"column":6,"nodeType":"677","endLine":116,"endColumn":28,"suggestions":"723"},{"ruleId":"689","severity":1,"message":"690","line":119,"column":19,"nodeType":"691","messageId":"692","endLine":119,"endColumn":21},{"ruleId":"689","severity":1,"message":"690","line":126,"column":15,"nodeType":"691","messageId":"692","endLine":126,"endColumn":17},{"ruleId":"675","severity":1,"message":"724","line":138,"column":20,"nodeType":"673","endLine":138,"endColumn":27},{"ruleId":"675","severity":1,"message":"725","line":164,"column":6,"nodeType":"677","endLine":164,"endColumn":8,"suggestions":"726"},{"ruleId":"689","severity":1,"message":"690","line":178,"column":14,"nodeType":"691","messageId":"692","endLine":178,"endColumn":16},{"ruleId":"689","severity":1,"message":"690","line":197,"column":69,"nodeType":"691","messageId":"692","endLine":197,"endColumn":71},{"ruleId":"707","severity":1,"message":"708","line":201,"column":28,"nodeType":"709","messageId":"710","endLine":201,"endColumn":30},{"ruleId":"689","severity":1,"message":"690","line":234,"column":61,"nodeType":"691","messageId":"692","endLine":234,"endColumn":63},{"ruleId":"689","severity":1,"message":"690","line":269,"column":61,"nodeType":"691","messageId":"692","endLine":269,"endColumn":63},{"ruleId":"671","severity":1,"message":"727","line":2,"column":10,"nodeType":"673","messageId":"674","endLine":2,"endColumn":18},{"ruleId":"675","severity":1,"message":"728","line":40,"column":6,"nodeType":"677","endLine":40,"endColumn":8,"suggestions":"729"},{"ruleId":"675","severity":1,"message":"730","line":56,"column":6,"nodeType":"677","endLine":56,"endColumn":53,"suggestions":"731"},{"ruleId":"675","severity":1,"message":"732","line":72,"column":6,"nodeType":"677","endLine":72,"endColumn":61,"suggestions":"733"},{"ruleId":"689","severity":1,"message":"690","line":118,"column":15,"nodeType":"691","messageId":"692","endLine":118,"endColumn":17},{"ruleId":"686","severity":1,"message":"687","line":243,"column":23,"nodeType":"688","endLine":243,"endColumn":56},{"ruleId":"671","severity":1,"message":"727","line":2,"column":10,"nodeType":"673","messageId":"674","endLine":2,"endColumn":18},{"ruleId":"675","severity":1,"message":"734","line":60,"column":6,"nodeType":"677","endLine":60,"endColumn":71,"suggestions":"735"},{"ruleId":"675","severity":1,"message":"734","line":75,"column":6,"nodeType":"677","endLine":75,"endColumn":77,"suggestions":"736"},{"ruleId":"675","severity":1,"message":"734","line":90,"column":6,"nodeType":"677","endLine":90,"endColumn":61,"suggestions":"737"},{"ruleId":"689","severity":1,"message":"690","line":98,"column":26,"nodeType":"691","messageId":"692","endLine":98,"endColumn":28},{"ruleId":"689","severity":1,"message":"690","line":101,"column":24,"nodeType":"691","messageId":"692","endLine":101,"endColumn":26},{"ruleId":"689","severity":1,"message":"690","line":104,"column":15,"nodeType":"691","messageId":"692","endLine":104,"endColumn":17},{"ruleId":"689","severity":1,"message":"690","line":104,"column":32,"nodeType":"691","messageId":"692","endLine":104,"endColumn":34},{"ruleId":"695","severity":1,"message":"696","line":171,"column":5,"nodeType":"697","messageId":"698","endLine":184,"endColumn":6},{"ruleId":"671","severity":1,"message":"738","line":42,"column":10,"nodeType":"673","messageId":"674","endLine":42,"endColumn":16},{"ruleId":"675","severity":1,"message":"739","line":98,"column":6,"nodeType":"677","endLine":98,"endColumn":47,"suggestions":"740"},{"ruleId":"675","severity":1,"message":"739","line":112,"column":6,"nodeType":"677","endLine":112,"endColumn":63,"suggestions":"741"},{"ruleId":"675","severity":1,"message":"742","line":129,"column":6,"nodeType":"677","endLine":129,"endColumn":69,"suggestions":"743"},{"ruleId":"675","severity":1,"message":"742","line":146,"column":6,"nodeType":"677","endLine":149,"endColumn":4,"suggestions":"744"},{"ruleId":"689","severity":1,"message":"690","line":162,"column":22,"nodeType":"691","messageId":"692","endLine":162,"endColumn":24},{"ruleId":"695","severity":1,"message":"696","line":198,"column":5,"nodeType":"697","messageId":"698","endLine":260,"endColumn":6},{"ruleId":"745","severity":1,"message":"746","line":235,"column":7,"nodeType":"747","messageId":"748","endLine":259,"endColumn":10},{"ruleId":"695","severity":1,"message":"696","line":270,"column":7,"nodeType":"697","messageId":"698","endLine":277,"endColumn":8},{"ruleId":"689","severity":1,"message":"690","line":306,"column":15,"nodeType":"691","messageId":"692","endLine":306,"endColumn":17},{"ruleId":"695","severity":1,"message":"696","line":45,"column":5,"nodeType":"697","messageId":"698","endLine":59,"endColumn":6},{"ruleId":"675","severity":1,"message":"749","line":60,"column":6,"nodeType":"677","endLine":60,"endColumn":14,"suggestions":"750"},{"ruleId":"675","severity":1,"message":"732","line":75,"column":6,"nodeType":"677","endLine":75,"endColumn":61,"suggestions":"751"},{"ruleId":"675","severity":1,"message":"732","line":96,"column":6,"nodeType":"677","endLine":96,"endColumn":77,"suggestions":"752"},{"ruleId":"686","severity":1,"message":"687","line":201,"column":19,"nodeType":"688","endLine":201,"endColumn":52},{"ruleId":"686","severity":1,"message":"687","line":217,"column":19,"nodeType":"688","endLine":217,"endColumn":52},{"ruleId":"671","severity":1,"message":"684","line":11,"column":10,"nodeType":"673","messageId":"674","endLine":11,"endColumn":16},{"ruleId":"671","severity":1,"message":"753","line":12,"column":10,"nodeType":"673","messageId":"674","endLine":12,"endColumn":21},{"ruleId":"671","severity":1,"message":"685","line":13,"column":10,"nodeType":"673","messageId":"674","endLine":13,"endColumn":15},{"ruleId":"675","severity":1,"message":"754","line":73,"column":6,"nodeType":"677","endLine":73,"endColumn":34,"suggestions":"755"},{"ruleId":"689","severity":1,"message":"690","line":48,"column":13,"nodeType":"691","messageId":"692","endLine":48,"endColumn":15},{"ruleId":"671","severity":1,"message":"756","line":64,"column":10,"nodeType":"673","messageId":"674","endLine":64,"endColumn":21},{"ruleId":"689","severity":1,"message":"690","line":78,"column":58,"nodeType":"691","messageId":"692","endLine":78,"endColumn":60},{"ruleId":"695","severity":1,"message":"696","line":91,"column":9,"nodeType":"697","messageId":"698","endLine":105,"endColumn":10},{"ruleId":"689","severity":1,"message":"690","line":106,"column":67,"nodeType":"691","messageId":"692","endLine":106,"endColumn":69},{"ruleId":"675","severity":1,"message":"757","line":121,"column":6,"nodeType":"677","endLine":125,"endColumn":4,"suggestions":"758"},{"ruleId":"675","severity":1,"message":"734","line":141,"column":6,"nodeType":"677","endLine":141,"endColumn":28,"suggestions":"759"},{"ruleId":"671","severity":1,"message":"711","line":1,"column":10,"nodeType":"673","messageId":"674","endLine":1,"endColumn":18},{"ruleId":"689","severity":1,"message":"690","line":11,"column":35,"nodeType":"691","messageId":"692","endLine":11,"endColumn":37},{"ruleId":"689","severity":1,"message":"690","line":18,"column":36,"nodeType":"691","messageId":"692","endLine":18,"endColumn":38},{"ruleId":"671","severity":1,"message":"760","line":6,"column":8,"nodeType":"673","messageId":"674","endLine":6,"endColumn":14},{"ruleId":"671","severity":1,"message":"761","line":46,"column":7,"nodeType":"673","messageId":"674","endLine":46,"endColumn":28},{"ruleId":"689","severity":1,"message":"690","line":49,"column":13,"nodeType":"691","messageId":"692","endLine":49,"endColumn":15},{"ruleId":"675","severity":1,"message":"762","line":73,"column":6,"nodeType":"677","endLine":73,"endColumn":8,"suggestions":"763"},{"ruleId":"675","severity":1,"message":"734","line":90,"column":6,"nodeType":"677","endLine":90,"endColumn":76,"suggestions":"764"},{"ruleId":"671","severity":1,"message":"765","line":92,"column":9,"nodeType":"673","messageId":"674","endLine":92,"endColumn":16},{"ruleId":"675","severity":1,"message":"766","line":61,"column":6,"nodeType":"677","endLine":61,"endColumn":76,"suggestions":"767"},{"ruleId":"675","severity":1,"message":"734","line":44,"column":6,"nodeType":"677","endLine":49,"endColumn":4,"suggestions":"768"},{"ruleId":"689","severity":1,"message":"690","line":63,"column":15,"nodeType":"691","messageId":"692","endLine":63,"endColumn":17},{"ruleId":"689","severity":1,"message":"690","line":73,"column":15,"nodeType":"691","messageId":"692","endLine":73,"endColumn":17},{"ruleId":"689","severity":1,"message":"690","line":112,"column":42,"nodeType":"691","messageId":"692","endLine":112,"endColumn":44},{"ruleId":"675","severity":1,"message":"734","line":35,"column":6,"nodeType":"677","endLine":35,"endColumn":53,"suggestions":"769"},{"ruleId":"689","severity":1,"message":"690","line":26,"column":18,"nodeType":"691","messageId":"692","endLine":26,"endColumn":20},{"ruleId":"675","severity":1,"message":"734","line":36,"column":6,"nodeType":"677","endLine":36,"endColumn":57,"suggestions":"770"},{"ruleId":"689","severity":1,"message":"690","line":165,"column":51,"nodeType":"691","messageId":"692","endLine":165,"endColumn":53},{"ruleId":"689","severity":1,"message":"690","line":23,"column":55,"nodeType":"691","messageId":"692","endLine":23,"endColumn":57},{"ruleId":"675","severity":1,"message":"734","line":46,"column":6,"nodeType":"677","endLine":46,"endColumn":53,"suggestions":"771"},{"ruleId":"695","severity":1,"message":"696","line":51,"column":5,"nodeType":"697","messageId":"698","endLine":64,"endColumn":6},{"ruleId":"689","severity":1,"message":"690","line":53,"column":19,"nodeType":"691","messageId":"692","endLine":53,"endColumn":21},{"ruleId":"745","severity":1,"message":"746","line":58,"column":7,"nodeType":"747","messageId":"748","endLine":60,"endColumn":15},{"ruleId":"689","severity":1,"message":"690","line":88,"column":18,"nodeType":"691","messageId":"692","endLine":88,"endColumn":20},{"ruleId":"675","severity":1,"message":"772","line":49,"column":6,"nodeType":"677","endLine":49,"endColumn":61,"suggestions":"773"},{"ruleId":"686","severity":1,"message":"687","line":171,"column":23,"nodeType":"688","endLine":171,"endColumn":56},{"ruleId":"675","severity":1,"message":"774","line":53,"column":6,"nodeType":"677","endLine":53,"endColumn":61,"suggestions":"775"},{"ruleId":"695","severity":1,"message":"696","line":47,"column":5,"nodeType":"697","messageId":"698","endLine":61,"endColumn":6},{"ruleId":"689","severity":1,"message":"713","line":49,"column":19,"nodeType":"691","messageId":"692","endLine":49,"endColumn":21},{"ruleId":"689","severity":1,"message":"713","line":57,"column":19,"nodeType":"691","messageId":"692","endLine":57,"endColumn":21},{"ruleId":"689","severity":1,"message":"690","line":74,"column":17,"nodeType":"691","messageId":"692","endLine":74,"endColumn":19},{"ruleId":"689","severity":1,"message":"713","line":84,"column":19,"nodeType":"691","messageId":"692","endLine":84,"endColumn":21},{"ruleId":"671","severity":1,"message":"776","line":57,"column":10,"nodeType":"673","messageId":"674","endLine":57,"endColumn":21},{"ruleId":"671","severity":1,"message":"777","line":60,"column":10,"nodeType":"673","messageId":"674","endLine":60,"endColumn":26},{"ruleId":"675","severity":1,"message":"778","line":99,"column":6,"nodeType":"677","endLine":99,"endColumn":8,"suggestions":"779"},{"ruleId":"675","severity":1,"message":"780","line":107,"column":6,"nodeType":"677","endLine":107,"endColumn":8,"suggestions":"781"},{"ruleId":"675","severity":1,"message":"782","line":141,"column":6,"nodeType":"677","endLine":141,"endColumn":57,"suggestions":"783"},{"ruleId":"695","severity":1,"message":"696","line":181,"column":5,"nodeType":"697","messageId":"698","endLine":191,"endColumn":6},{"ruleId":"707","severity":1,"message":"708","line":207,"column":32,"nodeType":"709","messageId":"710","endLine":207,"endColumn":34},{"ruleId":"689","severity":1,"message":"690","line":213,"column":20,"nodeType":"691","messageId":"692","endLine":213,"endColumn":22},{"ruleId":"695","severity":1,"message":"696","line":11,"column":7,"nodeType":"697","messageId":"698","endLine":20,"endColumn":8},{"ruleId":"745","severity":1,"message":"746","line":17,"column":9,"nodeType":"747","messageId":"748","endLine":19,"endColumn":17},{"ruleId":"689","severity":1,"message":"713","line":23,"column":42,"nodeType":"691","messageId":"692","endLine":23,"endColumn":44},{"ruleId":"689","severity":1,"message":"690","line":33,"column":15,"nodeType":"691","messageId":"692","endLine":33,"endColumn":17},{"ruleId":"689","severity":1,"message":"690","line":36,"column":52,"nodeType":"691","messageId":"692","endLine":36,"endColumn":54},{"ruleId":"689","severity":1,"message":"690","line":66,"column":20,"nodeType":"691","messageId":"692","endLine":66,"endColumn":22},{"ruleId":"689","severity":1,"message":"690","line":84,"column":20,"nodeType":"691","messageId":"692","endLine":84,"endColumn":22},{"ruleId":"689","severity":1,"message":"690","line":95,"column":20,"nodeType":"691","messageId":"692","endLine":95,"endColumn":22},{"ruleId":"689","severity":1,"message":"690","line":102,"column":20,"nodeType":"691","messageId":"692","endLine":102,"endColumn":22},{"ruleId":"671","severity":1,"message":"784","line":15,"column":7,"nodeType":"673","messageId":"674","endLine":15,"endColumn":14},{"ruleId":"707","severity":1,"message":"708","line":107,"column":59,"nodeType":"709","messageId":"710","endLine":107,"endColumn":61},{"ruleId":"671","severity":1,"message":"785","line":146,"column":10,"nodeType":"673","messageId":"674","endLine":146,"endColumn":19},{"ruleId":"675","severity":1,"message":"786","line":163,"column":6,"nodeType":"677","endLine":163,"endColumn":8,"suggestions":"787"},{"ruleId":"675","severity":1,"message":"680","line":170,"column":6,"nodeType":"677","endLine":170,"endColumn":14,"suggestions":"788"},{"ruleId":"675","severity":1,"message":"789","line":200,"column":6,"nodeType":"677","endLine":204,"endColumn":4,"suggestions":"790"},{"ruleId":"671","severity":1,"message":"791","line":60,"column":34,"nodeType":"673","messageId":"674","endLine":60,"endColumn":40},{"ruleId":"671","severity":1,"message":"699","line":77,"column":9,"nodeType":"673","messageId":"674","endLine":77,"endColumn":25},{"ruleId":"671","severity":1,"message":"761","line":45,"column":7,"nodeType":"673","messageId":"674","endLine":45,"endColumn":28},{"ruleId":"689","severity":1,"message":"690","line":48,"column":13,"nodeType":"691","messageId":"692","endLine":48,"endColumn":15},{"ruleId":"675","severity":1,"message":"762","line":72,"column":6,"nodeType":"677","endLine":72,"endColumn":8,"suggestions":"792"},{"ruleId":"675","severity":1,"message":"734","line":89,"column":6,"nodeType":"677","endLine":89,"endColumn":76,"suggestions":"793"},{"ruleId":"671","severity":1,"message":"794","line":32,"column":9,"nodeType":"673","messageId":"674","endLine":32,"endColumn":16},{"ruleId":"675","severity":1,"message":"728","line":50,"column":6,"nodeType":"677","endLine":50,"endColumn":8,"suggestions":"795"},{"ruleId":"675","severity":1,"message":"730","line":66,"column":6,"nodeType":"677","endLine":66,"endColumn":53,"suggestions":"796"},{"ruleId":"675","severity":1,"message":"732","line":82,"column":6,"nodeType":"677","endLine":82,"endColumn":61,"suggestions":"797"},{"ruleId":"689","severity":1,"message":"690","line":131,"column":15,"nodeType":"691","messageId":"692","endLine":131,"endColumn":17},{"ruleId":"686","severity":1,"message":"687","line":325,"column":23,"nodeType":"688","endLine":325,"endColumn":56},{"ruleId":"671","severity":1,"message":"798","line":11,"column":3,"nodeType":"673","messageId":"674","endLine":11,"endColumn":14},{"ruleId":"671","severity":1,"message":"799","line":13,"column":3,"nodeType":"673","messageId":"674","endLine":13,"endColumn":15},{"ruleId":"671","severity":1,"message":"800","line":14,"column":3,"nodeType":"673","messageId":"674","endLine":14,"endColumn":18},{"ruleId":"689","severity":1,"message":"713","line":104,"column":32,"nodeType":"691","messageId":"692","endLine":104,"endColumn":34},{"ruleId":"689","severity":1,"message":"713","line":107,"column":45,"nodeType":"691","messageId":"692","endLine":107,"endColumn":47},{"ruleId":"689","severity":1,"message":"713","line":122,"column":49,"nodeType":"691","messageId":"692","endLine":122,"endColumn":51},{"ruleId":"689","severity":1,"message":"713","line":137,"column":19,"nodeType":"691","messageId":"692","endLine":137,"endColumn":21},{"ruleId":"689","severity":1,"message":"690","line":162,"column":32,"nodeType":"691","messageId":"692","endLine":162,"endColumn":34},{"ruleId":"671","severity":1,"message":"738","line":36,"column":10,"nodeType":"673","messageId":"674","endLine":36,"endColumn":16},{"ruleId":"675","severity":1,"message":"739","line":76,"column":6,"nodeType":"677","endLine":76,"endColumn":47,"suggestions":"801"},{"ruleId":"675","severity":1,"message":"742","line":93,"column":6,"nodeType":"677","endLine":93,"endColumn":69,"suggestions":"802"},{"ruleId":"689","severity":1,"message":"690","line":106,"column":22,"nodeType":"691","messageId":"692","endLine":106,"endColumn":24},{"ruleId":"695","severity":1,"message":"696","line":183,"column":7,"nodeType":"697","messageId":"698","endLine":187,"endColumn":8},{"ruleId":"689","severity":1,"message":"690","line":215,"column":15,"nodeType":"691","messageId":"692","endLine":215,"endColumn":17},{"ruleId":"695","severity":1,"message":"696","line":38,"column":5,"nodeType":"697","messageId":"698","endLine":44,"endColumn":6},{"ruleId":"675","severity":1,"message":"803","line":45,"column":6,"nodeType":"677","endLine":45,"endColumn":14,"suggestions":"804"},{"ruleId":"675","severity":1,"message":"732","line":65,"column":6,"nodeType":"677","endLine":65,"endColumn":71,"suggestions":"805"},{"ruleId":"686","severity":1,"message":"687","line":127,"column":19,"nodeType":"688","endLine":127,"endColumn":52},{"ruleId":"671","severity":1,"message":"806","line":1,"column":38,"nodeType":"673","messageId":"674","endLine":1,"endColumn":44},{"ruleId":"671","severity":1,"message":"807","line":17,"column":7,"nodeType":"673","messageId":"674","endLine":17,"endColumn":19},{"ruleId":"707","severity":1,"message":"708","line":31,"column":71,"nodeType":"709","messageId":"710","endLine":31,"endColumn":73},{"ruleId":"671","severity":1,"message":"738","line":79,"column":10,"nodeType":"673","messageId":"674","endLine":79,"endColumn":16},{"ruleId":"671","severity":1,"message":"785","line":85,"column":10,"nodeType":"673","messageId":"674","endLine":85,"endColumn":19},{"ruleId":"675","severity":1,"message":"786","line":104,"column":6,"nodeType":"677","endLine":104,"endColumn":8,"suggestions":"808"},{"ruleId":"675","severity":1,"message":"809","line":111,"column":6,"nodeType":"677","endLine":111,"endColumn":14,"suggestions":"810"},{"ruleId":"675","severity":1,"message":"811","line":140,"column":6,"nodeType":"677","endLine":144,"endColumn":4,"suggestions":"812"},{"ruleId":"689","severity":1,"message":"690","line":57,"column":28,"nodeType":"691","messageId":"692","endLine":57,"endColumn":30},{"ruleId":"671","severity":1,"message":"813","line":1,"column":17,"nodeType":"673","messageId":"674","endLine":1,"endColumn":25},{"ruleId":"671","severity":1,"message":"806","line":1,"column":27,"nodeType":"673","messageId":"674","endLine":1,"endColumn":33},{"ruleId":"814","severity":1,"message":"815","line":14,"column":7,"nodeType":"688","endLine":14,"endColumn":40},{"ruleId":"671","severity":1,"message":"791","line":61,"column":34,"nodeType":"673","messageId":"674","endLine":61,"endColumn":40},{"ruleId":"675","severity":1,"message":"762","line":65,"column":6,"nodeType":"677","endLine":65,"endColumn":8,"suggestions":"816"},{"ruleId":"675","severity":1,"message":"734","line":82,"column":6,"nodeType":"677","endLine":82,"endColumn":76,"suggestions":"817"},{"ruleId":"671","severity":1,"message":"794","line":33,"column":9,"nodeType":"673","messageId":"674","endLine":33,"endColumn":16},{"ruleId":"675","severity":1,"message":"728","line":49,"column":6,"nodeType":"677","endLine":49,"endColumn":8,"suggestions":"818"},{"ruleId":"675","severity":1,"message":"730","line":65,"column":6,"nodeType":"677","endLine":65,"endColumn":53,"suggestions":"819"},{"ruleId":"675","severity":1,"message":"732","line":81,"column":6,"nodeType":"677","endLine":81,"endColumn":61,"suggestions":"820"},{"ruleId":"689","severity":1,"message":"690","line":129,"column":15,"nodeType":"691","messageId":"692","endLine":129,"endColumn":17},{"ruleId":"686","severity":1,"message":"687","line":343,"column":23,"nodeType":"688","endLine":343,"endColumn":56},{"ruleId":"671","severity":1,"message":"821","line":77,"column":10,"nodeType":"673","messageId":"674","endLine":77,"endColumn":24},{"ruleId":"671","severity":1,"message":"822","line":77,"column":26,"nodeType":"673","messageId":"674","endLine":77,"endColumn":46},{"ruleId":"675","severity":1,"message":"823","line":110,"column":6,"nodeType":"677","endLine":110,"endColumn":8,"suggestions":"824"},{"ruleId":"675","severity":1,"message":"809","line":135,"column":6,"nodeType":"677","endLine":135,"endColumn":57,"suggestions":"825"},{"ruleId":"689","severity":1,"message":"713","line":149,"column":32,"nodeType":"691","messageId":"692","endLine":149,"endColumn":34},{"ruleId":"689","severity":1,"message":"713","line":152,"column":45,"nodeType":"691","messageId":"692","endLine":152,"endColumn":47},{"ruleId":"689","severity":1,"message":"713","line":167,"column":49,"nodeType":"691","messageId":"692","endLine":167,"endColumn":51},{"ruleId":"689","severity":1,"message":"713","line":182,"column":19,"nodeType":"691","messageId":"692","endLine":182,"endColumn":21},{"ruleId":"689","severity":1,"message":"690","line":204,"column":32,"nodeType":"691","messageId":"692","endLine":204,"endColumn":34},"no-native-reassign",["826"],"no-negated-in-lhs",["827"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setIsAuth' and 'setcurrentLoginUser'. Either include them or remove the dependency array.","ArrayExpression",["828"],"'httpLink' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["829"],"React Hook useEffect has missing dependencies: 'examIdValue', 'examinationEndedResult', 'props.history', and 'submitting'. Either include them or remove the dependency array. You can also do a functional update 'setSubmitting(s => ...)' if you only need 'submitting' in the 'setSubmitting' call.",["830"],"'isAuth' is assigned a value but never used.","'token' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'disableF5' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'onUnloadFunction' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has missing dependencies: 'submitQuiz' and 'timerStarted'. Either include them or remove the dependency array. If 'submitQuiz' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["831"],"React Hook useEffect has a missing dependency: 'start'. Either include it or remove the dependency array.",["832"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'selector' is defined but never used.","'store' is defined but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'submitted'. Either include it or remove the dependency array. You can also do a functional update 'setSubmitted(s => ...)' if you only need 'submitted' in the 'setSubmitted' call.",["833"],["834"],["826"],["827"],"React Hook useEffect has missing dependencies: 'history' and 'submitted'. Either include them or remove the dependency array. You can also do a functional update 'setSubmitted(s => ...)' if you only need 'submitted' in the 'setSubmitted' call.",["835"],["836"],"React Hook useEffect has a missing dependency: 'loadingData'. Either include it or remove the dependency array. You can also do a functional update 'setLoading(l => ...)' if you only need 'loadingData' in the 'setLoading' call.",["837"],"The ref value 'textAnswer.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'textAnswer.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'editMode' and 'questionToEdit'. Either include them or remove the dependency array.",["838"],"'useQuery' is defined but never used.","React Hook useEffect has a missing dependency: 'examsQuery'. Either include it or remove the dependency array.",["839"],"React Hook useEffect has a missing dependency: 'examsQueryResult.loading'. Either include it or remove the dependency array.",["840"],"React Hook useEffect has a missing dependency: 'queryRan'. Either include it or remove the dependency array. You can also do a functional update 'setQueryRan(q => ...)' if you only need 'queryRan' in the 'setQueryRan' call.",["841"],"React Hook useEffect has a missing dependency: 'processing'. Either include it or remove the dependency array. You can also do a functional update 'setProcessing(p => ...)' if you only need 'processing' in the 'setProcessing' call.",["842"],["843"],["844"],"'errors' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'autoProcessing'. Either include it or remove the dependency array. You can also do a functional update 'setAutoProcessing(a => ...)' if you only need 'autoProcessing' in the 'setAutoProcessing' call.",["845"],["846"],"React Hook useEffect has missing dependencies: 'processing' and 'submitted'. Either include them or remove the dependency array. You can also do a functional update 'setProcessing(p => ...)' if you only need 'processing' in the 'setProcessing' call.",["847"],["848"],"no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","React Hook useEffect has missing dependencies: 'examType', 'questionsQuery', and 'spellingQuestionsQuery'. Either include them or remove the dependency array.",["849"],["850"],["851"],"'currentUser' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.history', 'setAuthState', 'setCurrentUser', and 'setToken'. Either include them or remove the dependency array.",["852"],"'examStarted' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'duration', 'examProcessing', 'examQuestions', 'history', and 'setExamStarted'. Either include them or remove the dependency array. You can also do a functional update 'setExamProcessing(e => ...)' if you only need 'examProcessing' in the 'setExamProcessing' call.",["853"],["854"],"'moment' is defined but never used.","'convertMinutesToHours' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getScriptFunction' and 'processing'. Either include them or remove the dependency array. You can also do a functional update 'setProcessing(p => ...)' if you only need 'processing' in the 'setProcessing' call.",["855"],["856"],"'setHtml' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'processing' and 'resultQueryData.called'. Either include them or remove the dependency array. You can also do a functional update 'setProcessing(p => ...)' if you only need 'processing' in the 'setProcessing' call.",["857"],["858"],["859"],["860"],["861"],"React Hook useEffect has a missing dependency: 'processingData'. Either include it or remove the dependency array. You can also do a functional update 'setProcessingData(p => ...)' if you only need 'processingData' in the 'setProcessingData' call.",["862"],"React Hook useEffect has missing dependencies: 'processingData' and 'submitting'. Either include them or remove the dependency array. You can also do a functional update 'setProcessing(p => ...)' if you only need 'processingData' in the 'setProcessing' call.",["863"],"'inputLength' is assigned a value but never used.","'selectedExamType' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'question'. Either include it or remove the dependency array.",["864"],"React Hook useEffect has a missing dependency: 'examTypeQuery'. Either include it or remove the dependency array.",["865"],"React Hook useEffect has missing dependencies: 'history' and 'saveSpellingResult.error'. Either include them or remove the dependency array.",["866"],"'baseUrl' is assigned a value but never used.","'questions' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentUser' and 'questionsFromStore'. Either include them or remove the dependency array.",["867"],["868"],"React Hook useEffect has missing dependencies: 'examIdValue', 'examinationEndedResult', 'props.history', 'scoreDetails', and 'submitting'. Either include them or remove the dependency array. You can also do a functional update 'setSubmitting(s => ...)' if you only need 'submitting' in the 'setSubmitting' call.",["869"],"'examId' is assigned a value but never used.",["870"],["871"],"'details' is assigned a value but never used.",["872"],["873"],["874"],"'EditorState' is defined but never used.","'ContentState' is defined but never used.","'convertFromHTML' is defined but never used.",["875"],["876"],"React Hook useEffect has missing dependencies: 'essayQuestionsQuery' and 'examType'. Either include them or remove the dependency array.",["877"],["878"],"'useRef' is defined but never used.","'customStyles' is assigned a value but never used.",["879"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["880"],"React Hook useEffect has missing dependencies: 'examIdValue', 'examinationEndedResult', 'history', 'scoreDetails', and 'submitting'. Either include them or remove the dependency array. You can also do a functional update 'setSubmitting(s => ...)' if you only need 'submitting' in the 'setSubmitting' call.",["881"],"'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["882"],["883"],["884"],["885"],["886"],"'questionsQuery' is assigned a value but never used.","'questionsQueryResult' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'questionData'. Either include it or remove the dependency array.",["887"],["888"],"no-global-assign","no-unsafe-negation",{"desc":"889","fix":"890"},{"desc":"891","fix":"892"},{"desc":"893","fix":"894"},{"desc":"895","fix":"896"},{"desc":"897","fix":"898"},{"desc":"899","fix":"900"},{"desc":"901","fix":"902"},{"desc":"903","fix":"904"},{"desc":"905","fix":"906"},{"desc":"907","fix":"908"},{"desc":"909","fix":"910"},{"desc":"911","fix":"912"},{"desc":"913","fix":"914"},{"desc":"915","fix":"916"},{"desc":"917","fix":"918"},{"desc":"919","fix":"920"},{"desc":"921","fix":"922"},{"desc":"923","fix":"924"},{"desc":"925","fix":"926"},{"desc":"927","fix":"928"},{"desc":"929","fix":"930"},{"desc":"931","fix":"932"},{"desc":"915","fix":"933"},{"desc":"934","fix":"935"},{"desc":"936","fix":"937"},{"desc":"938","fix":"939"},{"desc":"940","fix":"941"},{"desc":"942","fix":"943"},{"desc":"944","fix":"945"},{"desc":"946","fix":"947"},{"desc":"948","fix":"949"},{"desc":"950","fix":"951"},{"desc":"952","fix":"953"},{"desc":"954","fix":"955"},{"desc":"956","fix":"957"},{"desc":"958","fix":"959"},{"desc":"960","fix":"961"},{"desc":"962","fix":"963"},{"desc":"964","fix":"965"},{"desc":"966","fix":"967"},{"desc":"891","fix":"968"},{"desc":"969","fix":"970"},{"desc":"942","fix":"971"},{"desc":"944","fix":"972"},{"desc":"911","fix":"973"},{"desc":"913","fix":"974"},{"desc":"915","fix":"975"},{"desc":"923","fix":"976"},{"desc":"927","fix":"977"},{"desc":"978","fix":"979"},{"desc":"980","fix":"981"},{"desc":"966","fix":"982"},{"desc":"983","fix":"984"},{"desc":"985","fix":"986"},{"desc":"942","fix":"987"},{"desc":"944","fix":"988"},{"desc":"911","fix":"989"},{"desc":"913","fix":"990"},{"desc":"915","fix":"991"},{"desc":"992","fix":"993"},{"desc":"994","fix":"995"},"Update the dependencies array to be: [currentLoginUser, setIsAuth, setcurrentLoginUser]",{"range":"996","text":"997"},"Update the dependencies array to be: [examId, props.history]",{"range":"998","text":"999"},"Update the dependencies array to be: [examinationEndedResult.loading, examinationEndedResult.data, examinationEndedResult.error, examinationEndedResult, submitting, props.history, examIdValue]",{"range":"1000","text":"1001"},"Update the dependencies array to be: [submitQuiz, timeLeft, timerStarted]",{"range":"1002","text":"1003"},"Update the dependencies array to be: [start]",{"range":"1004","text":"1005"},"Update the dependencies array to be: [uploadQuestionResult.error, uploadQuestionResult.data, submitted]",{"range":"1006","text":"1007"},"Update the dependencies array to be: [uploadSpellingQuestionResult.error, uploadSpellingQuestionResult.data, submitted]",{"range":"1008","text":"1009"},"Update the dependencies array to be: [editQuestionResult.error, editQuestionResult.data, submitted, history]",{"range":"1010","text":"1011"},"Update the dependencies array to be: [submitQuestionToDBResult.error, submitQuestionToDBResult.data, submitted]",{"range":"1012","text":"1013"},"Update the dependencies array to be: [loading, error, data, loadingData]",{"range":"1014","text":"1015"},"Update the dependencies array to be: [editMode, questionToEdit]",{"range":"1016","text":"1017"},"Update the dependencies array to be: [examsQuery]",{"range":"1018","text":"1019"},"Update the dependencies array to be: [examsQueryResult.data, examsQueryResult.error, examsQueryResult.loading]",{"range":"1020","text":"1021"},"Update the dependencies array to be: [questionsQueryResult.error, questionsQueryResult.data, queryRan]",{"range":"1022","text":"1023"},"Update the dependencies array to be: [createEssayScheduleResult.error, createEssayScheduleResult.data, processing]",{"range":"1024","text":"1025"},"Update the dependencies array to be: [createSpellingScheduleResult.error, createSpellingScheduleResult.data, processing]",{"range":"1026","text":"1027"},"Update the dependencies array to be: [createScheduleResult.error, createScheduleResult.data, processing]",{"range":"1028","text":"1029"},"Update the dependencies array to be: [autoGenResult.data, autoGenResult.error, autoProcessing]",{"range":"1030","text":"1031"},"Update the dependencies array to be: [autoGenSpellingResult.data, autoGenSpellingResult.error, autoProcessing]",{"range":"1032","text":"1033"},"Update the dependencies array to be: [addQuestionsToExamResult.error, addQuestionsToExamResult.data, processing, submitted]",{"range":"1034","text":"1035"},"Update the dependencies array to be: [addSpellingQuestionsToExamResult.error, addSpellingQuestionsToExamResult.data, processing, submitted]",{"range":"1036","text":"1037"},"Update the dependencies array to be: [examId, examType, questionsQuery, spellingQuestionsQuery]",{"range":"1038","text":"1039"},{"range":"1040","text":"1023"},"Update the dependencies array to be: [spellingQuestionsQueryResult.error, spellingQuestionsQueryResult.data, queryRan]",{"range":"1041","text":"1042"},"Update the dependencies array to be: [loginUserResult, props.history, setAuthState, setCurrentUser, setToken, submitted]",{"range":"1043","text":"1044"},"Update the dependencies array to be: [duration, examProcessing, examQuestions, history, setExamStarted, startExaminationResult.data, startExaminationResult.error, startExaminationResult.loading]",{"range":"1045","text":"1046"},"Update the dependencies array to be: [data, loading, error, processing]",{"range":"1047","text":"1048"},"Update the dependencies array to be: [getScriptFunction, processing]",{"range":"1049","text":"1050"},"Update the dependencies array to be: [getScriptResult.loading, getScriptResult.data, getScriptResult.error, processing]",{"range":"1051","text":"1052"},"Update the dependencies array to be: [resultQueryData.loading, resultQueryData.data, resultQueryData.error, resultQueryData.called, processing]",{"range":"1053","text":"1054"},"Update the dependencies array to be: [scheduleExamResult.error, scheduleExamResult.loading, scheduleExamResult.data, scheduleExamResult.called, processing]",{"range":"1055","text":"1056"},"Update the dependencies array to be: [createExamResult.data, createExamResult.error, processing]",{"range":"1057","text":"1058"},"Update the dependencies array to be: [changeStatusResult.data, changeStatusResult.error, processing]",{"range":"1059","text":"1060"},"Update the dependencies array to be: [createUserResult.data, createUserResult.error, processing]",{"range":"1061","text":"1062"},"Update the dependencies array to be: [processingData, statusFunctionResult.data, statusFunctionResult.error]",{"range":"1063","text":"1064"},"Update the dependencies array to be: [changePasswordResult.data, changePasswordResult.error, processingData, submitting]",{"range":"1065","text":"1066"},"Update the dependencies array to be: [question]",{"range":"1067","text":"1068"},"Update the dependencies array to be: [examTypeQuery]",{"range":"1069","text":"1070"},"Update the dependencies array to be: [editSpellingResult.data, editSpellingResult.error, history, saveSpellingResult.error]",{"range":"1071","text":"1072"},"Update the dependencies array to be: [currentUser, questionsFromStore]",{"range":"1073","text":"1074"},{"range":"1075","text":"999"},"Update the dependencies array to be: [examinationEndedResult.loading, examinationEndedResult.data, examinationEndedResult.error, examinationEndedResult, submitting, props.history, examIdValue, scoreDetails]",{"range":"1076","text":"1077"},{"range":"1078","text":"1050"},{"range":"1079","text":"1052"},{"range":"1080","text":"1019"},{"range":"1081","text":"1021"},{"range":"1082","text":"1023"},{"range":"1083","text":"1031"},{"range":"1084","text":"1035"},"Update the dependencies array to be: [essayQuestionsQuery, examId, examType]",{"range":"1085","text":"1086"},"Update the dependencies array to be: [essayQuestionsQueryResult.error, essayQuestionsQueryResult.data, queryRan]",{"range":"1087","text":"1088"},{"range":"1089","text":"1074"},"Update the dependencies array to be: [examId, history]",{"range":"1090","text":"1091"},"Update the dependencies array to be: [examinationEndedResult.loading, examinationEndedResult.data, examinationEndedResult.error, examinationEndedResult, submitting, history, examIdValue, scoreDetails]",{"range":"1092","text":"1093"},{"range":"1094","text":"1050"},{"range":"1095","text":"1052"},{"range":"1096","text":"1019"},{"range":"1097","text":"1021"},{"range":"1098","text":"1023"},"Update the dependencies array to be: [questionData]",{"range":"1099","text":"1100"},"Update the dependencies array to be: [editQuestionResult.data, editQuestionResult.error, history]",{"range":"1101","text":"1102"},[3787,3805],"[currentLoginUser, setIsAuth, setcurrentLoginUser]",[2037,2045],"[examId, props.history]",[2967,3075],"[examinationEndedResult.loading, examinationEndedResult.data, examinationEndedResult.error, examinationEndedResult, submitting, props.history, examIdValue]",[959,969],"[submitQuiz, timeLeft, timerStarted]",[1038,1040],"[start]",[2222,2277],"[uploadQuestionResult.error, uploadQuestionResult.data, submitted]",[2817,2888],"[uploadSpellingQuestionResult.error, uploadSpellingQuestionResult.data, submitted]",[2551,2602],"[editQuestionResult.error, editQuestionResult.data, submitted, history]",[2965,3028],"[submitQuestionToDBResult.error, submitQuestionToDBResult.data, submitted]",[3291,3313],"[loading, error, data, loadingData]",[4719,4721],"[editMode, questionToEdit]",[1521,1523],"[examsQuery]",[1854,1901],"[examsQueryResult.data, examsQueryResult.error, examsQueryResult.loading]",[2307,2362],"[questionsQueryResult.error, questionsQueryResult.data, queryRan]",[1817,1882],"[createEssayScheduleResult.error, createEssayScheduleResult.data, processing]",[2310,2381],"[createSpellingScheduleResult.error, createSpellingScheduleResult.data, processing]",[2785,2840],"[createScheduleResult.error, createScheduleResult.data, processing]",[2981,3022],"[autoGenResult.data, autoGenResult.error, autoProcessing]",[3478,3535],"[autoGenSpellingResult.data, autoGenSpellingResult.error, autoProcessing]",[3986,4049],"[addQuestionsToExamResult.error, addQuestionsToExamResult.data, processing, submitted]",[4537,4629],"[addSpellingQuestionsToExamResult.error, addSpellingQuestionsToExamResult.data, processing, submitted]",[1626,1634],"[examId, examType, questionsQuery, spellingQuestionsQuery]",[2079,2134],[2675,2746],"[spellingQuestionsQueryResult.error, spellingQuestionsQueryResult.data, queryRan]",[2189,2217],"[loginUserResult, props.history, setAuthState, setCurrentUser, setToken, submitted]",[3686,3794],"[duration, examProcessing, examQuestions, history, setExamStarted, startExaminationResult.data, startExaminationResult.error, startExaminationResult.loading]",[4112,4134],"[data, loading, error, processing]",[1756,1758],"[getScriptFunction, processing]",[2183,2253],"[getScriptResult.loading, getScriptResult.data, getScriptResult.error, processing]",[1694,1764],"[resultQueryData.loading, resultQueryData.data, resultQueryData.error, resultQueryData.called, processing]",[1331,1458],"[scheduleExamResult.error, scheduleExamResult.loading, scheduleExamResult.data, scheduleExamResult.called, processing]",[958,1005],"[createExamResult.data, createExamResult.error, processing]",[1266,1317],"[changeStatusResult.data, changeStatusResult.error, processing]",[1502,1549],"[createUserResult.data, createUserResult.error, processing]",[1513,1568],"[processingData, statusFunctionResult.data, statusFunctionResult.error]",[1386,1441],"[changePasswordResult.data, changePasswordResult.error, processingData, submitting]",[2881,2883],"[question]",[3010,3012],"[examTypeQuery]",[3858,3909],"[editSpellingResult.data, editSpellingResult.error, history, saveSpellingResult.error]",[4096,4098],"[currentUser, questionsFromStore]",[4226,4234],[5088,5196],"[examinationEndedResult.loading, examinationEndedResult.data, examinationEndedResult.error, examinationEndedResult, submitting, props.history, examIdValue, scoreDetails]",[1752,1754],[2179,2249],[1656,1658],[1989,2036],[2471,2526],[2384,2425],[2874,2937],[1224,1232],"[essayQuestionsQuery, examId, examType]",[1745,1810],"[essayQuestionsQueryResult.error, essayQuestionsQueryResult.data, queryRan]",[3003,3005],[3127,3135],"[examId, history]",[3950,4058],"[examinationEndedResult.loading, examinationEndedResult.data, examinationEndedResult.error, examinationEndedResult, submitting, history, examIdValue, scoreDetails]",[1467,1469],[1894,1964],[1672,1674],[2005,2052],[2481,2536],[3328,3330],"[questionData]",[4035,4086],"[editQuestionResult.data, editQuestionResult.error, history]"]
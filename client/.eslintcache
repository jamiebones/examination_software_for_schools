[{"/app/src/index.js":"1","/app/src/App.js":"2","/app/src/reportWebVitals.js":"3","/app/src/apolloClient.js":"4","/app/src/globalStyles.js":"5","/app/src/components/navbar.js":"6","/app/src/components/publicRoute.js":"7","/app/src/components/authorized.js":"8","/app/src/components/questionPanel.js":"9","/app/src/components/examSummaryComponent.js":"10","/app/src/components/uploadExaminationQuestions.js":"11","/app/src/components/saveNewQuestion.js":"12","/app/src/components/loadQuestionsComponent.js":"13","/app/src/components/editQuestionComponent.js":"14","/app/src/components/createExaminationSchedule.js":"15","/app/src/components/addQuestionsToExamination.js":"16","/app/src/components/login.js":"17","/app/src/components/dashboard.js":"18","/app/src/components/displayQuizScriptComponent.js":"19","/app/src/components/activeExams.js":"20","/app/src/components/viewExamResult.js":"21","/app/src/components/viewCanidateExaminationScripts.js":"22","/app/src/components/createSubjectCourse.js":"23","/app/src/components/createUserAccount.js":"24","/app/src/components/activateScheduleExaminationPanel.js":"25","/app/src/components/usersPanel.js":"26","/app/src/components/uploadMedia.js":"27","/app/src/components/saveSpellingQuestions.js":"28","/app/src/components/startSpellingExam.js":"29","/app/src/components/spellingExamSummary.js":"30","/app/src/components/displaySpellingScriptComponent.js":"31","/app/src/components/displayEssayScriptComponent.js":"32","/app/src/components/viewSpellingExaminationScript.js":"33","/app/src/components/viewEssayExaminationScripts.js":"34","/app/src/components/loadSpellingQuestions.js":"35","/app/src/components/loadEssayQuestions.js":"36","/app/src/components/saveEssayQuestions.js":"37","/app/src/components/addEssayQuestionsToExam.js":"38","/app/src/common/loadableLoader.js":"39","/app/src/components/viewRunningExaminations.js":"40","/app/src/components/essayExamSummary.js":"41","/app/src/components/startEssayExam.js":"42","/app/src/components/editEssayQuestions.js":"43","/app/src/components/notAuthorizedComponent.js":"44","/app/src/components/questionComponent.js":"45","/app/src/components/questionButtonsComponent.js":"46","/app/src/components/questionsNumberDiv.js":"47","/app/src/components/countDownTimer.js":"48","/app/src/common/examinationTypeComponent.js":"49","/app/src/common/draftJSToolBar.js":"50","/app/src/common/loading.js":"51","/app/src/common/displayEssayScript.js":"52","/app/src/common/loadEssayQuestionComponent.js":"53","/app/src/common/displaySpellingScriptComponent.js":"54","/app/src/common/questionNumberDiv.js":"55","/app/src/config.js":"56","/app/src/common/imageComponent.js":"57","/app/src/common/videoComponent.js":"58","/app/src/common/audioComponent.js":"59","/app/src/graphql/mutation.js":"60","/app/src/graphql/queries.js":"61","/app/src/common/essayQuestionComponent.js":"62","/app/src/common/usersTablePanel.js":"63","/app/src/common/displayScriptComponent.js":"64","/app/src/common/selectExaminationComponent.js":"65","/app/src/common/loadQuestionsComponent.js":"66","/app/src/components/editButton.js":"67","/app/src/components/showQuestionComponent.js":"68","/app/src/methods/index.js":"69","/app/src/common/showQuestionsComponent.js":"70","/app/src/common/showSpellingComponent.js":"71","/app/src/methods/saveBulkQuestions.js":"72","/app/src/methods/examMarking.js":"73","/app/src/methods/utils.js":"74","/app/src/methods/generateScripts.js":"75","/app/src/methods/saveBulkSpellingQuestions.js":"76","/app/src/methods/markSpellingScripts.js":"77","/app/src/methods/markEssayExamination.js":"78","/app/src/methods/saveBulkEssayQuestions.js":"79","/app/src/common/footer.js":"80","/app/src/context/index.js":"81","/app/src/Routes/index.js":"82","/app/src/context/authContext.js":"83","/app/src/context/examContext.js":"84","/app/src/Routes/authorizedRoutes.js":"85"},{"size":662,"mtime":1659212263192,"results":"86","hashOfConfig":"87"},{"size":14902,"mtime":1659212263172,"results":"88","hashOfConfig":"87"},{"size":362,"mtime":1611777938202,"results":"89","hashOfConfig":"87"},{"size":2679,"mtime":1629186343911,"results":"90","hashOfConfig":"87"},{"size":1109,"mtime":1621242846200,"results":"91","hashOfConfig":"87"},{"size":12134,"mtime":1659212263184,"results":"92","hashOfConfig":"87"},{"size":503,"mtime":1613655136750,"results":"93","hashOfConfig":"87"},{"size":1462,"mtime":1617022814358,"results":"94","hashOfConfig":"87"},{"size":5492,"mtime":1659212263184,"results":"95","hashOfConfig":"87"},{"size":3090,"mtime":1659212263180,"results":"96","hashOfConfig":"87"},{"size":9570,"mtime":1621243665361,"results":"97","hashOfConfig":"87"},{"size":12202,"mtime":1621244626347,"results":"98","hashOfConfig":"87"},{"size":7952,"mtime":1659212263184,"results":"99","hashOfConfig":"87"},{"size":347,"mtime":1618741085438,"results":"100","hashOfConfig":"87"},{"size":9799,"mtime":1621243059642,"results":"101","hashOfConfig":"87"},{"size":13566,"mtime":1621244262176,"results":"102","hashOfConfig":"87"},{"size":4971,"mtime":1659212263184,"results":"103","hashOfConfig":"87"},{"size":2519,"mtime":1620204973567,"results":"104","hashOfConfig":"87"},{"size":3193,"mtime":1659212263176,"results":"105","hashOfConfig":"87"},{"size":8447,"mtime":1659212263176,"results":"106","hashOfConfig":"87"},{"size":8773,"mtime":1659212263188,"results":"107","hashOfConfig":"87"},{"size":360,"mtime":1614455025467,"results":"108","hashOfConfig":"87"},{"size":4097,"mtime":1627979856647,"results":"109","hashOfConfig":"87"},{"size":6604,"mtime":1621244886975,"results":"110","hashOfConfig":"87"},{"size":7251,"mtime":1618033485203,"results":"111","hashOfConfig":"87"},{"size":5400,"mtime":1617022814362,"results":"112","hashOfConfig":"87"},{"size":6690,"mtime":1620038954800,"results":"113","hashOfConfig":"87"},{"size":11533,"mtime":1659212263184,"results":"114","hashOfConfig":"87"},{"size":11782,"mtime":1659212263188,"results":"115","hashOfConfig":"87"},{"size":2884,"mtime":1659212263188,"results":"116","hashOfConfig":"87"},{"size":3129,"mtime":1659212263176,"results":"117","hashOfConfig":"87"},{"size":2791,"mtime":1659212263176,"results":"118","hashOfConfig":"87"},{"size":384,"mtime":1618116785252,"results":"119","hashOfConfig":"87"},{"size":366,"mtime":1618739732394,"results":"120","hashOfConfig":"87"},{"size":10463,"mtime":1618167868706,"results":"121","hashOfConfig":"87"},{"size":11191,"mtime":1618771191983,"results":"122","hashOfConfig":"87"},{"size":8862,"mtime":1621244202117,"results":"123","hashOfConfig":"87"},{"size":10713,"mtime":1621243782089,"results":"124","hashOfConfig":"87"},{"size":1851,"mtime":1619983001844,"results":"125","hashOfConfig":"87"},{"size":5054,"mtime":1619983724274,"results":"126","hashOfConfig":"87"},{"size":2810,"mtime":1659212263180,"results":"127","hashOfConfig":"87"},{"size":8443,"mtime":1659212263188,"results":"128","hashOfConfig":"87"},{"size":11705,"mtime":1659212263176,"results":"129","hashOfConfig":"87"},{"size":324,"mtime":1614423433756,"results":"130","hashOfConfig":"87"},{"size":3797,"mtime":1659212263184,"results":"131","hashOfConfig":"87"},{"size":2671,"mtime":1659212263184,"results":"132","hashOfConfig":"87"},{"size":3768,"mtime":1659212263184,"results":"133","hashOfConfig":"87"},{"size":1881,"mtime":1659212263176,"results":"134","hashOfConfig":"87"},{"size":4339,"mtime":1621243158909,"results":"135","hashOfConfig":"87"},{"size":3116,"mtime":1613302814265,"results":"136","hashOfConfig":"87"},{"size":221,"mtime":1613156925491,"results":"137","hashOfConfig":"87"},{"size":6572,"mtime":1618740315616,"results":"138","hashOfConfig":"87"},{"size":3987,"mtime":1618484798454,"results":"139","hashOfConfig":"87"},{"size":6254,"mtime":1619082287660,"results":"140","hashOfConfig":"87"},{"size":1814,"mtime":1618649705562,"results":"141","hashOfConfig":"87"},{"size":179,"mtime":1629201405692,"results":"142","hashOfConfig":"87"},{"size":323,"mtime":1618586978726,"results":"143","hashOfConfig":"87"},{"size":447,"mtime":1618575334036,"results":"144","hashOfConfig":"87"},{"size":424,"mtime":1618575311169,"results":"145","hashOfConfig":"87"},{"size":6941,"mtime":1620040002761,"results":"146","hashOfConfig":"87"},{"size":9859,"mtime":1619981429980,"results":"147","hashOfConfig":"87"},{"size":2867,"mtime":1619083867097,"results":"148","hashOfConfig":"87"},{"size":5999,"mtime":1619427332036,"results":"149","hashOfConfig":"87"},{"size":5926,"mtime":1619086859003,"results":"150","hashOfConfig":"87"},{"size":3560,"mtime":1617965752950,"results":"151","hashOfConfig":"87"},{"size":6781,"mtime":1617996187695,"results":"152","hashOfConfig":"87"},{"size":408,"mtime":1613214862137,"results":"153","hashOfConfig":"87"},{"size":1874,"mtime":1613216194217,"results":"154","hashOfConfig":"87"},{"size":575,"mtime":1659212263192,"results":"155","hashOfConfig":"87"},{"size":918,"mtime":1618487535548,"results":"156","hashOfConfig":"87"},{"size":689,"mtime":1617996265061,"results":"157","hashOfConfig":"87"},{"size":3783,"mtime":1612890464847,"results":"158","hashOfConfig":"87"},{"size":698,"mtime":1626009372260,"results":"159","hashOfConfig":"87"},{"size":2552,"mtime":1619353672490,"results":"160","hashOfConfig":"87"},{"size":1051,"mtime":1614243900615,"results":"161","hashOfConfig":"87"},{"size":1033,"mtime":1617906672013,"results":"162","hashOfConfig":"87"},{"size":753,"mtime":1618064531263,"results":"163","hashOfConfig":"87"},{"size":994,"mtime":1618682311271,"results":"164","hashOfConfig":"87"},{"size":1303,"mtime":1620044972153,"results":"165","hashOfConfig":"87"},{"size":643,"mtime":1621105856674,"results":"166","hashOfConfig":"87"},{"size":182,"mtime":1659212263188,"results":"167","hashOfConfig":"87"},{"size":95,"mtime":1659212263176,"results":"168","hashOfConfig":"87"},{"size":707,"mtime":1659212263188,"results":"169","hashOfConfig":"87"},{"size":960,"mtime":1659212263188,"results":"170","hashOfConfig":"87"},{"size":872,"mtime":1659212263172,"results":"171","hashOfConfig":"87"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"n1sie1",{"filePath":"174","messages":"175","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"177"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"177"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"177"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"177"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"177"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"177"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"177"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"177"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"177"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"177"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"177"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"177"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"177"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"177"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"177"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"177"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"177"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"177"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"177"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"177"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"177"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"177"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"177"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"177"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"177"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"177"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"177"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"177"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"177"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"177"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"177"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"177"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"177"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"177"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"177"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"177"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"177"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"177"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"177"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"177"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"177"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"177"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"177"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"177"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"177"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"177"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"177"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"177"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"177"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"177"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"177"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},"/app/src/index.js",[],"/app/src/App.js",["394","395","396","397"],"import React, { useEffect, useState } from \"react\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { useAuth, ExamProvider } from \"./context\";\nimport store from \"store\";\n\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport apolloClient from \"./apolloClient\";\n\n//importation of routes in the system starts here\n\nimport Navigation from \"./components/navbar\";\n\nimport Footer from \"./common/footer\";\n\nimport Loadable from \"react-loadable\";\nimport Loader from \"./common/loadableLoader\";\nimport GlobalStyle from \"./globalStyles\";\nimport { AuthorizedRoutes } from \"./Routes\";\n//import localStorage from \"./localStorage\";\n\n//loadable content start here start of code splitting by route\nconst LoadableQuestionPanel = Loadable({\n  loader: () => import(\"./components/questionPanel\"),\n  loading: Loader,\n  delay: 300,\n});\n\nconst LoadableExamSummaryComponent = Loadable({\n  loader: () => import(\"./components/examSummaryComponent\"),\n  loading: Loader,\n  delay: 300,\n});\n\nconst LoadableUploadExaminationQuestion = Loadable({\n  loader: () => import(\"./components/uploadExaminationQuestions\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableAddQuestion = Loadable({\n  loader: () => import(\"./components/saveNewQuestion\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableLoadQuestionsComponent = Loadable({\n  loader: () => import(\"./components/loadQuestionsComponent\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableEditQuestionComponent = Loadable({\n  loader: () => import(\"./components/editQuestionComponent\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableCreateExaminationSchedule = Loadable({\n  loader: () => import(\"./components/createExaminationSchedule\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableAddQuestionsToExaminationComponent = Loadable({\n  loader: () => import(\"./components/addQuestionsToExamination\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableLoginPage = Loadable({\n  loader: () => import(\"./components/login\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableDashboard = Loadable({\n  loader: () => import(\"./components/dashboard\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableActiveExaminationPage = Loadable({\n  loader: () => import(\"./components/activeExams\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableDisplayQuizScriptComponent = Loadable({\n  loader: () => import(\"./components/displayQuizScriptComponent\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableViewExamResult = Loadable({\n  loader: () => import(\"./components/viewExamResult\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableViewCanidateExaminationScript = Loadable({\n  loader: () => import(\"./components/viewCanidateExaminationScripts\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableCreateSubjectCourse = Loadable({\n  loader: () => import(\"./components/createSubjectCourse\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableActivateExamSchedule = Loadable({\n  loader: () => import(\"./components/activateScheduleExaminationPanel\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableCreateUserAccount = Loadable({\n  loader: () => import(\"./components/createUserAccount\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableUsersPanel = Loadable({\n  loader: () => import(\"./components/usersPanel\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableUploadMedia = Loadable({\n  loader: () => import(\"./components/uploadMedia\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableSaveSpellingQuestions = Loadable({\n  loader: () => import(\"./components/saveSpellingQuestions\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableStartSpellingExam = Loadable({\n  loader: () => import(\"./components/startSpellingExam\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableSpellingExamSummary = Loadable({\n  loader: () => import(\"./components/spellingExamSummary\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableDisplaySpellingQuizScriptComponent = Loadable({\n  loader: () => import(\"./components/displaySpellingScriptComponent\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableDisplayEssayQuizScriptComponent = Loadable({\n  loader: () => import(\"./components/displayEssayScriptComponent\"),\n  loading: Loader,\n  delay: 300,\n});\n\nconst LoadableViewCanidateEssayScripts = Loadable({\n  loader: () => import(\"./components/viewEssayExaminationScripts\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableViewCanidateSpellingScripts = Loadable({\n  loader: () => import(\"./components/viewSpellingExaminationScript\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableLoadSpellingQuestions = Loadable({\n  loader: () => import(\"./components/loadSpellingQuestions\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableLoadEssayQuestion = Loadable({\n  loader: () => import(\"./components/loadEssayQuestions\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableSaveEssayQuestions = Loadable({\n  loader: () => import(\"./components/saveEssayQuestions\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableAddEssayQuestionsToExam = Loadable({\n  loader: () => import(\"./components/addEssayQuestionsToExam\"),\n  loading: Loader,\n  delay: 300,\n});\nconst LoadableStartEssayExam = Loadable({\n  loader: () => import(\"./components/startEssayExam\"),\n  loading: Loader,\n  delay: 300,\n});\n\nconst LoadableEssayExamSummary = Loadable({\n  loader: () => import(\"./components/essayExamSummary\"),\n  loading: Loader,\n  delay: 300,\n});\n\nconst LoadableEditEssayQuestion = Loadable({\n  loader: () => import(\"./components/editEssayQuestions\"),\n  loading: Loader,\n  delay: 300,\n});\n\nconst LoadableRunningExamination = Loadable({\n  loader: () => import(\"./components/viewRunningExaminations\"),\n  loading: Loader,\n  delay: 300,\n});\n\n//loadable content end here end of code splitting by route\n\nconst AppStyles = styled.div`\n  .mainComponent {\n    margin-top: 50px;\n    margin-bottom: 70px;\n  }\n`;\n\nfunction App(props) {\n  const {\n    isAuth,\n    setIsAuth,\n    currentLoginUser,\n    setcurrentLoginUser,\n    token,\n    setToken,\n  } = useAuth();\n\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (!currentLoginUser) {\n      //load the stuffs from the store if it exists\n      const user = store.get(\"currentLoginUser\");\n      if (user) {\n        const parsedUserData = user && JSON.parse(user);\n        if (parsedUserData.hasOwnProperty(\"id\")) {\n          setcurrentLoginUser(parsedUserData);\n          setIsAuth(true);\n        }\n      }\n    }\n    setLoading(false);\n  }, [currentLoginUser]);\n\n  return (\n    <ApolloProvider client={apolloClient}>\n      <GlobalStyle />\n      <ExamProvider>\n        <Router>\n          <AppStyles>\n            <Navigation\n              authenticated={isAuth}\n              currentLoginUser={currentLoginUser}\n            />\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div className=\"col-md-12\">\n                  <div className=\"mainComponent\">\n                    <Routes>\n                      {/** super-admin links start here  */}\n\n                      <Route\n                        element={\n                          <AuthorizedRoutes authorizedRole={[\"super-admin\"]} />\n                        }\n                      >\n                        <Route\n                          element={<LoadableRunningExamination />}\n                          path=\"/view_running_examination\"\n                        />\n                        <Route\n                          element={<LoadableViewCanidateExaminationScript />}\n                          path=\"/view_canidate_script\"\n                        />\n                        <Route\n                          element={<LoadableViewCanidateSpellingScripts />}\n                          path=\"/view_canidate_spelling_script\"\n                        />\n                        <Route\n                          element={<LoadableViewCanidateEssayScripts />}\n                          path=\"/view_canidate_essay_script\"\n                        />\n\n                        <Route\n                          element={<LoadableUploadMedia />}\n                          path=\"/upload_media\"\n                        />\n                        <Route element={<LoadableUsersPanel />} path=\"/users\" />\n\n                        <Route\n                          element={<LoadableCreateUserAccount />}\n                          path=\"/create_user_account\"\n                        />\n\n                        <Route\n                          element={<LoadableActivateExamSchedule />}\n                          path=\"/activate_exams\"\n                        />\n\n                        <Route\n                          element={<LoadableCreateSubjectCourse />}\n                          path=\"/create_subject\"\n                        />\n\n                        <Route\n                          element={<LoadableViewExamResult />}\n                          path=\"/exam_results\"\n                        />\n\n                        <Route\n                          element={<LoadableUploadExaminationQuestion />}\n                          path=\"/upload_questions\"\n                        />\n                        <Route\n                          element={<LoadableAddQuestion />}\n                          path=\"/add_question\"\n                        />\n                        <Route\n                          element={<LoadableSaveSpellingQuestions />}\n                          path=\"/add_spelling_question\"\n                        />\n\n                        <Route\n                          element={<LoadableSaveEssayQuestions />}\n                          path=\"/add_essay_question\"\n                        />\n\n                        <Route\n                          element={<LoadableEditEssayQuestion />}\n                          path=\"/edit_essay_question\"\n                        />\n                        <Route\n                          element={<LoadableLoadQuestionsComponent />}\n                          path=\"/load_multi_choice_question\"\n                        />\n                        <Route\n                          element={<LoadableLoadSpellingQuestions />}\n                          path=\"/load_spelling_question\"\n                        />\n\n                        <Route\n                          element={<LoadableLoadEssayQuestion />}\n                          path=\"/load_essay_question\"\n                        />\n\n                        <Route\n                          element={<LoadableEditQuestionComponent />}\n                          path=\"/edit_question\"\n                        />\n\n                        <Route\n                          element={<LoadableCreateExaminationSchedule />}\n                          path=\"/create_examination_schedule\"\n                        />\n\n                        <Route\n                          element={\n                            <LoadableAddQuestionsToExaminationComponent />\n                          }\n                          path=\"/add_questions_examination\"\n                        />\n\n                        <Route\n                          element={<LoadableAddEssayQuestionsToExam />}\n                          path=\"/add_essay_questions_examination\"\n                        />\n\n                        <Route\n                          element={<LoadableEditQuestionComponent />}\n                          path=\"/edit_question\"\n                        />\n                      </Route>\n                      {/** super-admin links end here  */}\n\n                      {/** student links start here  */}\n\n                      <Route\n                        element={\n                          <AuthorizedRoutes authorizedRole={[\"student\"]} />\n                        }\n                      >\n                        <Route\n                          element={<LoadableQuestionPanel />}\n                          path=\"/exam/multi_choice/:examId\"\n                        />\n                        <Route\n                          element={<LoadableStartSpellingExam />}\n                          path=\"/exam/spelling/:examId\"\n                        />\n\n                        <Route\n                          element={<LoadableStartEssayExam />}\n                          path=\"/exam/short_essay/:examId\"\n                        />\n                        <Route\n                          element={<LoadableViewCanidateEssayScripts />}\n                          path=\"/view_canidate_essay_script\"\n                        />\n\n                        <Route\n                          element={<LoadableActiveExaminationPage />}\n                          path=\"/exam_start_page\"\n                        />\n                      </Route>\n                      {/** student links end here  */}\n\n                      {/** super-admin and student links start here  */}\n                      <Route\n                        element={\n                          <AuthorizedRoutes\n                            authorizedRole={[\"super-admin\", \"student\"]}\n                          />\n                        }\n                      >\n                        <Route\n                          element={<LoadableDisplayQuizScriptComponent />}\n                          path=\"/examination_script/:examId\"\n                        />\n                        <Route\n                          element={\n                            <LoadableDisplaySpellingQuizScriptComponent />\n                          }\n                          path=\"/spelling_examination_script/:examId\"\n                        />\n                        <Route\n                          element={<LoadableDisplayEssayQuizScriptComponent />}\n                          path=\"/essay_examination_script/:examId\"\n                        />\n\n                        <Route\n                          element={<LoadableExamSummaryComponent />}\n                          path=\"/exam_summary/:examId\"\n                        />\n\n                        <Route\n                          element={<LoadableSpellingExamSummary />}\n                          path=\"/exam_summary/spelling/:examId\"\n                        />\n\n                        <Route\n                          element={<LoadableEssayExamSummary />}\n                          path=\"/exam_summary/essay/:examId\"\n                        />\n                      </Route>\n                      {/** super-admin and student links end here  */}\n                      <Route element={<LoadableLoginPage />} path={\"/login\"} />\n                      <Route\n                        exact\n                        path=\"/dashboard\"\n                        element={<LoadableDashboard />}\n                      />\n                    </Routes>\n                    <Footer />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </AppStyles>\n        </Router>\n      </ExamProvider>\n    </ApolloProvider>\n  );\n}\nexport default App;\n",["398","399"],"/app/src/reportWebVitals.js",[],"/app/src/apolloClient.js",["400","401"],"import {\n  InMemoryCache,\n  ApolloClient,\n  ApolloLink,\n  HttpLink,\n} from \"@apollo/client\";\nimport { createUploadLink } from \"apollo-upload-client\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport store from \"store\";\n\nconst cache = new InMemoryCache({\n  possibleTypes: {\n    UserDetailsResult: [\"User\", \"Error\"],\n    ActiveExamDetails: [\"ActiveExamSuccessful\", \"Error\"],\n    ExamTakenDetails: [\"ExamTakenSuccess\", \"Error\"],\n    QuestionTypes: [\"SpellingQuestion\", \"Question\", \"EssayExamQuestion\"],\n    ScriptTypes: [\n      \"ScriptQuestion\",\n      \"SpellingScriptQuestion\",\n      \"EssayQuestionScript\",\n    ],\n  },\n});\n\nconst port = process.env.PORT || 8000;\n\nlet uploadLink;\nif (process.env.NODE_ENV === \"production\") {\n  uploadLink = createUploadLink({\n    //uri: `http://localhost`,\n    uri: `http://${window.location.hostname}/graphql`, // Apollo Server is served from port 4000\n    headers: {\n      \"keep-alive\": \"true\",\n    },\n  });\n} else {\n  uploadLink = createUploadLink({\n    uri: \"http://localhost:9000/graphql\", // Apollo Server is served from port 4000\n    headers: {\n      \"keep-alive\": \"true\",\n    },\n  });\n}\n\n// if (process.env.NODE_ENV === \"production\") {\n//   httpLink = new HttpLink({\n//     uri: `https://${window.location.hostname}:${port}/graphql`,\n//   });\n// }\n\nconst errorLink = onError(({ graphQLErrors, networkError, operation }) => {\n  if (graphQLErrors) {\n    graphQLErrors.forEach(({ message, path }) => {\n      console.log(`[GraphQL Errors ] Message: ${message} Path: ${path}`);\n    });\n  }\n\n  if (networkError) {\n    console.log([\n      `[network error] Message: ${networkError.message} Operation: ${operation.operationName}`,\n    ]);\n  }\n});\n\nconst authLink = setContext((_, { headers, ...rest }) => {\n  const token = store.get(\"authToken\");\n  const context = {\n    ...rest,\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n  return context;\n});\n\n//this is to remove __typename field from the mutation\n//this is to remove __typename field from the mutation\nconst cleanTypeName = new ApolloLink((operation, forward) => {\n  \n  const omitTypename = (key, value) =>\n    key === \"__typename\" ? undefined : value;\n    //hasupload shows that the sent mutation contain an image\n  if (operation.variables && !operation.getContext().hasUpload) {\n    operation.variables = JSON.parse(\n      JSON.stringify(operation.variables),\n      omitTypename\n    );\n  }\n  return forward(operation);\n});\n\nconst client = new ApolloClient({\n  cache,\n  link: ApolloLink.from([cleanTypeName, errorLink, authLink, uploadLink]),\n});\n\nexport default client;\n","/app/src/globalStyles.js",[],"/app/src/components/navbar.js",["402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437"],"import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport client from \"../apolloClient\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAuth } from \"../context\";\nimport store from \"store\";\n\nconst CustomNavbarStyles = styled.div`\n  nav {\n    background: #222;\n    padding: 0 15px;\n  }\n  a {\n    color: white;\n    text-decoration: none;\n  }\n\n  .menu,\n  .submenu {\n    list-style-type: none;\n    z-index: 30000;\n  }\n  .logo {\n    font-size: 20px;\n    padding: 7.5px 10px 7.5px 0;\n  }\n  .item {\n    padding: 10px;\n    color: #fff;\n  }\n  .item.button {\n    padding: 9px 5px;\n  }\n  .item:not(.button) a:hover,\n  .item a:hover::after {\n    color: #ccc;\n  }\n\n  /*mobile menu */\n\n  .menu {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    align-items: center;\n    cursor: pointer;\n  }\n\n  .menu li a {\n    display: block;\n    padding: 15px 5px;\n  }\n\n  .menu li.subitem a {\n    padding: 15px;\n    text-align: start;\n  }\n\n  .toggle {\n    order: 1;\n    font-size: 20px;\n  }\n  .item.button {\n    order: 2;\n  }\n\n  .item {\n    order: 3;\n    width: 100%;\n    text-align: center;\n    display: none;\n  }\n\n  .active .item {\n    display: block;\n  }\n\n  .button.secondary {\n    border-bottom: 1px #444 solid;\n  }\n\n  /*submenu up for mobile screens */\n\n  .submenu {\n    display: none;\n  }\n  .submenu-active .submenu {\n    display: block;\n    cursor: pointer;\n  }\n  .has-submenu {\n    font-size: 16px;\n    color: white;\n  }\n\n  .has-submenu > a::after {\n    font-family: \"Font Awesome 5 Free\";\n    font-size: 12px;\n    line-height: 16px;\n    font-weight: 900;\n    content: \"\\f078\";\n    color: white;\n    padding-left: 5px;\n  }\n\n  .subitem a {\n    padding: 10px 15px;\n  }\n  .submenu-active {\n    background-color: #111;\n    border-radius: 3px;\n  }\n\n  /* Tablet menu */\n\n  @media all and (min-width: 700px) {\n    .menu {\n      justify-content: center;\n    }\n    .logo {\n      flex: 1;\n    }\n    .item.button {\n      width: auto;\n      order: 1;\n      display: block;\n    }\n    .toggle {\n      flex: 1;\n      text-align: right;\n      order: 2;\n    }\n    /*button up from tablet screen */\n    .menu li.button a {\n      padding: 10px 15px;\n      margin: 5px 0;\n    }\n    .button a {\n      background: #0080ff;\n      border: 1px royalblue solid;\n    }\n    .button.secondary a {\n      background: transparent;\n      border: 1px #0080ff solid;\n    }\n    .button a:hover {\n      text-decoration: none;\n    }\n    .button:not(.secondary)a:hover {\n      background: royalblue;\n      border-color: darkblue;\n    }\n  }\n\n  /*Desktop menu styles */\n\n  @media all and (min-width: 960px) {\n    .menu {\n      align-items: flex-start;\n      flex-wrap: nowrap;\n      background: none;\n    }\n    .logo {\n      order: 0;\n    }\n    .item {\n      order: 1;\n      display: block;\n      position: relative;\n      width: auto;\n    }\n    .button {\n      order: 2;\n    }\n    .submenu-active .submenu {\n      display: block;\n      position: absolute;\n      width: max-content;\n      padding: 0;\n      left: 0px;\n      top: 75px;\n      background: rgb(90 32 32);\n    }\n    .toggle {\n      display: none;\n    }\n    .submenu-active {\n      border-radius: 0;\n    }\n  }\n`;\n\nconst CustomNavbar = () => {\n  let navigate = useNavigate();\n\n  const {\n    isAuth: authenticated,\n    setIsAuth,\n    currentLoginUser: user,\n    setcurrentLoginUser,\n    setToken,\n  } = useAuth();\n\n  useEffect(() => {\n    const toggle = document.querySelector(\".toggle\");\n    const menu = document.querySelector(\".menu\");\n    const items = document.querySelectorAll(\".item\");\n\n    function toggleMenu() {\n      if (menu.classList.contains(\"active\")) {\n        menu.classList.remove(\"active\");\n        toggle.querySelector(\"a\").innerHTML = \"<i class='fas fa-bars'></i>\";\n      } else {\n        menu.classList.add(\"active\");\n        toggle.querySelector(\"a\").innerHTML = \"<i class='fas fa-times'></i>\";\n      }\n    }\n    toggle.addEventListener(\"click\", toggleMenu);\n\n    function toggleItem() {\n      if (this.classList.contains(\"submenu-active\")) {\n        this.classList.remove(\"submenu-active\");\n      } else if (menu.querySelector(\".submenu-active\")) {\n        menu\n          .querySelector(\".submenu-active\")\n          .classList.remove(\"submenu-active\");\n        this.classList.add(\"submenu-active\");\n      } else {\n        this.classList.add(\"submenu-active\");\n      }\n    }\n\n    for (let item of items) {\n      if (item.querySelector(\".submenu\")) {\n        item.addEventListener(\"click\", toggleItem);\n        item.addEventListener(\"keypress\", toggleItem);\n      }\n    }\n\n    /*Close Submenu From Anywhere */\n\n    function closeSubmenu(e) {\n      let isClickInside = menu.contains(e.target);\n      if (!isClickInside && menu.querySelector(\".submenu-active\")) {\n        menu\n          .querySelector(\".submenu-active\")\n          .classList.remove(\"submenu-active\");\n      }\n    }\n\n    document.addEventListener(\"click\", closeSubmenu);\n\n    return () => {\n      //clean up operation here\n      toggle.removeEventListener(\"click\", toggleMenu);\n      for (let item of items) {\n        if (item.querySelector(\".submenu\")) {\n          item.removeEventListener(\"click\", toggleItem);\n          item.removeEventListener(\"keypress\", toggleItem);\n        }\n      }\n      document.removeEventListener(\"click\", closeSubmenu);\n    };\n  });\n\n  const handleLogOut = (e) => {\n    e.preventDefault();\n    setIsAuth(false);\n    setcurrentLoginUser({});\n    setToken(\"\");\n    store.clearAll();\n    client.clearStore();\n    navigate(\"/\");\n  };\n\n  const handleLogIn = (e) => {\n    e.preventDefault();\n    navigate(\"/login\");\n  };\n\n  return (\n    <CustomNavbarStyles>\n      <nav>\n        <ul className=\"menu\">\n          <li className=\"logo\">\n            <a href=\"#\">CBT</a>\n          </li>\n\n          {authenticated && user && user.userType == \"super-admin\" && (\n            <li className=\"item\" onClick={() => navigate(\"/dashboard\")}>\n              <a>Dashboard</a>\n            </li>\n          )}\n\n          {authenticated && user && user.userType == \"super-admin\" && (\n            <li className=\"item has-submenu\">\n              <a tabIndex=\"0\">User Accounts</a>\n              <ul className=\"submenu\">\n                <li\n                  className=\"subitem\"\n                  onClick={() => navigate(\"/create_user_account\")}\n                >\n                  <a>Create User Account</a>\n                </li>\n\n                <li className=\"subitem\" onClick={() => navigate(\"/users\")}>\n                  <a>Users Account</a>\n                </li>\n              </ul>\n            </li>\n          )}\n\n          {authenticated && user && user.userType == \"super-admin\" && (\n            <li className=\"item has-submenu\">\n              <a tabIndex=\"0\">Create Exam / Subject</a>\n              <ul className=\"submenu\">\n                <li\n                  className=\"subitem\"\n                  onClick={() => navigate(\"/create_subject\")}\n                >\n                  <a>Create Subject</a>\n                </li>\n                <li\n                  className=\"subitem\"\n                  onClick={() => navigate(\"/create_examination_schedule\")}\n                >\n                  <a>Create Examination</a>\n                </li>\n              </ul>\n            </li>\n          )}\n\n          {authenticated && user && user.userType == \"super-admin\" && (\n            <li className=\"item has-submenu\">\n              <a tabIndex=\"0\">Add Question To Examination</a>\n              <ul className=\"submenu\">\n                <li\n                  className=\"subitem\"\n                  onClick={() => navigate(\"/add_questions_examination\")}\n                >\n                  <a>Add Multi/Spelling Questions To Exam</a>\n                </li>\n\n                <li\n                  className=\"subitem\"\n                  onClick={() => navigate(\"/add_essay_questions_examination\")}\n                >\n                  <a>Add Essay Questions To Exam</a>\n                </li>\n              </ul>\n            </li>\n          )}\n\n          {authenticated && user && user.userType == \"super-admin\" && (\n            <li className=\"item has-submenu\">\n              <a tabIndex=\"0\">Results Functions</a>\n              <ul className=\"submenu\">\n                <li\n                  className=\"subitem\"\n                  onClick={() => navigate(\"/exam_results\")}\n                >\n                  <a>Examination Result</a>\n                </li>\n              </ul>\n            </li>\n          )}\n\n          {authenticated && user && user.userType == \"super-admin\" && (\n            <li className=\"item has-submenu\">\n              <a tabIndex=\"0\">Admin Quiz Functions</a>\n              <ul className=\"submenu\">\n                <li\n                  className=\"subitem\"\n                  onClick={() => navigate(\"/upload_questions\")}\n                >\n                  <a>Upload Questions</a>\n                </li>\n\n                <li\n                  className=\"subitem\"\n                  onClick={() => navigate(\"/activate_exams\")}\n                >\n                  <a>Activate Exam</a>\n                </li>\n\n                <li\n                  className=\"subitem\"\n                  onClick={() => navigate(\"/view_running_examination\")}\n                >\n                  <a>Running Examination</a>\n                </li>\n              </ul>\n            </li>\n          )}\n\n          {authenticated && user && user.userType == \"super-admin\" && (\n            <li className=\"item has-submenu\">\n              <a tabIndex=\"0\">Add Questions</a>\n              <ul className=\"submenu\">\n                <li\n                  className=\"subitem\"\n                  onClick={() => navigate(\"/add_question\")}\n                >\n                  <a>Add Multi Choice Questions</a>\n                </li>\n\n                <li\n                  className=\"subitem\"\n                  onClick={() => navigate(\"/add_spelling_question\")}\n                >\n                  <a>Add Spelling Questions</a>\n                </li>\n\n                <li\n                  className=\"subitem\"\n                  onClick={() => navigate(\"/add_essay_question\")}\n                >\n                  <a>Add Essay Questions</a>\n                </li>\n              </ul>\n            </li>\n          )}\n\n          {authenticated && user && user.userType == \"super-admin\" && (\n            <li className=\"item has-submenu\">\n              <a tabIndex=\"0\">Load Questions</a>\n              <ul className=\"submenu\">\n                <li\n                  className=\"subitem\"\n                  onClick={() => navigate(\"/load_multi_choice_question\")}\n                >\n                  <a>Load Multi Choice Questions</a>\n                </li>\n\n                <li\n                  className=\"subitem\"\n                  onClick={() => navigate(\"/load_spelling_question\")}\n                >\n                  <a>Load Spelling Questions</a>\n                </li>\n\n                <li\n                  className=\"subitem\"\n                  onClick={() => navigate(\"/load_essay_question\")}\n                >\n                  <a>Load Essay Questions</a>\n                </li>\n              </ul>\n            </li>\n          )}\n\n          {/* {authenticated && user && user.userType == \"super-admin\" && (\n            <li className=\"item has-submenu\">\n              <a tabIndex=\"0\">Media Files</a>\n              <ul className=\"submenu\">\n                <li\n                  className=\"subitem\"\n                  onClick={() => navigate(\"/upload_media\")}\n                >\n                  <a>Upload Media Files</a>\n                </li>\n              </ul>\n            </li>\n          )} */}\n\n          {authenticated ? (\n            <li className=\"item button\" onClick={handleLogOut}>\n              <a href=\"\">Log Out</a>\n            </li>\n          ) : (\n            <li className=\"item button\" onClick={handleLogIn}>\n              <a href=\"\">Log In</a>\n            </li>\n          )}\n\n          <li className=\"toggle\">\n            <a href=\"#\">\n              <i className=\"fas fa-bars\"></i>\n            </a>\n          </li>\n        </ul>\n      </nav>\n    </CustomNavbarStyles>\n  );\n};\n\nexport default CustomNavbar;\n","/app/src/components/publicRoute.js",[],"/app/src/components/authorized.js",[],"/app/src/components/questionPanel.js",["438","439"],"import React, { useEffect, useState } from \"react\";\nimport QuestionComponent from \"./questionComponent\";\nimport QuestionButtonComponent from \"./questionButtonsComponent\";\nimport QuestionsNumberDiv from \"./questionsNumberDiv\";\nimport styled from \"styled-components\";\nimport CountDownTimer from \"./countDownTimer\";\nimport { useMutation } from \"@apollo/client\";\nimport { ExaminationEnded } from \"../graphql/mutation\";\nimport store from \"store\";\nimport methods from \"../methods\";\nimport Modal from \"react-modal\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { useExamDetails } from \"../context\";\n\nModal.setAppElement(\"#root\");\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\nconst QuestionPanelStyles = styled.div`\n  display: flex;\n  flex-direction: column;\n  .button-div {\n    display: block;\n  }\n`;\n\nconst disableContext = (e) => {\n  e.preventDefault();\n};\n\nconst disableButtons = (e) => {\n  const code = e.which || e.keyCode;\n  switch (code) {\n    case 116:\n      return e.preventDefault();\n    default:\n      return true;\n  }\n};\n\nconst QuestionPanel = (props) => {\n  const { examId } = useParams();\n  const [examinationEndedFunction, examinationEndedResult] =\n    useMutation(ExaminationEnded);\n  const [submitting, setSubmitting] = useState(false);\n  const [errors, setErrors] = useState(null);\n  const {\n    examStarted,\n    examQuestions: questions,\n    setDuration,\n    setExamStarted,\n    setExamQuestions,\n    setCurrentIndex,\n    setSkippedQuestion,\n  } = useExamDetails();\n\n  const questionsFromStore = store.get(\"examQuestions\");\n  const examIdinStore = store.get(\"examId\");\n  const examStartedinStore = store.get(\"examStarted\");\n  const [scoreDetails, setScoreDetails] = useState(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (!examId) {\n      navigate(\"/exam_start_page\");\n    }\n  }, [examId]);\n\n  useEffect(() => {\n    window.addEventListener(\"contextmenu\", disableContext);\n    window.addEventListener(\"keydown\", disableButtons);\n    return () => {\n      window.removeEventListener(\"contextmenu\", disableContext);\n      window.removeEventListener(\"keydown\", disableButtons);\n    };\n  });\n\n  useEffect(() => {\n    const { loading, data, error } = examinationEndedResult;\n    if (loading) {\n      //show a modal asking them to wait that submission is on going.\n    }\n    if (data) {\n      //redirect here to the summary page\n      setSubmitting(!submitting);\n      methods.Utils.ClearStoreValue();\n      //clear the context\n      setDuration(0);\n      setExamStarted(false);\n      setExamQuestions([]);\n      setCurrentIndex(0);\n      setSkippedQuestion([]);\n      navigate(`/exam_summary/${examId}`, {\n        state: { scoreDetails: scoreDetails },\n        replace: true,\n      });\n    }\n\n    if (error) {\n      //run the query submission again\n      //while (tryAgain < 3) {\n      //\n      //submitQuizHandler();\n      // setTryAgain(tryAgain + 1);\n      //}\n      setErrors(error.message);\n      setSubmitting(!submitting);\n    }\n  }, [\n    examinationEndedResult.loading,\n    examinationEndedResult.data,\n    examinationEndedResult.error,\n  ]);\n\n  const submitQuizHandler = async () => {\n    //get the quiz answers and the other variables in the system\n    let examStartedVariable, examIdVariable;\n    examStartedVariable = examStarted ? examStarted : examStartedinStore;\n    examIdVariable = examId ? examId : examIdinStore;\n    const answersArray = questions ? questions : questionsFromStore;\n    if (examStartedVariable && examIdVariable) {\n      //we are good we can gather things here\n      const score = methods.ExamMarking(answersArray);\n      const scripts = methods.GenerateScripts(answersArray);\n      const submissionObject = {\n        examTakenId: examIdVariable,\n        examFinished: true,\n        timeExamEnded: new Date(),\n        score,\n        scripts,\n      };\n      setScoreDetails({\n        score,\n        scripts,\n        examId: examIdVariable,\n        totalQuestions: scripts.length,\n      });\n      try {\n        setSubmitting(!submitting);\n        await examinationEndedFunction({\n          variables: {\n            submissionDetails: submissionObject,\n          },\n        });\n      } catch (error) {}\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {/* <NewWindow\n      title=\"Examination panel page\"\n      features={((window.innerHeight = 900), (window.innerWidth = 1200))}\n    >  */}\n      {/* <Suspense fallback={<h3>Loading Questions...</h3>}> */}\n      <QuestionPanelStyles>\n        <div className=\"row\">\n          <div className=\"col-md-8\">\n            {errors && <p className=\"lead text-danger\">{errors}</p>}\n            <QuestionComponent />\n\n            <QuestionButtonComponent\n              {...props}\n              submitQuiz={submitQuizHandler}\n            />\n          </div>\n          <div className=\"col-md-4\">\n            <div className=\"text-center\">\n              <CountDownTimer submitQuiz={submitQuizHandler} />\n            </div>\n\n            <QuestionsNumberDiv />\n          </div>\n        </div>\n      </QuestionPanelStyles>\n      {/* </Suspense> */}\n      {/* </NewWindow>  */}\n\n      <Modal\n        isOpen={submitting}\n        style={customStyles}\n        contentLabel=\"Examination submission modal\"\n      >\n        <p>Submitting examination please wait........</p>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default QuestionPanel;\n","/app/src/components/examSummaryComponent.js",["440","441","442","443"],"import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport methods from \"../methods\";\nimport { useParams, useLocation, useNavigate } from \"react-router-dom\";\nimport { useAuth } from \"../context\";\n\n\nconst ExamSummaryStyles = styled.div`\n  .summaryDiv {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 600px;\n  }\n  .summaryBoard {\n    background-color: #0f292d;\n    width: 100%;\n    margin: 20%;\n    padding: 20px;\n    color: white;\n\n    p {\n      font-size: 20px;\n      padding: 20px;\n    }\n\n    span {\n      float: right;\n    }\n  }\n  .user {\n    background: #1a3a28;\n    padding: 20px;\n  }\n  .score {\n    background: #205d4c;\n    padding: 20px;\n  }\n\n  .total {\n    background: #11233e;\n    padding: 20px;\n  }\n\n  .percentage {\n    background: #080802;\n    padding: 20px;\n  }\n  .grade {\n    background: #44194c;\n    padding: 20px;\n  }\n`;\n\nconst disableF5 = (event) => {\n  switch (event.keyCode) {\n    case 116: // 'F5'\n      event.returnValue = false;\n      event.preventDefault();\n      return false;\n  }\n};\n\nconst ExamSummaryComponent = () => {\n  const { examId } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { currentLoginUser: currentUser } = useAuth();\n  const scoreDetails = location.state && location.state.scoreDetails;\n  const { score, totalQuestions } = scoreDetails || {};\n  const percentageScore = ((score / totalQuestions) * 100).toFixed(2);\n  const grade = percentageScore >= 50 ? \"Pass\" : \"Fail\";\n\n  //clear the store and variables here\n  const navigateToScriptPage = () => {\n    navigate(`/examination_script/${examId}`);\n  };\n\n  useEffect(() => {\n    //persists it to store here\n    methods.Utils.ClearStoreValue();\n  }, []);\n\n  const onUnloadFunction = () => {\n    alert(\"we are about starting the exam\");\n  };\n  return (\n    <ExamSummaryStyles>\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <div className=\"summaryDiv\">\n            <div className=\"summaryBoard\">\n              <p className=\"text-center lead\">Result Summary</p>\n              <p className=\"user\">\n                Name:{\" \"}\n                <span>\n                  { currentUser?.name?.toUpperCase()}\n                </span>\n              </p>\n          \n\n              <p className=\"score\">\n                Score: <span>{score}</span>\n              </p>\n\n              <p className=\"total\">\n                Total : <span>{totalQuestions}</span>\n              </p>\n\n              <p className=\"percentage\">\n                Percentage : <span>{percentageScore}%</span>\n              </p>\n\n              <p className=\"grade\">\n                Grade : <span>{grade}</span>\n              </p>\n            </div>\n          </div>\n          <div className=\"text-center\">\n            <button\n              className=\"btn btn-danger btn-lg\"\n              onClick={navigateToScriptPage}\n            >\n              view scripts\n            </button>\n          </div>\n        </div>\n      </div>\n    </ExamSummaryStyles>\n  );\n};\n\nexport default ExamSummaryComponent;\n","/app/src/components/uploadExaminationQuestions.js",["444","445","446"],"import React, { useEffect, useState } from \"react\";\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\nimport { GetDifferentExamination } from \"../graphql/queries\";\nimport {\n  UploadBulkExaminationQuestions,\n  UploadBulkSpellingQuestions,\n  UploadBulkEssayQuestions,\n} from \"../graphql/mutation\";\nimport * as XLSX from \"xlsx\";\nimport methods from \"../methods\";\n\nconst UploadExaminationQuestions = () => {\n  const [loading, setLoading] = useState(false);\n  const [selectedExamId, setSelectedExamId] = useState(null);\n  const [selectedExamName, setSelectedExamName] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [excelData, setExcelData] = useState([]);\n  const [submitted, setSubmitted] = useState(false);\n  const [examTypeData, setExamDataType] = useState([]);\n  const [examTypeSelection, setExamTypeSelection] = useState(null);\n\n  const [examTypeQuery, examTypeResult] = useLazyQuery(GetDifferentExamination);\n  const [uploadQuestion, uploadQuestionResult] = useMutation(\n    UploadBulkExaminationQuestions\n  );\n\n  const [uploadSpellingQuestion, uploadSpellingQuestionResult] = useMutation(\n    UploadBulkSpellingQuestions\n  );\n\n  const [uploadEssayQuestion, uploadEssayQuestionResult] = useMutation(\n    UploadBulkEssayQuestions\n  );\n\n  useEffect(() => {\n    if (examTypeResult.loading) {\n      setLoading(true);\n    }\n    if (examTypeResult.data) {\n      const data = examTypeResult.data.getExamByType;\n      if (data.length > 0) {\n        setExamDataType(data);\n        setLoading(false);\n      } else {\n        setExamDataType(data);\n        setLoading(false);\n        setSelectedExamId(null);\n        setSelectedExamName(null);\n      }\n    }\n    if (examTypeResult.error) {\n      setLoading(false);\n      setErrors(examTypeResult.error);\n    }\n  }, [examTypeResult.data, examTypeResult.error, examTypeResult.loading]);\n\n  useEffect(() => {\n    if (uploadQuestionResult.error) {\n      setErrors(uploadQuestionResult.error.message);\n      setSubmitted(false);\n    }\n\n    if (uploadQuestionResult.data) {\n      setErrors(null);\n      setSubmitted(false);\n      document.getElementById(\"uploadExcelFile\").value = \"\";\n      setSelectedExamId(null);\n      setSelectedExamName(null);\n      window.alert(\n        `${uploadQuestionResult.data.saveBulkQuestion} questions saved in the database.`\n      );\n    }\n  }, [uploadQuestionResult.error, uploadQuestionResult.data]);\n\n  useEffect(() => {\n    if (uploadSpellingQuestionResult.error) {\n      setErrors(uploadSpellingQuestionResult.error.message);\n      setSubmitted(false);\n    }\n\n    if (uploadSpellingQuestionResult.data) {\n      setErrors(null);\n      setSubmitted(false);\n      document.getElementById(\"uploadExcelFile\").value = \"\";\n      setSelectedExamId(null);\n      setSelectedExamName(null);\n      window.alert(\n        `${uploadSpellingQuestionResult.data.saveBulkSpellingQuestion} questions saved in the database.`\n      );\n    }\n  }, [uploadSpellingQuestionResult.error, uploadSpellingQuestionResult.data]);\n\n  useEffect(() => {\n    if (uploadEssayQuestionResult.error) {\n      setErrors(uploadEssayQuestionResult.error.message);\n      setSubmitted(false);\n    }\n\n    if (uploadEssayQuestionResult.data) {\n      setErrors(null);\n      setSubmitted(false);\n      document.getElementById(\"uploadExcelFile\").value = \"\";\n      setSelectedExamId(null);\n      setSelectedExamName(null);\n      window.alert(\n        `${uploadEssayQuestionResult.data.saveBulkEssayQuestion} questions saved in the database.`\n      );\n    }\n  }, [uploadEssayQuestionResult.error, uploadEssayQuestionResult.data]);\n\n  const handleExamChange = (e) => {\n    const value = e.target.value;\n    if (value == \"0\") return;\n    const splitValue = value.split(\"/\");\n    setSelectedExamId(splitValue[0]);\n    setSelectedExamName(splitValue[1]);\n  };\n\n  const handleExamTypeChange = (e) => {\n    const value = e.target.value;\n    if (value !== \"0\") {\n      setExamTypeSelection(value);\n      examTypeQuery({\n        variables: {\n          examType: value,\n        },\n      });\n    }\n  };\n\n  const readExcel = (file) => {\n    const fileReader = new FileReader();\n    setLoading(true);\n    fileReader.onload = function () {\n      const wb = XLSX.read(fileReader.result, { type: \"binary\" });\n      const workBookName = wb.SheetNames[0];\n      const excel = wb.Sheets[workBookName];\n      const excelData = methods.bulkMethods.SheetToArray(excel);\n      setExcelData(excelData);\n      setLoading(true);\n    };\n    fileReader.readAsBinaryString(file);\n  };\n\n  const handleFileUploadChange = (e) => {\n    const file = e.target.files[0];\n    const fileName = file && file.name;\n    const lastIndexOfDot = fileName && fileName.lastIndexOf(\".\");\n    const extention =\n      fileName && fileName.substr(lastIndexOfDot + 1, fileName.length);\n    const allowedExtention = [\"xlsx\", \"ods\", \"xls\"];\n    const findIndex = allowedExtention.indexOf(extention.toLowerCase());\n    if (findIndex == -1) {\n      window.alert(\n        `you can not upload ${extention} file. Only Excel files are allowed`\n      );\n      document.getElementById(\"uploadExcelFile\").value = \"\";\n      return;\n    }\n    readExcel(file);\n  };\n\n  const uploadQuestionToDatabase = async (e) => {\n    e.preventDefault();\n    //get the array of questions\n    //check if a question has an answer\n    setSubmitted(true);\n    switch (examTypeSelection) {\n      case \"multiple choice questions\":\n        //we are good we can upload our questions to database\n        try {\n          const questionObject = methods.bulkMethods.saveBulkQuestions(\n            excelData,\n            selectedExamId,\n            selectedExamName\n          );\n          const { type, payload } = questionObject;\n          if (type === \"error\") {\n            let questionString = \"\";\n            payload.map((question) => {\n              questionString += \" \" + question + \"\\n\";\n            });\n            window.alert(\n              `The followng questions have no answers \\n ${questionString}`\n            );\n            document.getElementById(\"uploadExcelFile\").value = \"\";\n            return;\n          } else {\n            //we are good we can upload our questions to database\n            await uploadQuestion({\n              variables: {\n                input: payload,\n              },\n            });\n          }\n        } catch (error) {\n          //parse the error and return the questions without answers\n        }\n        break;\n      case \"spelling examination\":\n        const { payload } = methods.SaveBulkSpellingQuestions(\n          excelData,\n          selectedExamId,\n          selectedExamName\n        );\n        try {\n          await uploadSpellingQuestion({\n            variables: {\n              input: payload,\n            },\n          });\n        } catch (error) {}\n        break;\n      case \"short answer exam\":\n        const { payloadValue } = methods.SaveBulkEssayQuestions(\n          excelData,\n          selectedExamId,\n          selectedExamName\n        );\n        try {\n          await uploadEssayQuestion({\n            variables: {\n              input: payloadValue,\n            },\n          });\n        } catch (error) {}\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div className=\"row justify-content-center\">\n      <div className=\"col-md-6 container-shadow\">\n        {errors && <p className=\"lead text-danger\">Error: {errors}</p>}\n\n        <p className=\"text-center lead\">Upload Questions From Excel Document</p>\n        <form>\n          <div className=\"form-group\">\n            <select className=\"custom-select\" onChange={handleExamTypeChange}>\n              <option value=\"0\">select examination type</option>\n              <option value=\"multiple choice questions\">\n                Multiple choice questions\n              </option>\n              <option value=\"spelling examination\">\n                Spelling examination{\" \"}\n              </option>\n              <option value=\"short answer exam\">Short answer type</option>\n            </select>\n          </div>\n          <div className=\"form-group\">\n            <select className=\"custom-select\" onChange={handleExamChange}>\n              <option value=\"0\">select subject </option>\n              {loading && <option>loading data.......</option>}\n              {examTypeData.map(({ id, examName }) => {\n                return (\n                  <option value={`${id}/${examName}`} key={id}>\n                    {examName}\n                  </option>\n                );\n              })}\n            </select>\n          </div>\n\n          <div className=\"form-group\">\n            {selectedExamName && (\n              <p className=\"lead\">\n                <span>{selectedExamName}</span>\n              </p>\n            )}\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"uploadExcelFile\">Upload Excel File</label>\n            <br />\n            <input\n              type=\"file\"\n              className=\"form-control-file\"\n              id=\"uploadExcelFile\"\n              onChange={handleFileUploadChange}\n            />\n          </div>\n\n          {selectedExamId && selectedExamName && (\n            <div className=\"form-group\">\n              <button\n                disabled={submitted}\n                className=\"btn btn-success btn-lg\"\n                onClick={uploadQuestionToDatabase}\n              >\n                {submitted ? \"please wait......\" : \"click to upload questions\"}\n              </button>\n            </div>\n          )}\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default UploadExaminationQuestions;\n","/app/src/components/saveNewQuestion.js",["447","448","449","450","451","452","453","454","455","456","457","458"],"import React, { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport DraftJsToolBar from \"../common/draftJSToolBar\";\nimport draftToHtml from \"draftjs-to-html\";\nimport {\n  EditorState,\n  convertToRaw,\n  ContentState,\n  convertFromHTML,\n} from \"draft-js\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GetAllExamination } from \"../graphql/queries\";\nimport { SubmitQuestion, EditQuestion } from \"../graphql/mutation\";\n\nconst NewQuestionStyles = styled.div`\n  textarea {\n    text-align: center;\n  }\n  .append-div {\n    cursor: pointer;\n  }\n  .append-text {\n    font-size: 19px;\n  }\n  .correctAnswer {\n    border: 2px solid green;\n    padding: 10px;\n  }\n  .remove-span {\n    font-size: 30px;\n    color: red;\n    margin-right: 20px;\n    cursor: pointer;\n    float: right;\n  }\n  .div-select-answer {\n    display: flex;\n    justify-content: space-between;\n  }\n  .answers-div {\n    margin-top: 20px;\n  }\n  .writeQuestion {\n    margin-top: 20px;\n  }\n`;\n\nconst SaveNewQuestion = ({ editMode, questionToEdit, history }) => {\n  //if we are editing the props should have\n  //an editMode prop set to true and the paperdetails\n  //will be stored in a props called paperDetails\n\n  const [question, setQuestion] = useState(null);\n  const [preview, setPreview] = useState(\"\");\n  const [answers, setAnswers] = useState([]);\n  const [text, setText] = useState(\"\");\n  const [explanation, setExplanation] = useState(\"\");\n  const [examType, setExamType] = useState([]);\n  const [loadingData, setLoading] = useState(false);\n  const { loading, error, data } = useQuery(GetAllExamination);\n  const [selectedExamId, setSelectedExamId] = useState(null);\n  const [selectedExamName, setSelectedExamName] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [submitted, setSubmitted] = useState(false);\n  const [submitQuestionToDB, submitQuestionToDBResult] = useMutation(\n    SubmitQuestion\n  );\n  const [editQuestion, editQuestionResult] = useMutation(EditQuestion);\n\n  const textAnswer = useRef();\n\n  useEffect(() => {\n    if (editQuestionResult.error) {\n      setSubmitted(!submitted);\n      setErrors(editQuestionResult.error.message);\n    }\n    if (editQuestionResult.data) {\n      setSubmitted(!submitted);\n      setAnswers([]);\n      setText(\"\");\n      setExplanation(\"\");\n      window.alert(\"question edited.\");\n      history.push(\"/load_question\");\n      window.location.reload();\n    }\n  }, [editQuestionResult.error, editQuestionResult.data]);\n\n  useEffect(() => {\n    if (submitQuestionToDBResult.error) {\n      setSubmitted(!submitted);\n      setErrors(submitQuestionToDBResult.error.message);\n    }\n    if (submitQuestionToDBResult.data) {\n      setSubmitted(!submitted);\n      setAnswers([]);\n      setText(\"\");\n      setExplanation(\"\");\n      window.alert(\"question saved to database.\");\n    }\n  }, [submitQuestionToDBResult.error, submitQuestionToDBResult.data]);\n\n  useEffect(() => {\n    if (loading) {\n      setLoading(!loadingData);\n    }\n    if (error) {\n      setErrors(error.message);\n      setLoading(!loadingData);\n    }\n    if (data) {\n      setExamType(data.getAllExam);\n      setLoading(!loadingData);\n    }\n  }, [loading, error, data]);\n\n  const handleEnterButtonPressed = (e) => {\n    if (e.keyCode == 13) {\n      handleAnswerSaved();\n    }\n  };\n\n  const handleExamChange = (e) => {\n    const value = e.target.value;\n    if (value == \"0\") return;\n    const splitValue = value.split(\"/\");\n    setSelectedExamId(splitValue[0]);\n    setSelectedExamName(splitValue[1]);\n  };\n\n  useEffect(() => {\n    if (textAnswer && textAnswer.current) {\n      textAnswer.current.addEventListener(\"keyup\", handleEnterButtonPressed);\n    }\n    return () => {\n      if (textAnswer && textAnswer.current) {\n        textAnswer.current.removeEventListener(\n          \"keyup\",\n          handleEnterButtonPressed\n        );\n      }\n    };\n  });\n\n  useEffect(() => {\n    //loading question from props here\n    const questionFromProps =\n      (editMode && questionToEdit && questionToEdit.question) || \"\";\n    if (questionFromProps) {\n      const blocksFromHTML = convertFromHTML(questionToEdit.question);\n      const content = ContentState.createFromBlockArray(\n        blocksFromHTML.contentBlocks,\n        blocksFromHTML.entityMap\n      );\n      setQuestion(EditorState.createWithContent(content));\n      setPreview(questionToEdit.question);\n      setAnswers(questionToEdit.answers);\n      setExplanation(questionToEdit.explanation);\n    } else {\n      setQuestion(EditorState.createEmpty());\n      setPreview(\"<p>typed question will appear here</p>\");\n    }\n  }, []);\n\n  const handleChange = (editorState) => {\n    let html = draftToHtml(convertToRaw(editorState.getCurrentContent()));\n    setQuestion(editorState);\n    setPreview(html);\n  };\n\n  const setHtml = (html) => {\n    return { __html: html };\n  };\n\n  const handleAnswerSaved = () => {\n    //save the text in the answer array\n    if (text == \"\") return;\n    const obj = {\n      isCorrect: false,\n      selected: false,\n      option: text,\n    };\n    setAnswers((oldAnswers) => {\n      return [...oldAnswers, obj];\n    });\n    setText(\"\");\n  };\n\n  const handleTextChange = (e) => {\n    const value = e.target.value;\n    setText(value);\n  };\n\n  const selectAnswer = (index) => {\n    let oldAnswers = [...answers];\n    const previouSelection = oldAnswers.some((ans) => ans.isCorrect == true);\n    if (previouSelection) {\n      //map through and return array where all isCorrect is false.\n      let newArray = [];\n      oldAnswers.map((ele) => {\n        const obj = {\n          option: ele.option,\n          isCorrect: false,\n          selected: false,\n        };\n        newArray.push(obj);\n      });\n      let selectedAnswer = newArray[index];\n      selectedAnswer.isCorrect = !selectedAnswer.isCorrect;\n      newArray[index] = selectedAnswer;\n      setAnswers(newArray);\n    } else {\n      let selectedAnswer = oldAnswers[index];\n      selectedAnswer.isCorrect = !selectedAnswer.isCorrect;\n      oldAnswers[index] = selectedAnswer;\n      setAnswers(oldAnswers);\n    }\n  };\n\n  const removeAnswer = (e, index) => {\n    e.stopPropagation();\n    const oldAnswers = [...answers];\n    oldAnswers.splice(index, 1);\n    setAnswers(oldAnswers);\n  };\n\n  const saveQuestionToDatabase = async () => {\n    //gather all the variables and save the\n    if (!preview)\n      return window.alert(\n        \"we can not save a question without the actual question. can we ?\"\n      );\n    const findAnswers = answers.some((ans) => ans.isCorrect == true);\n    if (!findAnswers) {\n      return window.alert(\"please select the correct answer\");\n    }\n\n    const questionObj = {\n      question: preview,\n      answers,\n      questionImageUrl: \"\",\n      examinationType: selectedExamName,\n      examId: selectedExamId,\n      explanation: explanation,\n    };\n\n    try {\n      setSubmitted(!submitted);\n      await submitQuestionToDB({\n        variables: {\n          input: questionObj,\n        },\n      });\n    } catch (error) {}\n  };\n\n  const handleExplanationChange = (e) => {\n    const value = e.target.value;\n    setExplanation(value);\n  };\n\n  const editQuestionInDatabase = async () => {\n    //construct question to update\n    if (!preview)\n      return window.alert(\n        \"we can not save a question without the actual question. can we ?\"\n      );\n    const findAnswers = answers.some((ans) => ans.isCorrect == true);\n    if (!findAnswers) {\n      return window.alert(\"please select the correct answer\");\n    }\n\n    const questionObj = {\n      question: preview,\n      answers,\n      questionImageUrl: \"\",\n      examinationType: questionToEdit.examinationType,\n      examId: questionToEdit.examId,\n      explanation: explanation,\n    };\n\n    try {\n      setSubmitted(!submitted);\n      await editQuestion({\n        variables: {\n          input: questionObj,\n          questionId: questionToEdit && questionToEdit.id,\n        },\n      });\n    } catch (error) {}\n  };\n\n  return (\n    <NewQuestionStyles>\n      <div className=\"row justify-content-center\">\n        <div className=\"col-md-6 container-shadow\">\n          <p className=\"text-danger lead\">{errors}</p>\n          {!editMode && (\n            <div className=\"form-group\">\n              <select className=\"custom-select\" onChange={handleExamChange}>\n                <option value=\"0\">select examination type</option>\n                {loadingData && <option>loading data.......</option>}\n                {examType &&\n                  examType.length > 0 &&\n                  examType.map(({ id, examName }) => {\n                    return (\n                      <option value={`${id}/${examName}`} key={id}>\n                        {examName}\n                      </option>\n                    );\n                  })}\n              </select>\n            </div>\n          )}\n          <div className=\"form-group\">\n            {selectedExamName && (\n              <p className=\"lead\">\n                <span>\n                  Selected Examination : <b>{selectedExamName}</b>\n                </span>\n              </p>\n            )}\n          </div>\n\n          <div className=\"\">\n            <p className=\"text-center\">\n              <b> Preview of the question</b>\n            </p>\n          </div>\n          <div className=\"\" dangerouslySetInnerHTML={setHtml(preview)} />\n\n          <h4> Type Question</h4>\n\n          <Editor\n            editorState={question}\n            onEditorStateChange={handleChange}\n            editorClassName=\"writeQuestion\"\n            placeholder=\"Type your question here.....\"\n            toolbar={DraftJsToolBar}\n          />\n\n          <div className=\"input-group\">\n            <textarea\n              className=\"form-control\"\n              aria-label=\"With textarea\"\n              value={text}\n              onChange={handleTextChange}\n              ref={textAnswer}\n            ></textarea>\n            <div\n              className=\"input-group-append append-div\"\n              onClick={handleAnswerSaved}\n            >\n              <span className=\"input-group-text append-text\">save answer</span>\n            </div>\n          </div>\n\n          <div className=\"answers-div\">\n            {answers &&\n              answers.length > 0 &&\n              answers.map(({ option, isCorrect }, index) => {\n                return (\n                  <div\n                    className=\"div-select-answer\"\n                    key={index}\n                    onClick={() => selectAnswer(index)}\n                  >\n                    <p className={isCorrect ? \"correctAnswer\" : \"\"}>{option}</p>\n\n                    <span\n                      className=\"remove-span\"\n                      onClick={(e) => removeAnswer(e, index)}\n                    >\n                      &#10006;\n                    </span>\n                  </div>\n                );\n              })}\n          </div>\n\n          <div className=\"form-group\">\n            <label>Explanation for the answer if any</label>\n            <textarea\n              className=\"form-control\"\n              aria-label=\"With textarea\"\n              value={explanation}\n              onChange={handleExplanationChange}\n            ></textarea>\n          </div>\n\n          {editMode ? (\n            <div className=\"text-center\">\n              <button\n                disabled={submitted}\n                className=\"btn btn-lg btn-danger\"\n                onClick={editQuestionInDatabase}\n              >\n                {submitted\n                  ? \"editing question please wait......\"\n                  : \"edit question\"}\n              </button>\n            </div>\n          ) : (\n            <div className=\"text-center\">\n              <button\n                disabled={submitted}\n                className=\"btn btn-lg btn-success\"\n                onClick={saveQuestionToDatabase}\n              >\n                {submitted\n                  ? \"saving question please wait......\"\n                  : \"save question\"}\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </NewQuestionStyles>\n  );\n};\n\nexport default SaveNewQuestion;\n","/app/src/components/loadQuestionsComponent.js",["459","460","461","462","463","464"],"import React, { useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\nimport { GetDifferentExamination, GetAllQuestions } from \"../graphql/queries\";\nimport { DeleteOneQuestion } from \"../graphql/mutation\";\nimport ShowQuestionComponent from \"./showQuestionComponent\";\nimport Loading from \"../common/loading\";\nimport styled from \"styled-components\";\nimport EditButton from \"./editButton\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst LoadQuestionsStyle = styled.div``;\n\nconst buttonsToDisplay = (total, numberPerPage) => {\n  const buttonNumber = +total / +numberPerPage;\n  let array = [];\n  array.length = Math.ceil(buttonNumber);\n  return array.fill(1);\n};\n\nconst LoadQuestionsComponent = ({ history }) => {\n  const navigate = useNavigate();\n  const [examType, setExamType] = useState([]);\n  const [loadingData, setLoading] = useState(false);\n  const [selectedExamId, setSelectedExamId] = useState(\"\");\n  const [selectedExamName, setSelectedExamName] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [questions, setQuestions] = useState({});\n  const [totalQuestion, setTotalQuestion] = useState(0);\n  const [queryRan, setQueryRan] = useState(false);\n\n  const [questionsQuery, questionsQueryResult] = useLazyQuery(GetAllQuestions);\n  const [examsQuery, examsQueryResult] = useLazyQuery(GetDifferentExamination);\n\n  const [deleteQuestion, deleteQuestionResult] = useMutation(DeleteOneQuestion);\n\n  useEffect(() => {\n    examsQuery({\n      variables: {\n        examType: \"multiple choice questions\",\n      },\n    });\n  }, []);\n\n  useEffect(() => {\n    if (examsQueryResult.data) {\n      setExamType(examsQueryResult.data.getExamByType);\n      setLoading(false);\n    }\n\n    if (examsQueryResult.loading) {\n      setLoading(true);\n    }\n\n    if (examsQueryResult.error) {\n      setErrors(examsQueryResult.error.message);\n      setLoading(false);\n    }\n  }, [examsQueryResult.data, examsQueryResult.error]);\n\n \n\n  useEffect(() => {\n    if (questionsQueryResult.error) {\n      setErrors(questionsQueryResult.error.message);\n      setLoading(true);\n      setQueryRan(!queryRan);\n    }\n\n    if (questionsQueryResult.data) {\n      setQuestions(questionsQueryResult.data.getAllQuestions.questions);\n      setTotalQuestion(questionsQueryResult.data.getAllQuestions.totalQuestion);\n      setLoading(false);\n    }\n  }, [questionsQueryResult.error, questionsQueryResult.data]);\n\n  useEffect(() => {\n    if (deleteQuestionResult.error) {\n      setErrors(deleteQuestionResult.error.message);\n      setLoading(true);\n    }\n\n    if (deleteQuestionResult.data) {\n      if (deleteQuestionResult.data.deleteQuestion) {\n        window.alert(\"question deleted successfully\");\n        setLoading(false);\n      }\n    }\n  }, [deleteQuestionResult.error, deleteQuestionResult.data]);\n\n  const getMoreQuestions = (e, index) => {\n    try {\n      e.stopPropagation();\n      e.preventDefault();\n      setLoading(true);\n      setQueryRan(!queryRan);\n      questionsQueryResult.fetchMore({\n        variables: {\n          examId: selectedExamId,\n          offset: questions.length * (index - 1),\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult) return prev;\n          return Object.assign({}, prev, {\n            getAllQuestions: {\n              totalQuestion: fetchMoreResult.getAllQuestions.totalQuestion,\n              __typename: \"QuestionsTotal\",\n              questions: [\n                //...prev.getAllQuestions.questions,\n                ...fetchMoreResult.getAllQuestions.questions,\n              ],\n            },\n          });\n        },\n      });\n    } catch (error) {}\n  };\n\n  const handleExamChange = async (e) => {\n    const value = e.target.value;\n    if (value == \"0\") return;\n    const splitValue = value.split(\"/\");\n    setSelectedExamId(splitValue[0]);\n    setSelectedExamName(splitValue[1]);\n    try {\n      setQueryRan(!queryRan);\n      questionsQuery({\n        variables: {\n          examId: splitValue[0],\n          offset: 0,\n        },\n        fetchPolicy: \"cache-and-network\",\n      });\n    } catch (error) {}\n  };\n\n  const handleButtonAction = (question) => {\n    navigate(\"/edit_question\", {\n      state: { question: question},\n    });\n  };\n\n  const handleQuestionDeleteAction = async ({ questionId, index }) => {\n    //delete the question here\n    try {\n      setLoading(true);\n      await deleteQuestion({\n        variables: {\n          questionId,\n        },\n        refetchQueries: [\n          {\n            query: GetAllQuestions,\n            variables: {\n              examId: selectedExamId,\n              offset: questions.length * (index - 1),\n            },\n          },\n        ],\n      });\n    } catch (error) {}\n  };\n\n  return (\n    <LoadQuestionsStyle>\n      <div className=\"row\">\n        <div className=\"col-md-8 offset-md-2\">\n          {errors && <p className=\"lead text-danger\">Error: {errors}</p>}\n          <div className=\"form-group\">\n            <select className=\"custom-select\" onChange={handleExamChange}>\n              <option value=\"0\">select examination type</option>\n              {examsQueryResult.loading && <option>loading data.......</option>}\n              {examType &&\n                examType.length > 0 &&\n                examType.map(({ id, examName }) => {\n                  return (\n                    <option value={`${id}/${examName}`} key={id}>\n                      {examName}\n                    </option>\n                  );\n                })}\n            </select>\n          </div>\n\n          <div className=\"form-group\">\n            {selectedExamName && (\n              <p className=\"lead\">\n                Selected Examination:{\" \"}\n                <span>\n                  {selectedExamName && selectedExamName.toUpperCase()}\n                </span>\n              </p>\n            )}\n          </div>\n\n          {questions && questions.length > 0 ? (\n            questions.map((question, index) => {\n              return (\n                <React.Fragment key={index}>\n                  <ShowQuestionComponent\n                    question={question}\n                    components={[\n                      EditButton({\n                        variables: question,\n                        style: \"info\",\n                        buttonName: \"Edit Question\",\n                        action: handleButtonAction,\n                      }),\n                      EditButton({\n                        variables: {\n                          questionId: question.id,\n                          index: index + 1,\n                        },\n                        style: \"danger\",\n                        buttonName: \"Delete Question\",\n                        action: handleQuestionDeleteAction,\n                      }),\n                    ]}\n                  />\n                </React.Fragment>\n              );\n            })\n          ) : (\n            <div>\n              {queryRan && (\n                <p>\n                  No questions saved yet for the selected examination;{\" \"}\n                  {selectedExamName}\n                </p>\n              )}\n            </div>\n          )}\n\n          {loadingData && <Loading />}\n\n          <nav aria-label=\"Page navigation example\">\n            <ul className=\"pagination\">\n              {totalQuestion > 20 &&\n                buttonsToDisplay(totalQuestion, 20).map((_, index) => {\n                  return (\n                    <li\n                      className=\"page-item\"\n                      key={index}\n                      onClick={(e) => getMoreQuestions(e, index + 1)}\n                    >\n                      <a className=\"page-link\" href=\"\">\n                        {index + 1}\n                      </a>\n                    </li>\n                  );\n                })}\n            </ul>\n          </nav>\n        </div>\n      </div>\n    </LoadQuestionsStyle>\n  );\n};\n\nexport default LoadQuestionsComponent;\n","/app/src/components/editQuestionComponent.js",[],"/app/src/components/createExaminationSchedule.js",["465","466","467","468","469","470","471","472","473","474"],"import React, { useState, useEffect } from \"react\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport {\n  CreateExaminationSchedule,\n  CreateSpellingExaminationSchedule,\n  CreateEssayExaminationSchedule,\n} from \"../graphql/mutation\";\n\nimport { GetDifferentExamination } from \"../graphql/queries\";\nimport ExaminationTypeComponent from \"../common/examinationTypeComponent\";\n\nimport styled from \"styled-components\";\n\nconst CreateExaminationScheduleStyles = styled.div`\n  .div-time-input {\n    display: flex;\n    justify-content: space-around;\n  }\n  .sm-width {\n    width: 30%;\n  }\n\n  .div-time-input span {\n    margin-bottom: 10px;\n  }\n`;\n\nconst CreateExaminationScheduleComponent = () => {\n  const [errors, setErrors] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [totalQuestions, setTotalQuestions] = useState(\"\");\n  const [scheduleExamName, setScheduleExamName] = useState(\"\");\n  const [hours, setHours] = useState(\"\");\n  const [minutes, setMinutes] = useState(\"\");\n  const [selExamType, setSelExamType] = useState(null);\n  const [selExamDetails, setSelExamDetails] = useState(null);\n\n  const [createSchedule, createScheduleResult] = useMutation(\n    CreateExaminationSchedule\n  );\n\n  const [createSpellingSchedule, createSpellingScheduleResult] = useMutation(\n    CreateSpellingExaminationSchedule\n  );\n\n  const [createEssaySchedule, createEssayScheduleResult] = useMutation(\n    CreateEssayExaminationSchedule\n  );\n\n  const [examTypeQuery, examTypeResult] = useLazyQuery(GetDifferentExamination);\n\n  useEffect(() => {\n    if (createEssayScheduleResult.error) {\n      setErrors(createEssayScheduleResult.error.message);\n      setProcessing(!processing);\n    }\n    if (createEssayScheduleResult.data) {\n      setProcessing(!processing);\n      setTotalQuestions(\"\");\n      setScheduleExamName(\"\");\n      setHours(\"\");\n      setMinutes(\"\");\n      window.alert(\"Examination schedule created successfully\");\n    }\n  }, [createEssayScheduleResult.error, createEssayScheduleResult.data]);\n\n  useEffect(() => {\n    if (createSpellingScheduleResult.error) {\n      setErrors(createSpellingScheduleResult.error.message);\n      setProcessing(!processing);\n    }\n    if (createSpellingScheduleResult.data) {\n      setProcessing(!processing);\n      setTotalQuestions(\"\");\n      setScheduleExamName(\"\");\n      setHours(\"\");\n      setMinutes(\"\");\n      window.alert(\"Examination schedule created successfully\");\n    }\n  }, [createSpellingScheduleResult.error, createSpellingScheduleResult.data]);\n\n  useEffect(() => {\n    if (createScheduleResult.error) {\n      setErrors(createScheduleResult.error.message);\n      setProcessing(!processing);\n    }\n    if (createScheduleResult.data) {\n      setProcessing(!processing);\n      setTotalQuestions(\"\");\n      setScheduleExamName(\"\");\n      setHours(\"\");\n      setMinutes(\"\");\n      window.alert(\"Examination schedule created successfully\");\n    }\n  }, [createScheduleResult.error, createScheduleResult.data]);\n\n  const handleFormSubmit = async (e) => {\n    e.preventDefault();\n    if (!selExamDetails) {\n      return window.alert(\"please select the examination type\");\n    }\n    //gather all the input here\n    if (scheduleExamName == \"\") {\n      return window.alert(\"The Examination name is a required field \");\n    }\n    if (totalQuestions == \"\") {\n      return window.alert(\"The total questions field is required.\");\n    }\n    if (hours == \"\" && minutes == \"\") {\n      return window.alert(\"Please set the examination duration\");\n    }\n    const duration = +hours * 60 + +minutes;\n    const scheduleObj = {\n      numberofQuestions: +totalQuestions,\n      examinationName: scheduleExamName,\n      active: false,\n      examinationDuration: duration,\n      questions: [],\n      questionType: selExamType,\n      examTypeID: selExamDetails.examId,\n      examTypeName: selExamDetails.examName,\n    };\n    const confirmDetails = window.confirm(`Please confirm the following details: \\n\n                                           Examination schedule name : ${scheduleExamName} \\n\n                                           Number of questions: ${totalQuestions} \\n\n                                           Examination duration: ${\n                                             hours ? hours : 0\n                                           } hours : ${minutes} minutes \\n\n\n    `);\n    if (!confirmDetails) return;\n    switch (selExamType) {\n      case \"multiple choice questions\":\n        try {\n          setProcessing(!processing);\n          await createSchedule({\n            variables: {\n              input: scheduleObj,\n            },\n            refetchQueries: [\n              {\n                query: GetDifferentExamination,\n                variables: {\n                  examType: selExamType\n                }\n              }\n            ]\n          });\n        } catch (error) {}\n        break;\n      case \"spelling examination\":\n        try {\n          setProcessing(!processing);\n          await createSpellingSchedule({\n            variables: {\n              input: scheduleObj,\n            },\n            refetchQueries: [\n              {\n                query: GetDifferentExamination,\n                variables: {\n                  examType: selExamType\n                }\n              }\n            ]\n          });\n        } catch (error) {}\n\n        break;\n      case \"short answer exam\":\n        try {\n          setProcessing(!processing);\n          await createEssaySchedule({\n            variables: {\n              input: scheduleObj,\n            },\n            refetchQueries: [\n              {\n                query: GetDifferentExamination,\n                variables: {\n                  examType: selExamType\n                }\n              }\n            ]\n          });\n        } catch (error) {}\n        break;\n      case \"essay exam\":\n        break;\n      case \"quantitative exam\":\n        break;\n\n      default:\n        break;\n    }\n  };\n  const handleChange = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    switch (name) {\n      case \"totalQuestions\":\n        setTotalQuestions(value);\n        break;\n      case \"scheduleExamName\":\n        setScheduleExamName(value);\n        break;\n      case \"hours\":\n        setHours(value);\n        break;\n      case \"minutes\":\n        setMinutes(value);\n        break;\n    }\n  };\n\n  const selectedExamTypeFunc = (examType) => {\n    setSelExamType(examType);\n  };\n  const selectedExamNameFunc = ({ examId, examName }) => {\n    setSelExamDetails({ examId, examName });\n  };\n  return (\n    <CreateExaminationScheduleStyles>\n      <div className=\"row justify-content-center\">\n        <div className=\"col-md-8 container-shadow\">\n          <h3 className=\"text-center\">Create New Examination Schedule</h3>\n          {errors && <p className=\"lead text-danger\">Error: {errors}</p>}\n          <ExaminationTypeComponent\n            selectedExamTypeFunc={selectedExamTypeFunc}\n            selectedExamNameFunc={selectedExamNameFunc}\n            display=\"all\"\n          />\n          <form onSubmit={handleFormSubmit}>\n            <div className=\"mb-3\">\n              <label htmlFor=\"examinationName\" className=\"form-label\">\n                Examination schedule name\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control input\"\n                id=\"examinationName\"\n                value={scheduleExamName}\n                name=\"scheduleExamName\"\n                onChange={handleChange}\n                aria-describedby=\"examHelp\"\n              />\n              <div id=\"examHelp\" className=\"form-text\">\n                Name of the schedule examination\n              </div>\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"totalQuestions\" className=\"form-label\">\n                Total Question\n              </label>\n\n              <input\n                type=\"number\"\n                value={totalQuestions}\n                className=\"form-control sm-width input\"\n                id=\"totalQuestions\"\n                name=\"totalQuestions\"\n                aria-describedby=\"emailHelp\"\n                onChange={handleChange}\n              />\n              <div id=\"emailHelp\" className=\"form-text\">\n                Total number of questions in the examination\n              </div>\n            </div>\n            <div className=\"mb-3\">\n              <div className=\"row\">\n                <div className=\"col-md-3\">\n                  <input\n                    type=\"number\"\n                    name=\"hours\"\n                    className=\"form-control input\"\n                    value={hours}\n                    onChange={handleChange}\n                  />\n                  <span>Hour</span>\n                </div>\n\n                <div className=\"col-md-3\">\n                  <input\n                    type=\"number\"\n                    name=\"minutes\"\n                    className=\"form-control input\"\n                    value={minutes}\n                    onChange={handleChange}\n                  />\n                  <span>Minutes</span>\n                </div>\n              </div>\n\n              <div id=\"emailHelp\" className=\"form-text\">\n                Set the duration of the examination\n              </div>\n            </div>\n\n            <div className=\"text-center\">\n              <button\n                type=\"submit\"\n                disabled={processing}\n                className=\"btn btn-success btn-lg\"\n              >\n                {processing\n                  ? \"please wait.....\"\n                  : \"submit examination schedule\"}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </CreateExaminationScheduleStyles>\n  );\n};\n\nexport default CreateExaminationScheduleComponent;\n","/app/src/components/addQuestionsToExamination.js",["475","476","477","478","479","480","481"],"import React, { useState, useEffect } from \"react\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport {\n  AutoGenerateQuestions,\n  AutoGenerateSpellingQuestions,\n} from \"../graphql/queries\";\nimport {\n  AddQuestionsToScheduleExamination,\n  AddSpellingQuestionsArrayToScheduleExam,\n} from \"../graphql/mutation\";\nimport styled from \"styled-components\";\nimport LoadQuestionsComponent from \"../common/loadQuestionsComponent\";\nimport ExaminationTypeComponent from \"../common/examinationTypeComponent\";\n\nconst AddQuestionStyles = styled.div`\n  .div-details {\n    margin: 20px 0px;\n  }\n  .question-divs {\n    padding-left: 10px;\n    cursor: pointer;\n  }\n\n  .div-question-details {\n    display: flex;\n    padding: 10px;\n    font-size: 16px;\n  }\n  .exam-details {\n    background: #02291c;\n    text-align: center;\n    padding: 20px;\n    color: #fff;\n  }\n`;\n\nconst setHtml = (html) => {\n  return { __html: html };\n};\n\nconst AddQuestionsToExaminationComponent = () => {\n  const [errors, setErrors] = useState(null);\n  const [examType, setExamType] = useState([]);\n  const [processing, setProcessing] = useState(false);\n  const [examData, setExamData] = useState(null);\n  const [loadQuestion, setLoadQuestion] = useState(false);\n  const [questionLoading, setQuestionLoading] = useState(false);\n  const [selectedQuestion, setSelectedQuestion] = useState([]);\n  const [submitted, setSubmitted] = useState(false);\n  const [autoProcessing, setAutoProcessing] = useState(false);\n  const [scheduleArray, setScheduleArray] = useState([]);\n  const [examScheduleDetails, setExamScheduleDetails] = useState(null);\n\n  //auto generate multi choice questions\n  const [autoGenerateFunc, autoGenResult] = useLazyQuery(\n    AutoGenerateQuestions,\n    {\n      variables: {\n        examId: examData && examData.examId,\n        number: examScheduleDetails && examScheduleDetails.numberofQuestions,\n      },\n    }\n  );\n\n  //auto generate spelling questions\n  const [autoGenerateSpellingFunc, autoGenSpellingResult] = useLazyQuery(\n    AutoGenerateSpellingQuestions,\n    {\n      variables: {\n        examId: examData && examData.examId,\n        number: examScheduleDetails && examScheduleDetails.numberofQuestions,\n      },\n    }\n  );\n  //add multi choice questions to exam\n  const [addQuestionToExamination, addQuestionsToExamResult] = useMutation(\n    AddQuestionsToScheduleExamination\n  );\n\n  //add multi spelling mutation questions to exam\n  const [\n    addSpellingQuestionToExam,\n    addSpellingQuestionsToExamResult,\n  ] = useMutation(AddSpellingQuestionsArrayToScheduleExam);\n\n  //auto generate multi choice effect questions\n  useEffect(() => {\n    if (autoGenResult.data) {\n      //set the questions selected here\n      const autoQuestions = autoGenResult.data.autoGenQuestions;\n      setAutoProcessing(false);\n      setSelectedQuestion(autoQuestions);\n    }\n    if (autoGenResult.error) {\n      setErrors(autoGenResult.error);\n      setAutoProcessing(false);\n    }\n  }, [autoGenResult.data, autoGenResult.error]);\n\n  //auto generate spellings effect questions\n  useEffect(() => {\n    if (autoGenSpellingResult.data) {\n      //set the questions selected here\n      const autoQuestions = autoGenSpellingResult.data.autoGenSpellingQuestions;\n      setAutoProcessing(false);\n      setSelectedQuestion(autoQuestions);\n    }\n    if (autoGenSpellingResult.error) {\n      setErrors(autoGenSpellingResult.error);\n      setAutoProcessing(false);\n    }\n  }, [autoGenSpellingResult.data, autoGenSpellingResult.error]);\n\n  //add multi choice question to exam mutation\n  useEffect(() => {\n    if (addQuestionsToExamResult.error) {\n      setProcessing(false);\n      setSubmitted(false);\n      setErrors(addQuestionsToExamResult.error.message);\n    }\n    if (\n      addQuestionsToExamResult.data &&\n      addQuestionsToExamResult.data.addQuestionsToExam\n    ) {\n      setProcessing(false);\n      setSubmitted(false);\n      window.alert(\"questions added successfully\");\n    }\n  }, [addQuestionsToExamResult.error, addQuestionsToExamResult.data]);\n\n  //add spelling questions to exam mutation\n  useEffect(() => {\n    if (addSpellingQuestionsToExamResult.error) {\n      setProcessing(false);\n      setSubmitted(false);\n      setErrors(addSpellingQuestionsToExamResult.error.message);\n    }\n\n    if (\n      addSpellingQuestionsToExamResult.data &&\n      addSpellingQuestionsToExamResult.data.addSpellingQuestionsToExam\n    ) {\n      setSubmitted(false);\n      setProcessing(false);\n      window.alert(\"questions added successfully\");\n    }\n  }, [\n    addSpellingQuestionsToExamResult.error,\n    addSpellingQuestionsToExamResult.data,\n  ]);\n\n  const handleLoadQuestions = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setLoadQuestion(!loadQuestion);\n    setQuestionLoading(!questionLoading);\n  };\n\n  const handleQuestionClick = (question) => {\n    const selectedQuestionLength = selectedQuestion.length;\n    const totalQuestion = examScheduleDetails.numberofQuestions;\n    const findQuestion = selectedQuestion.some((ques) => {\n      return ques.id == question.id;\n    });\n\n    if (findQuestion) {\n      return;\n    }\n    if (selectedQuestionLength < totalQuestion) {\n      //add the question to the question array\n      //check if the question has been saved before\n      setSelectedQuestion((questions) => {\n        return [...questions, question];\n      });\n    } else {\n      //remove the last item and append the new question\n      const oldItems = [...selectedQuestion];\n      oldItems.pop();\n      oldItems.push(question);\n      setSelectedQuestion(oldItems);\n    }\n  };\n\n  const removeQuestionFromQuestionArray = (id) => {\n    const remainQuestion = selectedQuestion.filter((ele) => ele.id !== id);\n    setSelectedQuestion(remainQuestion);\n  };\n\n  const handleSubmitQuestion = async () => {\n    if (examScheduleDetails.numberofQuestions > selectedQuestion.length) {\n      //we have not selected the complete questions\n      return window.alert(\n        `Please complete the questions. You have ${\n          examScheduleDetails.numberofQuestions - selectedQuestion.length\n        } questions left to add to the examination. `\n      );\n    }\n\n    switch (examType) {\n      case \"multiple choice questions\":\n        const arrayOfQuestions = selectedQuestion.map(\n          ({\n            explanation,\n            answers,\n            examId,\n            examinationType,\n            questionImageUrl,\n            question,\n            id,\n          }) => {\n            const questionObj = {\n              answers,\n              examId: examId,\n              examinationType,\n              explanation,\n              question,\n              questionImageUrl,\n              id,\n            };\n            return questionObj;\n          }\n        );\n        try {\n          setSubmitted(true);\n          await addQuestionToExamination({\n            variables: {\n              questionsArray: arrayOfQuestions,\n              scheduleId: examScheduleDetails.id,\n            },\n          });\n          break;\n        } catch (error) {\n          console.log(error);\n        }\n\n      case \"spelling examination\":\n        const arrayOfSpellingQuestions = selectedQuestion.map(\n          ({ word, correctWord, examId, examinationType, clue, id }) => {\n            const questionObj = {\n              word,\n              correctWord,\n              examId,\n              examinationType,\n              clue,\n              id,\n            };\n            return questionObj;\n          }\n        );\n        try {\n          setSubmitted(true);\n          await addSpellingQuestionToExam({\n            variables: {\n              questionsArray: arrayOfSpellingQuestions,\n              scheduleId: examScheduleDetails.id,\n            },\n          });\n          break;\n        } catch (error) {\n          console.log(error);\n        }\n    }\n  };\n\n  const autoGenerateQuestionsToAdd = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const examId = examData && examData.examId;\n    const number = examScheduleDetails && examScheduleDetails.numberofQuestions;\n    if (examId && number) {\n      \n      switch (examType) {\n        case \"multiple choice questions\":\n          setAutoProcessing(true);\n          autoGenerateFunc();\n          break;\n        case \"spelling examination\":\n          setAutoProcessing(true);\n          autoGenerateSpellingFunc();\n          break;\n      }\n    }\n  };\n\n  const selectedExamTypeFunc = (examType) => {\n    //clear everything before setting\n    setExamData(null);\n    setExamScheduleDetails(null);\n    setScheduleArray([]);\n    setSelectedQuestion([]);\n    setExamType(examType);\n  };\n\n  const selectedExamFunc = ({ examId, examName, examSchedules }) => {\n    setExamData({\n      examId,\n      examName,\n      examSchedules,\n    });\n    if (examSchedules) {\n      setScheduleArray(examSchedules);\n      setSelectedQuestion([]);\n    } else {\n      setScheduleArray([]);\n    }\n  };\n\n  const handleScheduleExamChange = (e) => {\n    const value = e.target.value;\n    if (value == \"0\") return;\n    //filter and find the selected details\n    const selectedSchedule = scheduleArray.find((e) => e.id === value);\n    if (selectedSchedule) {\n      setSelectedQuestion(selectedSchedule.questions);\n    }\n    setExamScheduleDetails(selectedSchedule);\n    //query for the details of the selected paper\n    //if we already have questions load the selected questions array here\n  };\n\n  return (\n    <AddQuestionStyles>\n      <div className=\"row justify-content-center\">\n        <div className=\"col-sm-6 col-md-4\">\n          <h4 className=\"text-center\">Add Question to Examination</h4>\n\n          <ExaminationTypeComponent\n            selectedExamTypeFunc={selectedExamTypeFunc}\n            selectedExamNameFunc={selectedExamFunc}\n            display={1}\n          />\n\n          <select className=\"form-control\" onChange={handleScheduleExamChange}>\n            <option value=\"0\">select examination </option>\n\n            {scheduleArray.map(({ id, examinationName }) => {\n              return (\n                <option key={id} value={id}>\n                  {examinationName}\n                </option>\n              );\n            })}\n          </select>\n\n          {examScheduleDetails && (\n            <div className=\"div-details\">\n              <div className=\"exam-details\">\n                <p className=\"lead\">\n                  <span>{examScheduleDetails.examinationName}</span>\n                </p>\n                <p className=\"lead\">\n                  Total Questions :{\" \"}\n                  <span>{examScheduleDetails.numberofQuestions}</span>\n                </p>\n\n                <p className=\"lead\">\n                  Examination Duration :{\" \"}\n                  <span>{examScheduleDetails.examinationDuration} minutes</span>\n                </p>\n\n                <p className=\"lead\">\n                  Questions Added :{\" \"}\n                  <span>{examScheduleDetails.questions.length}</span>\n                </p>\n              </div>\n\n              <div\n                className=\"button-div text-center\"\n                onClick={handleLoadQuestions}\n              >\n                <button className=\"btn btn-success\">\n                  Manually Add Questions\n                </button>\n\n                <button\n                  disabled={autoProcessing}\n                  className=\"btn btn-info m-2\"\n                  onClick={autoGenerateQuestionsToAdd}\n                >\n                  {autoProcessing\n                    ? \"auto selecting questions\"\n                    : \"Auto Add Questions\"}\n                </button>\n              </div>\n\n              {examScheduleDetails && questionLoading && (\n                <React.Fragment>\n                  <h5 className=\"text-center\">Questions</h5>\n                  <LoadQuestionsComponent\n                    examId={examData && examData.examId}\n                    handleQuestionClick={handleQuestionClick}\n                    examType={examType}\n                  />\n                </React.Fragment>\n              )}\n            </div>\n          )}\n        </div>\n\n        <div className=\"col-md-4 offset-md-2\">\n          {selectedQuestion && selectedQuestion.length > 0 && (\n            <p className=\"text-center lead\">\n              Remaining questions:{\" \"}\n              {examScheduleDetails &&\n                examScheduleDetails.numberofQuestions -\n                  +selectedQuestion.length}\n            </p>\n          )}\n          {selectedQuestion.length > 0 &&\n            selectedQuestion.map(({ word, question, id }, index) => {\n              return (\n                <div\n                  className=\"div-question-details\"\n                  key={id}\n                  onClick={() => removeQuestionFromQuestionArray(id)}\n                >\n                  <div>{index + 1}).</div>\n                  <div\n                    className=\"question-divs\"\n                    dangerouslySetInnerHTML={setHtml(question)}\n                  />\n                  <p>{word}</p>\n                </div>\n              );\n            })}\n\n          {selectedQuestion.length > 0 && (\n            <div className=\"text-center\">\n              <button\n                onClick={handleSubmitQuestion}\n                className=\"btn btn-danger btn-lg\"\n                disabled={submitted}\n              >\n                {submitted\n                  ? \"submitting please wait....\"\n                  : \"Save Question Selection\"}\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </AddQuestionStyles>\n  );\n};\n\nexport default AddQuestionsToExaminationComponent;\n","/app/src/components/login.js",["482","483","484"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { LoginUser } from \"../graphql/queries\";\nimport { useAuth } from \"../context\";\nimport store from \"store\";\nimport Logo from \"../assets/images/eruditelogo.png\";\nimport { useNavigate } from \"react-router-dom\";\nconst LoginStyle = styled.div`\n  .login-container {\n    height: 500px;\n    padding: 40px;\n    border-radius: 20px;\n    box-sizing: border-box;\n    background-color: #ecf0f3;\n    box-shadow: 14px 14px 20px #cbced1, -14px -14px 20px white;\n  }\n  .brand-logo {\n    height: 100px;\n    width: 100px;\n    margin: auto;\n    background: url(${Logo});\n    border-radius: 50%;\n    box-sizing: border-box;\n    box-shadow: 7px 7px 10px #cbced1, -7px -7px 10px white;\n  }\n  .input {\n    background: #ecf0f3;\n    padding: 10px;\n    padding-left: 20px;\n    height: 50px;\n    font-size: 14px;\n    border-radius: 50px;\n    box-shadow: inset 6px 6px 6px #cbced1, inset -6px -6px 6px white;\n  }\n\n  .login-button {\n    border: none;\n    margin-top: 20px;\n    background: #1da1f2;\n    height: 40px;\n    border-radius: 20px;\n    cursor: pointer;\n    font-weight: 900;\n    transition: 0.5s;\n    box-shadow: 6px 6px 6px #cbced1, -6px -6px 6px white;\n    width: 100%;\n  }\n\n  .login-button:hover {\n    box-shadow: none;\n  }\n`;\n\nconst Login = () => {\n  const {\n    isAuth,\n    setIsAuth,\n    setcurrentLoginUser,\n    token,\n    setToken,\n  } = useAuth();\n  const navigate = useNavigate();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [submitted, setSubmitted] = useState(false);\n\n \n\n  const [loginUserFunction, loginUserResult] = useLazyQuery(LoginUser, {\n    variables: {\n      username,\n      password,\n    },\n  });\n  useEffect(() => {\n    if (\n      submitted &&\n      loginUserResult.data &&\n      loginUserResult.data.loginUser &&\n      loginUserResult.called\n    ) {\n      const typename = loginUserResult.data.loginUser.__typename;\n\n      if (typename === \"Error\") {\n        const message = loginUserResult.data.loginUser.message;\n        setError(message);\n        setSubmitted(false);\n      } else {\n        //we are good here we have the baggages here\n        const { id, token, username, userType, name } =\n          loginUserResult.data.loginUser;\n        store.set(\"authToken\", token);\n        store.set(\"isAuth\", true);\n        store.set(\n          \"currentLoginUser\",\n          JSON.stringify({ id, username, userType, name })\n        );\n        setIsAuth(true);\n        setcurrentLoginUser({ id, username, userType, name });\n        setToken(token);\n        setSubmitted(false);\n\n        if (userType === \"super-admin\") {\n          navigate(\"/dashboard\");\n        } else if (userType === \"student\") {\n          navigate(\"/exam_start_page\");\n        }\n      }\n    }\n    if (loginUserResult.error) {\n      setSubmitted(false);\n    }\n  }, [loginUserResult, submitted]);\n\n  const submitForm = (event) => {\n    event.preventDefault();\n    setSubmitted(true);\n    loginUserFunction();\n  };\n\n  const onInputChange = (event) => {\n    event.stopPropagation();\n    const name = event.target.name;\n    switch (name) {\n      case \"password\":\n        setPassword(event.target.value);\n        break;\n      case \"username\":\n        setUsername(event.target.value);\n        break;\n      default:\n        break;\n    }\n  };\n  return (\n    <LoginStyle>\n      <div className=\"row justify-content-center\">\n        <div className=\"col-lg-3 col-md-6 col-sm-12\">\n          <p className=\"text-danger\">{error}</p>\n\n          <div className=\"login-container\">\n            <div className=\"brand-logo\"></div>\n            <p className=\"text-center lead text-info\">Login</p>\n            <form onSubmit={submitForm}>\n              <div className=\"form-group\">\n                <label htmlFor=\"name\">Username </label>\n                <input\n                  type=\"text\"\n                  className=\"form-control input\"\n                  name=\"username\"\n                  aria-describedby=\"username\"\n                  value={username}\n                  onChange={onInputChange}\n                />\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"password\">password</label>\n                <input\n                  type=\"password\"\n                  className=\"form-control input\"\n                  id=\"password\"\n                  onChange={onInputChange}\n                  name=\"password\"\n                  value={password}\n                />\n              </div>\n\n              <button\n                type=\"submit\"\n                className=\"login-button\"\n                disabled={submitted}\n              >\n                {submitted ? \"bypassing security.....\" : \"login\"}\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </LoginStyle>\n  );\n};\n\nexport default Login;\n","/app/src/components/dashboard.js",[],"/app/src/components/displayQuizScriptComponent.js",["485","486","487","488","489","490"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { GetCanidateExamResult } from \"../graphql/queries\";\nimport { useParams } from \"react-router-dom\";\nimport moment from \"moment\";\nimport Loading from \"../common/loading\";\nimport DisplayScriptComponent from \"../common/displayScriptComponent\";\n\nconst DisplayQuizScriptComponentStyles = styled.div`\n  p {\n    font-size: 18px;\n  }\n  .question {\n    font-size: 16px;\n  }\n  span {\n    padding-left: 50px;\n  }\n  .question-panel {\n    display: flex;\n    font-size: 16px;\n  }\n  .question-divs {\n    padding-left: 20px;\n  }\n  .details {\n    background-color: #0b2f27;\n    color: #fff;\n    padding: 30px;\n  }\n  .text-name {\n    color: #7abbff !important;\n  }\n  .spanDetails {\n    float: right;\n    font-weight: bold;\n    color: #7c23f3;\n  }\n  .score {\n    font-size: 35px;\n    text-align: center;\n  }\n`;\n\nconst convertMinutesToHours = (minutesToConvert) => {\n  const hours = Math.floor(minutesToConvert / 60);\n  const minutes = minutesToConvert - hours * 60;\n  if (hours == 0) {\n    return `${minutes} minutes`;\n  }\n  return `${hours} hours ${minutes} minutes`;\n};\n\nconst DisplayQuizScriptComponent = () => {\n  const { examId } = useParams(\"/examination_script/:examId\");\n  const [processing, setProcessing] = useState(false);\n  const [errors, setErrors] = useState(null);\n  const [scripts, setScripts] = useState(null);\n  const [nodata, setNoData] = useState(null);\n  const [getScriptFunction, getScriptResult] = useLazyQuery(\n    GetCanidateExamResult,\n    {\n      variables: {\n        examId: examId,\n      },\n    }\n  );\n\n  useEffect(() => {\n    setProcessing(!processing);\n    getScriptFunction();\n  }, []);\n\n  useEffect(() => {\n    if (getScriptResult.data) {\n      const scriptsData = getScriptResult.data.getExamOfCanidate;\n      if (scriptsData) {\n        setScripts(scriptsData);\n      } else {\n        setNoData(true);\n      }\n      setProcessing(!processing);\n    }\n    if (getScriptResult.error) {\n      const message = getScriptResult.error.message;\n      setProcessing(!processing);\n      setErrors(message);\n    }\n  }, [getScriptResult.loading, getScriptResult.data, getScriptResult.error]);\n\n  const setHtml = (html) => {\n    return { __html: html };\n  };\n\n  return (\n    <DisplayQuizScriptComponentStyles>\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          {errors && <p className=\"text-center lead text-danger\">{errors}</p>}\n\n          {processing && (\n            <div className=\"text-center\">\n              <Loading />\n            </div>\n          )}\n\n          {nodata && (\n            <div className=\"text-center\">\n              <p className=\"lead text-info\">\n                No examination matching that query\n              </p>\n            </div>\n          )}\n\n          {\n            scripts && (\n              <React.Fragment>\n                <DisplayScriptComponent scripts={scripts} />\n              </React.Fragment>\n            )\n            /* end of scripts matter here */\n          }\n        </div>\n      </div>\n    </DisplayQuizScriptComponentStyles>\n  );\n};\n\nexport default DisplayQuizScriptComponent;\n","/app/src/components/activeExams.js",["491","492","493","494","495","496"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { GetActiveExamination } from \"../graphql/queries\";\nimport { StartExamination } from \"../graphql/mutation\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAuth, useExamDetails } from \"../context\";\nimport Loading from \"../common/loading\";\nimport store from \"store\";\nimport Modal from \"react-modal\";\nModal.setAppElement(\"#root\");\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\nconst ActiveExamStyles = styled.div`\n  .div-panel {\n    padding: 20px;\n    color: #c0c0c0;\n    background-color: #2a8e86;\n    height: 300px;\n    margin-bottom: 60px;\n    box-sizing: border-box;\n    box-shadow: 7px 7px 10px #2a9a87, -7px -7px 10px white;\n    border-radius: 20px;\n  }\n  .start-button {\n    position: absolute;\n    bottom: 37px;\n    left: 34%;\n    border-radius: 20px;\n  }\n  p {\n    font-size: 18px;\n  }\n  span {\n    font-size: 14px;\n    color: #010605;\n    padding: 10px;\n  }\n  .m {\n    flex-direction: row;\n  }\n`;\n\nconst convertMinutesToHours = (minutesToConvert) => {\n  const hours = Math.floor(minutesToConvert / 60);\n  const minutes = minutesToConvert - hours * 60;\n  if (hours == 0) {\n    return `${minutes} minutes`;\n  }\n  return `${hours} hours ${minutes} minutes`;\n};\n\nconst ActiveExams = () => {\n  const navigate = useNavigate();\n  const { currentLoginUser } = useAuth();\n  const {\n    duration,\n    setDuration,\n    setExamStarted,\n    examQuestions,\n    setExamQuestions,\n  } = useExamDetails();\n\n  const [activeExams, setActiveExams] = useState([]);\n  const [errors, setError] = useState(null);\n  const { loading, error, data } = useQuery(GetActiveExamination);\n  const [processing, setProcessing] = useState(false);\n\n  const [startExaminationFunction, startExaminationResult] =\n    useMutation(StartExamination);\n\n  const [examProcessing, setExamProcessing] = useState(false);\n\n  //useeffect of start exam function\n\n  useEffect(() => {\n    if (startExaminationResult.data) {\n      if (\n        startExaminationResult.data.startExam.__typename == \"ExamTakenSuccess\"\n      ) {\n        //we are successful here we need to save everything here\n        const { examId, questionType } = startExaminationResult.data.startExam;\n        setExamStarted(true);\n        //persists it to store here\n        store.set(\"examStarted\", true);\n        store.set(\"examQuestions\", examQuestions);\n        store.set(\"currentIndex\", 0);\n        store.set(\"duration\", duration);\n        store.set(\"examId\", examId);\n        store.set(\"totalQuestions\", examQuestions.length);\n        setExamProcessing(!examProcessing);\n        switch (questionType) {\n          case \"multiple choice questions\":\n            navigate(`/exam/multi_choice/${examId}`, { replace: true });\n            break;\n          case \"spelling examination\":\n            navigate(`/exam/spelling/${examId}`, { replace: true });\n            break;\n          case \"short answer exam\":\n            navigate(`/exam/short_essay/${examId}`, { replace: true });\n            break;\n          case \"essay exam\":\n            break;\n          case \"quantitative exam\":\n            break;\n        }\n      } else if (startExaminationResult.data.startExam.__typename == \"Error\") {\n        const errorObj = startExaminationResult.data.startExam;\n        setError(errorObj);\n        setExamProcessing(!examProcessing);\n      }\n    }\n\n    if (startExaminationResult.loading) {\n      setExamProcessing(!examProcessing);\n    }\n\n    if (startExaminationResult.error) {\n      setError(startExaminationResult.error.message);\n      setExamProcessing(!examProcessing);\n    }\n  }, [\n    startExaminationResult.data,\n    startExaminationResult.error,\n    startExaminationResult.loading,\n  ]);\n\n  useEffect(() => {\n    if (error) {\n      setError(error);\n      setProcessing(!processing);\n    }\n    if (loading) {\n      setProcessing(!processing);\n    }\n\n    if (data) {\n      const examination = data && data.activeExamination;\n      setProcessing(!processing);\n      setActiveExams(examination);\n    }\n  }, [data, loading, error]);\n\n  const startExamination = async (\n    e,\n    { id, questions, examinationDuration, examinationName, questionType }\n  ) => {\n    e.preventDefault();\n    setExamQuestions(questions);\n    setDuration(examinationDuration);\n    store.set(\"examDetails\", {\n      examName: examinationName,\n      examType: questionType,\n      examDuration: examinationDuration,\n    });\n    //get the canidate details from the currentLoginUser\n    if (!currentLoginUser) {\n      return alert(\"How did we get here please login.\");\n    }\n\n    const examDetails = {\n      examDetails: {\n        examinationName,\n        examinationId: id,\n        numberOfQuestions: +questions.length,\n        duration: +examinationDuration,\n      },\n      timeExamStarted: new Date(),\n      canidateDetails: {\n        username: currentLoginUser.username,\n        name: currentLoginUser.name,\n      },\n      examStarted: true,\n      examFinished: false,\n      questionType,\n    };\n\n    try {\n      await startExaminationFunction({\n        variables: {\n          examDetails: examDetails,\n        },\n      });\n    } catch (error) {\n      console.log(\"Error starting examination\", error);\n    }\n  };\n  return (\n    <ActiveExamStyles>\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <div className=\"text-center\">{processing && <Loading />}</div>\n\n          {errors && (\n            <p className=\"lead text-center text-danger\">{errors.message}</p>\n          )}\n        </div>\n      </div>\n      {activeExams && activeExams.length > 0 ? (\n        <div className=\"row\">\n          {activeExams.map(\n            ({\n              id,\n              numberofQuestions,\n              examinationName,\n              examinationDuration,\n              questions,\n              questionType,\n            }) => {\n              return (\n                <div className=\"col-md-3\" key={id}>\n                  <div className=\"div-panel\">\n                    <p>\n                      Examination :{\" \"}\n                      <b>\n                        <span>\n                          {examinationName && examinationName.toUpperCase()}\n                        </span>\n                      </b>\n                    </p>\n                    <p>\n                      Number of Questions:{\" \"}\n                      <span>\n                        <b>{numberofQuestions}</b>\n                      </span>\n                    </p>\n                    <p>\n                      Duration :{\" \"}\n                      <span>\n                        <b>\n                          {examinationDuration &&\n                            convertMinutesToHours(examinationDuration)}{\" \"}\n                        </b>\n                      </span>\n                    </p>\n\n                    <p>\n                      Examination Type :{\" \"}\n                      <span>\n                        <b>{questionType.toUpperCase()}</b>\n                      </span>\n                    </p>\n                    <div className=\"text-center\">\n                      <button\n                        className=\"btn btn-warning start-button\"\n                        onClick={(e) =>\n                          startExamination(e, {\n                            questions,\n                            examinationDuration,\n                            examinationName,\n                            id,\n                            questionType,\n                          })\n                        }\n                      >\n                        Start Examination\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              );\n            }\n          )}\n        </div>\n      ) : (\n        <div>\n          <p className=\"lead text-info text-center\">\n            No active examination at the moment\n          </p>\n        </div>\n      )}\n\n      <Modal\n        isOpen={examProcessing}\n        style={customStyles}\n        contentLabel=\"Examination starting modal\"\n      >\n        <p>\n          Instructions\n          <span>Relax as we get you all started with your exams</span>\n        </p>\n        <p>Please wait.....</p>\n      </Modal>\n    </ActiveExamStyles>\n  );\n};\n\nexport default ActiveExams;\n","/app/src/components/viewExamResult.js",["497","498"],"import React, { useState, useEffect } from \"react\";\nimport SelectExaminationComponent from \"../common/selectExaminationComponent\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { GetExaminationResult } from \"../graphql/queries\";\nimport Loading from \"../common/loading\";\nimport moment from \"moment\";\nimport { useNavigate } from \"react-router-dom\";\nimport methods from \"../methods\";\nimport styled from \"styled-components\";\n\nconst ViewExamResultStyles = styled.div`\n  .div-selected {\n    padding: 20px 0;\n    font-size: 20px;\n  }\n  .exam-details {\n    font-size: 20px;\n    margin-bottom: 40px;\n    padding: 20 0px;\n    span {\n      float: right;\n    }\n  }\n`;\n\nconst ViewExamResult = () => {\n  const navigate = useNavigate();\n  const [examObj, setExamObj] = useState(null);\n  const [examScheduleObj, setExamScheduleObj] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [examResults, setExamResults] = useState([]);\n  const [nodata, setNoData] = useState(null);\n  const [processing, setProcessing] = useState(false);\n\n  const history = useNavigate();\n\n  const [resultQuery, resultQueryData] = useLazyQuery(GetExaminationResult, {\n    variables: {\n      examScheduleId: examScheduleObj && examScheduleObj.examScheduleId,\n    },\n  });\n\n  useEffect(() => {\n    if (resultQueryData.called && resultQueryData.loading) {\n      setProcessing(!processing);\n    }\n    if (resultQueryData.error) {\n      setErrors(resultQueryData.error);\n      setProcessing(!processing);\n    }\n\n    if (resultQueryData.data) {\n      const data = resultQueryData.data.getExamResults;\n\n      if (data.length > 0) {\n        setExamResults(data);\n        setNoData(false);\n      } else {\n        setNoData(true);\n        setExamResults([]);\n      }\n      setProcessing(false);\n    }\n  }, [resultQueryData.loading, resultQueryData.data, resultQueryData.error]);\n\n  const handleExamChange = ({ examId, examName }) => {\n    setExamObj({ examId, examName });\n  };\n\n  const handleExamScheduleChange = ({ examScheduleId, examScheduleName }) => {\n    setExamScheduleObj({\n      examScheduleId,\n      examScheduleName,\n    });\n    resultQuery();\n  };\n\n  const showScriptPage = ({\n    id,\n    timeExamStarted,\n    examDetails,\n    canidateDetails,\n    timeExamEnded,\n    score,\n    scripts,\n    questionType,\n  }) => {\n    switch (questionType) {\n      case \"multiple choice questions\":\n        navigate(`/view_canidate_script`, {\n          scripts: {\n            id,\n            timeExamStarted,\n            examDetails,\n            canidateDetails,\n            timeExamEnded,\n            score,\n            scripts,\n          },\n        });\n        break;\n\n      case \"spelling examination\":\n        navigate(`/view_canidate_spelling_script`, {\n          scripts: {\n            id,\n            timeExamStarted,\n            examDetails,\n            canidateDetails,\n            timeExamEnded,\n            score,\n            scripts,\n          },\n        });\n        break;\n      case \"short answer exam\":\n        navigate(`/view_canidate_essay_script`, {\n          scripts: {\n            id,\n            timeExamStarted,\n            examDetails,\n            canidateDetails,\n            timeExamEnded,\n            score,\n            scripts,\n          },\n        });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <ViewExamResultStyles>\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3\">\n          <h3 className=\"text-center text-primary\">View Examination Result </h3>\n          <SelectExaminationComponent\n            examFunc={handleExamChange}\n            examTypeFunc={handleExamScheduleChange}\n          />\n\n          <div className=\"div-selected\">\n            {examObj && (\n              <p>Examination Type: {examObj.examName.toUpperCase()}</p>\n            )}\n\n            {examScheduleObj && (\n              <p>\n                Examination Schedule :{\" \"}\n                {examScheduleObj.examScheduleName.toUpperCase()}\n              </p>\n            )}\n            <hr />\n          </div>\n          <div className=\"exam-details\">\n            {examResults.length > 0 && (\n              <React.Fragment>\n                <p>\n                  Examination Name :{\" \"}\n                  <span>\n                    {examResults[0].examDetails.examinationName.toUpperCase()}\n                  </span>\n                </p>\n                <p>\n                  Duration :{\" \"}\n                  <span>\n                    {methods.Utils.ConvertMinutesToHours(\n                      examResults[0].examDetails.duration\n                    )}\n                  </span>\n                </p>\n                <p>\n                  Number of Questions :{\" \"}\n                  <span>{examResults[0].examDetails.numberOfQuestions}</span>\n                </p>\n              </React.Fragment>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-md-8 offset-md-2\">\n          {processing && (\n            <div className=\"text-center\">\n              <Loading />\n            </div>\n          )}\n\n          {errors && (\n            <div className=\"text-center\">\n              <p className=\"text-center lead text-danger\">{errors.message}</p>\n            </div>\n          )}\n\n          {nodata && (\n            <p className=\"text-center lead\">\n              no result for the selected examination\n            </p>\n          )}\n\n          {examResults.length > 0 && (\n            <div className=\"table-responsive card\">\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">S/N</th>\n                    <th scope=\"col\">Canidate Details</th>\n                    <th scope=\"col\">Score</th>\n                    <th scope=\"col\">Time Spent</th>\n                    <th scope=\"col\">Action</th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                  {examResults.map(\n                    (\n                      {\n                        id,\n                        timeExamStarted,\n                        examDetails,\n                        canidateDetails: { username, name },\n                        timeExamEnded,\n                        score,\n                        scripts,\n                        questionType,\n                      },\n                      index\n                    ) => {\n                      return (\n                        <tr key={id}>\n                          <td>\n                            <p>{index + 1}</p>\n                          </td>\n                          <td>\n                            <p>Name: {name.toUpperCase()}</p>\n                            <p>Username: {username}</p>\n                          </td>\n\n                          <td>\n                            <p>Score: {score}</p>\n                          </td>\n\n                          <td>\n                            <p>\n                              Time started :\n                              {moment(timeExamStarted).format(\n                                \"dddd, MMMM Do YYYY, h:mm:ss a\"\n                              )}\n                            </p>\n\n                            <p>\n                              Time ended :\n                              {moment(timeExamEnded).format(\n                                \"dddd, MMMM Do YYYY, h:mm:ss a\"\n                              )}\n                            </p>\n                          </td>\n\n                          <td>\n                            <p>\n                              <button\n                                className=\"btn btn-sm btn-danger\"\n                                onClick={() =>\n                                  showScriptPage({\n                                    id,\n                                    timeExamStarted,\n                                    examDetails,\n                                    canidateDetails: {\n                                      username,\n                                      name,\n                                    },\n                                    timeExamEnded,\n                                    score,\n                                    scripts,\n                                    questionType,\n                                  })\n                                }\n                              >\n                                view script\n                              </button>\n                            </p>\n                          </td>\n                        </tr>\n                      );\n                    }\n                  )}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </div>\n      </div>\n    </ViewExamResultStyles>\n  );\n};\n\nexport default ViewExamResult;\n","/app/src/components/viewCanidateExaminationScripts.js",[],"/app/src/components/createSubjectCourse.js",["499"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useMutation } from \"@apollo/client\";\nimport { CreateCourseSubject } from \"../graphql/mutation\";\n\nconst CreateSubjectCourseStyles = styled.div`\n  .div-form {\n    margin-top: 50px;\n  }\n  .div-exam {\n    p {\n      padding: 10px;\n\n      background: #c0c0c0;\n    }\n  }\n`;\n\nconst CreateSubjectCourse = () => {\n  const [text, setText] = useState(\"\");\n  const [errors, setErrors] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [loadingData, setLoading] = useState(false);\n  const [selectedExamType, setSelectedExamType] = useState(null);\n  const [createExamFunc, createExamResult] = useMutation(CreateCourseSubject);\n\n  useEffect(() => {\n    if (createExamResult.data) {\n      setProcessing(!processing);\n    }\n    if (createExamResult.error) {\n      setProcessing(!processing);\n      setErrors(createExamResult.error);\n    }\n  }, [createExamResult.data, createExamResult.error]);\n\n  const handleTextChange = (e) => {\n    const value = e.target.value;\n    setText(value);\n  };\n\n  const handleFormSubmit = async (e) => {\n    e.preventDefault();\n    const confirmSave = window.confirm(`Confirm the following information: \\n\n                                        Course/Subject : ${text} \\n Examination Type : ${selectedExamType}`);\n    if (!confirmSave) return;\n    setProcessing(!processing);\n    setLoading(!loadingData);\n    //save the stuff here\n    if (selectedExamType) {\n      try {\n        await createExamFunc({\n          variables: {\n            examName: text,\n            examType: selectedExamType,\n          },\n        });\n        setText(\"\");\n        setSelectedExamType(null);\n      } catch (error) {}\n    }\n  };\n\n  const handleExamTypeChange = (e) => {\n    const value = e.target.value;\n    if (value !== \"0\") {\n      setSelectedExamType(value);\n    }\n  };\n\n  return (\n    <CreateSubjectCourseStyles>\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3\">\n          <h3 className=\"text-center text-primary\">\n            Create New Course/Subject\n          </h3>\n          <div className=\"div-form\">\n            {errors && (\n              <p className=\"text-center lead text-danger\">{errors.message}</p>\n            )}\n\n            <form onSubmit={handleFormSubmit}>\n              <div className=\"form-group\">\n                <select\n                  className=\"custom-select\"\n                  onChange={handleExamTypeChange}\n                >\n                  <option value=\"0\">select examination type</option>\n                  <option value=\"multiple choice questions\">\n                    Multiple choice questions\n                  </option>\n                  <option value=\"spelling examination\">\n                    Spelling examination{\" \"}\n                  </option>\n                  <option value=\"short answer exam\">Short answer type</option>\n                  <option value=\"essay exam\">Essay examination</option>\n                  <option value=\"quantitative exam\">\n                    Quantitative examination\n                  </option>\n                </select>\n              </div>\n              <div className=\"form-group\">\n                <label className=\"form-label\">Course/Subject Name: </label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  value={text}\n                  onChange={handleTextChange}\n                />\n              </div>\n\n              {selectedExamType && (\n                <p>Selected examination type : {selectedExamType}</p>\n              )}\n\n              <div className=\"text-center\">\n                <button\n                  type=\"submit\"\n                  disabled={processing}\n                  className=\"btn btn-success\"\n                >\n                  {processing ? \"please wait.....\" : \"create subject/course\"}\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </CreateSubjectCourseStyles>\n  );\n};\n\nexport default CreateSubjectCourse;\n","/app/src/components/createUserAccount.js",["500","501","502","503","504","505"],"import React, { useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { CreateNewUserAccount } from \"../graphql/mutation\";\nimport styled from \"styled-components\";\n\nconst CreateUserAccountStyles = styled.div``;\n\nconst CreateUserAccount = () => {\n  const [username, setUsername] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [active, setActive] = useState(false);\n  const [userType, setUserType] = useState(\"0\");\n  const [processing, setProcessing] = useState(false);\n  const [errors, setErrors] = useState(null);\n\n  const [createUserFunction, createUserResult] = useMutation(\n    CreateNewUserAccount\n  );\n\n  useEffect(() => {\n    if (createUserResult.data) {\n      if (createUserResult.data.createUser.__typename == \"User\") {\n        const { name, username, userType } = createUserResult.data.createUser;\n        \n        setUsername(\"\");\n        setName(\"\");\n        setPassword(\"\");\n        setActive(false);\n        setUserType(\"0\");\n        setErrors(null);\n        window.alert(\n          `The account with the details created successfully: \\n Name: ${name} \\n Username: ${username} \\n Account Type: ${userType}`\n        );\n      } else {\n        const errorObject = createUserResult.data.createUser;\n        setErrors(errorObject);\n      }\n      setProcessing(false);\n    }\n\n    if (createUserResult.error) {\n      setProcessing(!processing);\n      setErrors(createUserResult.error);\n    }\n  }, [createUserResult.data, createUserResult.error]);\n\n  const handleInputChange = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    switch (name) {\n      case \"userType\":\n        if (value == \"0\") return;\n        setUserType(value);\n        break;\n      case \"name\":\n        setName(value);\n      case \"password\":\n        setPassword(value);\n        break;\n      case \"username\":\n        setUsername(value);\n        break;\n    }\n  };\n  const handleUserTypeChange = (e) => {\n    const isChecked = e.target.checked;\n    if (isChecked) {\n      setActive(true);\n    } else {\n      setActive(false);\n    }\n  };\n  const submitUserFormDetails = async (e) => {\n    e.preventDefault();\n    if (!name) {\n      return window.alert(\"The full name of the user is required\");\n    }\n    if (!username) {\n      return window.alert(\"A username for login password is required\");\n    }\n    if (!password) {\n      return window.alert(\n        \"Password is a required field. You cannot login without a passord.\"\n      );\n    }\n\n    if (userType == \"0\") {\n      return window.alert(\"Please select the user account type\");\n    }\n\n    const userDetails = {\n      username,\n      name,\n      password,\n      userType,\n      active,\n    };\n    //submit details here\n    //confirm submission here\n    const confirmDetails = window.confirm(\n      `Please confirm the following details: \\n\\n Username: ${username} \\n\\n Name: ${name} \\n\\n Password: ${password} \\n\\n Account Type: ${userType} \\n\\n Account Active: ${active}`\n    );\n    if (!confirmDetails) return;\n    try {\n      setProcessing(!processing);\n      await createUserFunction({\n        variables: { ...userDetails },\n      });\n    } catch (error) {}\n  };\n  return (\n    <CreateUserAccountStyles>\n      <div className=\"row justify-content-center\">\n        <div className=\"col-md-6 container-shadow\">\n          <h3 className=\"text-center text-primary\">Create New User Account</h3>\n          {errors && <p className=\"lead text-danger\">{errors.message}</p>}\n          <form onSubmit={submitUserFormDetails}>\n            <div className=\"mb-3\">\n              <label htmlFor=\"name\" className=\"form-label\">\n                Name\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control input\"\n                id=\"name\"\n                name=\"name\"\n                aria-describedby=\"usernameHelp\"\n                onChange={handleInputChange}\n                value={name}\n              />\n              <div id=\"usernameHelp\" className=\"form-text\">\n                full name of the user.\n              </div>\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"username\" className=\"form-label\">\n                Username\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control input\"\n                id=\"username\"\n                name=\"username\"\n                aria-describedby=\"usernameHelp\"\n                onChange={handleInputChange}\n                value={username}\n              />\n              <div id=\"usernameHelp\" className=\"form-text\">\n                username for login.\n              </div>\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"password\" className=\"form-label\">\n                Password\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control input\"\n                id=\"password\"\n                name=\"password\"\n                onChange={handleInputChange}\n                value={password}\n              />\n            </div>\n            <div className=\"mb-3 form-check\">\n              <input\n                type=\"checkbox\"\n                className=\"form-check-input\"\n                id=\"activeCheck\"\n                value={active}\n                onChange={handleUserTypeChange}\n              />\n              <label className=\"form-check-label\" htmlFor=\"activeCheck\">\n                User Active\n              </label>\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"userType\" className=\"form-label\">\n                Account Type\n              </label>\n              <select\n                className=\"form-control\"\n                name=\"userType\"\n                onChange={handleInputChange}\n                value={userType}\n              >\n                <option value=\"0\">select account type</option>\n                <option value=\"student\">student</option>\n                <option value=\"admin\">admin</option>\n              </select>\n            </div>\n            <div className=\"mb-3 text-center\">\n              <button\n                type=\"submit\"\n                disabled={processing}\n                className=\"btn btn-primary btn-lg\"\n              >\n                {!processing\n                  ? \"Create User Account\"\n                  : \"Creating account. Please wait......\"}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </CreateUserAccountStyles>\n  );\n};\n\nexport default CreateUserAccount;\n","/app/src/components/activateScheduleExaminationPanel.js",["506","507","508"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GetAllScheduleExamination } from \"../graphql/queries\";\nimport { UpdateExaminationSchedule } from \"../graphql/mutation\";\nimport Loading from \"../common/loading\";\nimport methods from \"../methods\";\n\nconst ActivateStyles = styled.div``;\n\nconst ActivateScheduleExaminationPanel = ({ history }) => {\n  const [scheduleExams, setScheduleExams] = useState([]);\n  const [processing, setProcessing] = useState(false);\n  const [errors, setErrors] = useState(null);\n  const { loading, data, error } = useQuery(GetAllScheduleExamination);\n  const [nodata, setNoData] = useState(null);\n\n  //make schedule active or inactive\n  const [changeStatusFunc, changeStatusResult] = useMutation(\n    UpdateExaminationSchedule\n  );\n\n  useEffect(() => {\n    if (changeStatusResult.data) {\n      const result = changeStatusResult.data.changeExamStatus.__typename;\n      if (result == \"Error\") {\n        setErrors(changeStatusResult.data.changeExamStatus.message);\n      }\n      setProcessing(!processing);\n    }\n\n    if (changeStatusResult.error) {\n      setErrors(changeStatusResult.error);\n      setProcessing(!processing);\n    }\n  }, [changeStatusResult.data, changeStatusResult.error]);\n\n  useEffect(() => {\n    if (data) {\n      const scheduleData = data.getAllExamSchedule;\n      if (scheduleData.length > 0) {\n        setScheduleExams(scheduleData);\n      } else {\n        setNoData(true);\n      }\n    }\n\n    if (error) {\n      setErrors(error);\n    }\n  }, [loading, data, error]);\n\n  const handleActiveExaminationChangeState = async ({ id, status }) => {\n    try {\n      setProcessing(!processing);\n      await changeStatusFunc({\n        variables: {\n          examId: id,\n          status: !status,\n        },\n        refetchQueries: [\n          {\n            query: GetAllScheduleExamination,\n          },\n        ],\n      });\n    } catch (error) {}\n  };\n  return (\n    <ActivateStyles>\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <h3 className=\"text-center text-primary\">\n            Activate Examination Panel\n          </h3>\n          {loading && (\n            <div className=\"text-center\">\n              <Loading />\n            </div>\n          )}\n\n          {errors && (\n            <p className=\"text-center lead text-danger\">{errors.message}</p>\n          )}\n\n          {nodata && <p className=\"lead text-center\">No data avaliable..</p>}\n\n          {scheduleExams.length > 0 && (\n            <div className=\"table-responsive\">\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">S/N</th>\n                    <th scope=\"col\">Exam Schedule</th>\n                    <th scope=\"col\">Course Type</th>\n                    <th scope=\"col\">Exam Type</th>\n                    <th scope=\"col\">Details</th>\n                    <th scope=\"col\">Status</th>\n                    <th scope=\"col\">Action</th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                  {scheduleExams.map(\n                    (\n                      {\n                        id,\n                        active,\n                        numberofQuestions,\n                        examinationName,\n                        examinationDuration,\n                        questions,\n                        examTypeName,\n                        questionType\n                      },\n                      index\n                    ) => {\n                      return (\n                        <tr key={id}>\n                          <td>\n                            <p>{index + 1}</p>\n                          </td>\n                          <td>\n                            <p>{examinationName.toUpperCase()}</p>\n                          </td>\n                          <td>\n                            <p>{examTypeName.toUpperCase()}</p>\n                          </td>\n                          <td>\n                            <p>{questionType.toUpperCase()}</p>\n                          </td>\n                          <td>\n                            <p>Questions saved : {questions.length}</p>\n                            <p>\n                              Duration :{\" \"}\n                              {methods.Utils.ConvertMinutesToHours(\n                                examinationDuration\n                              )}\n                            </p>\n                            <p>Number of Questions: {numberofQuestions}</p>\n                          </td>\n                          <td>\n                            {active ? (\n                              <p className=\"text-success\">Active</p>\n                            ) : (\n                              <p className=\"text-danger\">Not Active</p>\n                            )}\n                          </td>\n                          <td>\n                            {active ? (\n                              <button\n                                disabled={processing}\n                                className=\"btn btn-success btn-sm\"\n                                onClick={() =>\n                                  handleActiveExaminationChangeState({\n                                    id,\n                                    status: active,\n                                  })\n                                }\n                              >\n                                {!processing\n                                  ? \"make inactive\"\n                                  : \"please wait....\"}\n                              </button>\n                            ) : numberofQuestions == questions.length ? (\n                              /* we can activate the exam here else go add questions*/\n                              <button\n                                disabled={processing}\n                                className=\"btn btn-danger btn-sm\"\n                                onClick={() =>\n                                  handleActiveExaminationChangeState({\n                                    id,\n                                    status: active,\n                                  })\n                                }\n                              >\n                                {!processing\n                                  ? \"make active\"\n                                  : \"please wait....\"}\n                              </button>\n                            ) : (\n                              <button\n                                className=\"btn btn-info btn-sm\"\n                                onClick={() =>\n                                  history.push(\"/add_questions_examination\")\n                                }\n                              >\n                                complete exam questions\n                              </button>\n                            )}\n                          </td>\n                        </tr>\n                      );\n                    }\n                  )}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </div>\n      </div>\n    </ActivateStyles>\n  );\n};\n\nexport default ActivateScheduleExaminationPanel;\n","/app/src/components/usersPanel.js",["509","510"],"import React, { useState, useEffect } from \"react\";\nimport { GetUsersByStatus } from \"../graphql/queries\";\nimport { ChangeActiveStatusOfUsers } from \"../graphql/mutation\";\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\nimport UserPanelTable from \"../common/usersTablePanel\";\nimport Loading from \"../common/loading\";\n\nimport styled from \"styled-components\";\n\nconst UsersPanelStyles = styled.div``;\n\nconst buttonsToDisplay = (total, numberPerPage) => {\n  const buttonNumber = +total / +numberPerPage;\n  let array = [];\n  array.length = Math.ceil(buttonNumber);\n  return array.fill(1);\n};\n\nconst UsersPanel = ({ currentLoginUser }) => {\n  const [status, setStatus] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [usersArray, setUsers] = useState([]);\n  const [totalUsers, setTotalUsers] = useState(0);\n  const [processingData, setProcessingData] = useState(false);\n  const [errors, setErrors] = useState(null);\n  const [usersQuery, usersQueryResult] = useLazyQuery(GetUsersByStatus, {\n    variables: {\n      status: status,\n      offset: 0,\n    },\n  });\n\n  const [statusFunction, statusFunctionResult] = useMutation(\n    ChangeActiveStatusOfUsers\n  );\n\n  useEffect(() => {\n    if (statusFunctionResult.data) {\n      setProcessingData(false);\n      setProcessing(false);\n      window.alert(\"successfull\");\n    }\n    if (statusFunctionResult.error) {\n      setErrors(statusFunctionResult.error);\n      setProcessing(false);\n      setProcessingData(!processingData);\n    }\n  }, [statusFunctionResult.data, statusFunctionResult.error]);\n\n  useEffect(() => {\n    if (usersQueryResult.data) {\n      const usersData = usersQueryResult.data.usersByStatus.users;\n      const totalData = usersQueryResult.data.usersByStatus.totalUsersByStatus;\n      setUsers(usersData);\n      setTotalUsers(totalData);\n      setProcessing(false);\n    }\n    if (usersQueryResult.error) {\n      setErrors(usersQueryResult.error);\n      setProcessing(false);\n    }\n  }, [usersQueryResult.data, usersQueryResult.error]);\n\n  const getMoreUsers = (e, index) => {\n    try {\n      e.stopPropagation();\n      e.preventDefault();\n      setProcessing(true);\n\n      usersQueryResult.fetchMore({\n        variables: {\n          status: status,\n          offset: usersArray.length * (index - 1),\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult) return prev;\n          return Object.assign({}, prev, {\n            usersByStatus: {\n              totalUsersByStatus:\n                fetchMoreResult.usersByStatus.totalUsersByStatus,\n              __typename: \"UserQueryResult\",\n              users: [\n                //...prev.getAllQuestions.questions,\n                ...fetchMoreResult.usersByStatus.users,\n              ],\n            },\n          });\n        },\n      });\n    } catch (error) {}\n  };\n\n  const handleStatusChange = (e) => {\n    const value = e.target.value;\n    if (value === \"0\") return;\n    if (value === \"active\") {\n      setStatus(true);\n    } else if (value === \"inactive\") {\n      setStatus(false);\n    }\n    //call the query here\n    usersQuery();\n    setProcessing(!processing);\n  };\n\n  const activateDeactivateAccount = async ({ id, active }) => {\n    try {\n      setProcessingData(!processingData);\n      await statusFunction({\n        variables: {\n          id,\n          active,\n        },\n        refetchQueries: [\n          {\n            query: GetUsersByStatus,\n            variables: {\n              status: active,\n              offset: 0,\n            },\n          },\n        ],\n      });\n    } catch (error) {}\n  };\n\n  return (\n    <UsersPanelStyles>\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3 mb-3\">\n          <h3 className=\"text-center text-primary\">Users Account</h3>\n          {errors && (\n            <p className=\"lead text-danger text-center\"> {errors.message}</p>\n          )}\n\n          <select className=\"form-control\" onChange={handleStatusChange}>\n            <option value=\"0\">select user account state</option>\n            <option value=\"active\">active</option>\n            <option value=\"inactive\">in active</option>\n          </select>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-md-8 offset-md-2\">\n          {processing && (\n            <div className=\"text-center\">\n              <Loading />\n            </div>\n          )}\n          {usersArray.length > 0 && (\n            <UserPanelTable\n              users={usersArray}\n              changeStatusFunc={activateDeactivateAccount}\n              processing={processingData}\n              currentLoginUser={currentLoginUser}\n            />\n          )}\n\n          <nav aria-label=\"Page navigation example\">\n            <ul className=\"pagination\">\n              {totalUsers > 50 &&\n                buttonsToDisplay(totalUsers, 50).map((_, index) => {\n                  return (\n                    <li\n                      className=\"page-item\"\n                      key={index}\n                      onClick={(e) => getMoreUsers(e, index + 1)}\n                    >\n                      <a className=\"page-link\" href=\"\">\n                        {index + 1}\n                      </a>\n                    </li>\n                  );\n                })}\n            </ul>\n          </nav>\n        </div>\n      </div>\n    </UsersPanelStyles>\n  );\n};\n\nexport default UsersPanel;\n","/app/src/components/uploadMedia.js",["511","512","513","514","515"],"import React, { useState, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport settings from \"../config\";\nconst axios = require(\"axios\").default;\n\nconst UploadMediaStyles = styled.div`\n  .upload-container {\n    display: flex;\n    border: 1px solid #87cac4;\n    border-radius: 22px 0px;\n    margin-top: 5%;\n  }\n\n  .leftside {\n    width: 20%;\n    background-color: #6aa552;\n    border-radius: 22px 0 0px 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    h3 {\n      writing-mode: vertical-rl;\n      color: #1e29c3;\n    }\n  }\n\n  .rightside {\n    width: 80%;\n    padding: 20px;\n  }\n`;\n\nconst UploadMedia = () => {\n  const [media, setMedia] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [fileType, setFileType] = useState(\"\");\n  const [file, setFile] = useState(null);\n  const [submitted, setSubmitted] = useState(false);\n  const [progressStatus, setProgressStatus] = useState(0);\n\n  const fileRef = useRef();\n\n  const handleChange = (e) => {\n    const value = e.target.value;\n    const name = e.target.name;\n    switch (name) {\n      case \"media\":\n        if (value != \"0\") {\n          setMedia(value);\n        }\n        break;\n      case \"description\":\n        setDescription(value);\n        break;\n      case \"fileType\":\n        if (value != \"0\") {\n          setFileType(value);\n        }\n        break;\n    }\n  };\n\n  const onFileChange = (e) => {\n    const file = e.target.files[0];\n\n    const extention = [\"jpg\", \"jpeg\", \"png\", \"gif\", \"mp4\"];\n    //check for the type of image we are uploading\n    if (media === \"image\") {\n      //check extension\n      const position = file.name.lastIndexOf(\".\");\n      const fileExt = file.name.substr(position + 1, file.name.length);\n      const index = extention.indexOf(fileExt);\n      if (index == -1) {\n        window.alert(`please you can only select an image.`);\n        return;\n      }\n    }\n\n    if (media === \"pdf\") {\n      //check extension\n      const position = file.name.lastIndexOf(\".\");\n      const fileExt = file.name.substr(position + 1, file.name.length);\n      if (fileExt != \"pdf\") {\n        window.alert(`please select only a pdf file`);\n        return;\n      }\n    }\n    //save the file here\n    setFile(file);\n  };\n\n  const handleFormSubmit = async (e) => {\n    e.preventDefault();\n    //check if we have a file stored in state\n    if (!file) {\n      window.alert(\"please select a file to upload\");\n      return;\n    }\n    if (!description) {\n      window.alert(\"file description is required\");\n      return;\n    }\n\n    if (!fileType) {\n      window.alert(\"file type is required.Please select the file type\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"description\", description);\n    formData.append(\"digitalAssets\", file);\n    formData.append(\"assetType\", fileType);\n    setSubmitted(true);\n\n    await axios.request({\n      method: \"post\",\n      url: `${settings.API_URL}/api/uploadFile`,\n      data: formData,\n      onUploadProgress: (ProgressEvent) => {\n        setProgressStatus(\n          parseFloat(\n            (ProgressEvent.loaded / ProgressEvent.total) * 100\n          ).toFixed(2)\n        );\n      },\n    });\n    setProgressStatus(100);\n    setSubmitted(false);\n    setMedia(\"0\");\n    setDescription(\"\");\n    setFileType(\"0\");\n    fileRef.current.value = \"\";\n    setFile(null);\n  };\n  return (\n    <UploadMediaStyles>\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3\">\n          <div className=\"media-div\">\n            <div className=\"upload-container\">\n              <div className=\"leftside\">\n                <h3>Upload Media Files</h3>\n              </div>\n              <div className=\"rightside\">\n                <form onSubmit={handleFormSubmit}>\n                  <div className=\"form-group\">\n                    <label>Media Type</label>\n                    <select\n                      className=\"form-control\"\n                      name=\"media\"\n                      onChange={handleChange}\n                      value={media}\n                    >\n                      <option value=\"0\">select media type</option>\n                      <option value=\"pdf\">documents (pdf)</option>\n                      <option value=\"image\">image</option>\n                    </select>\n                  </div>\n\n                  <div className=\"form-group\">\n                    <label>Media Type</label>\n                    <select\n                      className=\"form-control\"\n                      name=\"fileType\"\n                      onChange={handleChange}\n                      value={fileType}\n                    >\n                      <option value=\"0\">select file type</option>\n                      <option value=\"course materials\">course materials</option>\n                      <option value=\"past questions\">past questions</option>\n                    </select>\n                  </div>\n\n                  <div className=\"form-group\">\n                    <label>Description</label>\n                    <textarea\n                      name=\"description\"\n                      className=\"form-control\"\n                      aria-label=\"With textarea\"\n                      value={description}\n                      onChange={handleChange}\n                    ></textarea>\n                  </div>\n\n                  <div className=\"form-group\">\n                    <label className=\"form-control\">Select file</label>\n                    <input\n                      type=\"file\"\n                      className=\"form-control-file\"\n                      onChange={onFileChange}\n                      id=\"fileInput\"\n                      ref={fileRef}\n                    />\n                  </div>\n\n                  {submitted && (\n                    <div className=\"progress mb-3\">\n                      <div\n                        className=\"progress-bar\"\n                        role=\"progressbar\"\n                        style={{ width: progressStatus + \"%\" }}\n                        aria-valuenow={progressStatus}\n                        aria-valuemin=\"0\"\n                        aria-valuemax=\"100\"\n                      ></div>\n                    </div>\n                  )}\n\n                  <div className=\"text-center\">\n                    <button\n                      type=\"submit\"\n                      disabled={submitted}\n                      className=\"btn btn-success\"\n                    >\n                      submit\n                    </button>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </UploadMediaStyles>\n  );\n};\n\nexport default UploadMedia;\n","/app/src/components/saveSpellingQuestions.js",["516","517","518","519","520","521","522","523"],"import React, { useEffect, useState } from \"react\";\nimport { GetDifferentExamination } from \"../graphql/queries\";\nimport { SaveSpelling, EditSpelling } from \"../graphql/mutation\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst SpellingQuestionStyles = styled.div`\n  .btn-wl {\n    cursor: pointer;\n  }\n\n  .input-row {\n    margin: 10px 0px;\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .input-spelling {\n    margin: 10px;\n    text-align: center;\n    font-size: 40px;\n    width: 80px;\n    height: 80px;\n  }\n  .guide-div {\n    margin: 20px 0 0 0px;\n  }\n`;\n\nconst createInputBox = (number) => {\n  let inputArray = [];\n  for (let i = 0; i < number; i++) {\n    let obj = {\n      value: \"\",\n      index: i,\n    };\n    inputArray.push(obj);\n  }\n  return inputArray;\n};\n\nconst createInputBoxWithWord = (word) => {\n  let inputArray = [];\n  for (let i = 0; i < word.length; i++) {\n    let obj = {\n      value: word[i],\n      index: i,\n    };\n    inputArray.push(obj);\n  }\n  return inputArray;\n};\n\nconst SaveSpellingQuestion = () => {\n  const navigate = useNavigate();\n  const [inputArray, setArrayInput] = useState([]);\n  const [wordLength, setWordLength] = useState(\"\");\n  const [inputLength, setInputLength] = useState(0);\n  const [correctSpelling, setCorrectSpelling] = useState(\"\");\n  const [spellingClue, setSpellingClue] = useState(\"\");\n  const [selectedExamType, setExamType] = useState(\"\");\n  const [examTypeData, setExamDataType] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [examId, setExamId] = useState(null);\n  const [examName, setExamName] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [submitted, setSubmitted] = useState(false);\n  const [editId, setEditId] = useState(null);\n\n  const [examTypeQuery, examTypeResult] = useLazyQuery(GetDifferentExamination);\n  const [saveSpellingMutation, saveSpellingResult] = useMutation(SaveSpelling);\n\n  const [editSpellingMutation, editSpellingResult] = useMutation(EditSpelling);\n  const location = useLocation();\n\n  //check if we are having an edit\n  \n  const question = location.state && location.state.question;\n  const wordLengthFunction = () => {\n    setInputLength(wordLength);\n    let arr = createInputBox(wordLength);\n    setArrayInput(arr);\n  };\n\n  useEffect(() => {\n    //we are running an update we need to load stuffs here\n    //updating a question here\n    if (question) {\n      const { word, clue, correctWord, id, examinationType, examId } = question;\n      setInputLength(word.length);\n      setWordLength(word.length);\n      let arr = createInputBoxWithWord(word);\n      setArrayInput(arr);\n      setExamName(examinationType);\n      setExamId(examId);\n      setCorrectSpelling(correctWord);\n      setSpellingClue(clue);\n      setEditId(id);\n    }\n  }, []);\n\n  useEffect(() => {\n    examTypeQuery({\n      variables: {\n        examType: \"spelling examination\",\n      },\n    });\n  }, []);\n\n  useEffect(() => {\n    if (saveSpellingResult.data) {\n      setSubmitted(false);\n      setArrayInput([]);\n      setWordLength(\"\");\n      setCorrectSpelling(\"\");\n      setSpellingClue(\"\");\n      alert(\"spelling question saved successful\");\n    }\n\n    if (saveSpellingResult.error) {\n      setSubmitted(false);\n      setErrors(saveSpellingResult.error);\n    }\n  }, [saveSpellingResult.data, saveSpellingResult.error]);\n\n  //edit question mutation\n  useEffect(() => {\n    if (editSpellingResult.data) {\n      setSubmitted(false);\n      setArrayInput([]);\n      setWordLength(\"\");\n      setCorrectSpelling(\"\");\n      setSpellingClue(\"\");\n      alert(\"edit was successful\");\n      navigate(\"/load_spelling_question\");\n    }\n\n    if (editSpellingResult.error) {\n      setSubmitted(false);\n      setErrors(saveSpellingResult.error);\n    }\n  }, [editSpellingResult.data, editSpellingResult.error]);\n\n  useEffect(() => {\n    if (examTypeResult.loading) {\n      setLoading(true);\n    }\n    if (examTypeResult.data) {\n      const data = examTypeResult.data.getExamByType;\n      setExamDataType(data);\n      setLoading(false);\n    }\n    if (examTypeResult.error) {\n      setLoading(false);\n      setErrors(examTypeResult.error);\n    }\n  }, [examTypeResult.data, examTypeResult.error, examTypeResult.loading]);\n\n  const handleWordLengthChange = (e) => {\n    const value = e.target.value;\n    if (typeof +value == \"number\") {\n      setWordLength(+value);\n    }\n  };\n\n  const handleTextInputChange = (e, index) => {\n    const value = e.target.value;\n    if (value.length <= 1) {\n      let arrayOfInputs = [...inputArray];\n      const newValue = {\n        value: value.toUpperCase(),\n        index,\n      };\n      arrayOfInputs[index] = newValue;\n      setArrayInput(arrayOfInputs);\n    }\n  };\n\n  const handleSpelling = (e) => {\n    const value = e.target.value;\n    const name = e.target.name;\n    switch (name) {\n      case \"correctSpelling\":\n        if (value.length <= wordLength) {\n          setCorrectSpelling(value);\n        }\n        break;\n\n      case \"spellingClue\":\n        setSpellingClue(value);\n        break;\n    }\n  };\n\n  const handleExamChange = (e) => {\n    const value = e.target.value;\n    if (value !== \"0\") setExamType(value);\n    const splitValue = value.split(\"/\");\n    const examId = splitValue[0];\n    const examName = splitValue[1];\n    setExamId(examId);\n    setExamName(examName);\n  };\n\n  const handleQuestionSubmission = async () => {\n    //get all the values from the check box\n    let buildWord = \"\";\n    inputArray.map(({ value }) => {\n      const letter = value;\n      buildWord += letter;\n    });\n    //check if the world contain any asterik\n    const checkValue = buildWord.indexOf(\"*\");\n    if (checkValue == -1) {\n      alert(\"please enter at least one asterik character\");\n      return;\n    }\n    const inputValue = {\n      word: buildWord,\n      correctWord: correctSpelling,\n      clue: spellingClue,\n      examinationType: examName,\n      examId,\n      createdAt: new Date(),\n    };\n    try {\n      setSubmitted(true);\n      if (editId) {\n        await editSpellingMutation({\n          variables: {\n            input: inputValue,\n            questionId: editId,\n          },\n        });\n      } else {\n        await saveSpellingMutation({\n          variables: {\n            input: inputValue,\n          },\n        });\n      }\n    } catch (error) {}\n  };\n\n  return (\n    <SpellingQuestionStyles>\n      <div className=\"row justify-content-center\">\n        <div className=\"col-md-6\">\n          <div className=\"container-shadow\">\n            <div className=\"text-center\">\n              {errors && <p className=\"text-center lead\">{errors.message}</p>}\n            </div>\n\n            {editId === null && (\n              <div className=\"form-group\">\n                <select className=\"custom-select\" onChange={handleExamChange}>\n                  <option value=\"0\">select examination type</option>\n                  {loading && <option>loading data.......</option>}\n                  {examTypeData.map(({ id, examName }) => {\n                    return (\n                      <option value={`${id}/${examName}`} key={id}>\n                        {examName}\n                      </option>\n                    );\n                  })}\n                </select>\n              </div>\n            )}\n\n            {examId && examName && (\n              <React.Fragment>\n                {editId === null && (\n                  <p className=\"lead\">saving questions into {examName}</p>\n                )}\n                {editId && <p className=\"lead\">Editing Question</p>}\n                <div className=\"input-group word-length\">\n                  <input\n                    type=\"text\"\n                    value={wordLength}\n                    onChange={handleWordLengthChange}\n                    className=\"form-control\"\n                    placeholder=\"word length...\"\n                    aria-label=\"Input group example\"\n                    aria-describedby=\"btnGroupAddon2\"\n                  />\n                  <div\n                    className=\"input-group-prepend btn-wl\"\n                    onClick={wordLengthFunction}\n                  >\n                    <div className=\"input-group-text\" id=\"btnGroupAddon2\">\n                      Enter word length\n                    </div>\n                  </div>\n                </div>\n                {inputArray.length > 0 && (\n                  <div className=\"guide-div\">\n                    <p>\n                      Enter the spelling word. Use * to denote the missing word\n                    </p>\n                  </div>\n                )}\n\n                <div className=\"input-row\">\n                  {inputArray.map(({ value, index }, ind) => {\n                    return (\n                      <input\n                        key={ind}\n                        type=\"text\"\n                        value={value}\n                        className=\"form-control input-spelling\"\n                        onChange={(e) => handleTextInputChange(e, index)}\n                      />\n                    );\n                  })}\n                </div>\n                {inputArray.length > 0 && (\n                  <React.Fragment>\n                    <div className=\"form-group\">\n                      <label htmlFor=\"correctSpelling\">Correct spelling</label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        value={correctSpelling}\n                        id=\"correctSpelling\"\n                        placeholder=\"Correct spelling\"\n                        name=\"correctSpelling\"\n                        onChange={handleSpelling}\n                      />\n                    </div>\n\n                    <div className=\"form-group\">\n                      <label htmlFor=\"spellingClue\">Clue</label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        value={spellingClue}\n                        id=\"spellingClue\"\n                        placeholder=\"Spelling clue\"\n                        name=\"spellingClue\"\n                        onChange={handleSpelling}\n                      />\n                    </div>\n\n                    <div className=\"text-center\">\n                      {editId ? (\n                        <button\n                          disabled={submitted}\n                          className=\"btn btn-warning\"\n                          onClick={handleQuestionSubmission}\n                        >\n                          {\" \"}\n                          {!submitted\n                            ? \"Edit Question\"\n                            : \"editing please wait....\"}\n                        </button>\n                      ) : (\n                        <button\n                          disabled={submitted}\n                          className=\"btn btn-success\"\n                          onClick={handleQuestionSubmission}\n                        >\n                          {\" \"}\n                          {!submitted\n                            ? \"Save Spelling Questions\"\n                            : \"Saving please wait....\"}\n                        </button>\n                      )}\n                    </div>\n                  </React.Fragment>\n                )}\n              </React.Fragment>\n            )}\n          </div>\n        </div>\n      </div>\n    </SpellingQuestionStyles>\n  );\n};\n\nexport default SaveSpellingQuestion;\n","/app/src/components/startSpellingExam.js",["524","525","526","527","528"],"import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport CountDownTimer from \"./countDownTimer\";\n//import NewWindow from \"react-new-window\";\nimport state from \"../applicationState\";\nimport { useRecoilValue } from \"recoil\";\nimport { useMutation } from \"@apollo/client\";\nimport { SpellingExaminationEnded } from \"../graphql/mutation\";\nimport store from \"store\";\nimport methods from \"../methods\";\nimport Modal from \"react-modal\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport settings from \"../config\";\n\nconst baseUrl = settings.API_URL;\nModal.setAppElement(\"#root\");\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\nconst QuestionPanelStyles = styled.div`\n  .card-layout {\n    background: #8e8383;\n    padding: 20px;\n  }\n  .exam-text {\n    font-size: 15px;\n  }\n\n  hr {\n    border: 1px solid #88b388;\n\n    width: 100%;\n  }\n\n  .btn-div {\n    margin-bottom: 20px;\n  }\n\n  .btn-wl {\n    cursor: pointer;\n  }\n\n  .input-row {\n    margin: 10px 0px;\n    display: flex;\n  }\n  .input-spelling {\n    margin: 10px;\n    text-align: center;\n    font-size: 40px;\n    width: 80px;\n    height: 80px;\n  }\n  .number {\n    font-size: 24px;\n    align-self: center;\n    padding: 0 40px;\n  }\n  .div-spellingWord {\n    display: flex;\n    flex-wrap: wrap;\n  }\n\n  .guide-div {\n    margin: 20px 0 0 0px;\n  }\n  .spelling-div {\n    display: flex;\n    flex-direction: column;\n    position: relative;\n    justify-content: space-between;\n  }\n  .clue {\n    margin: 10px 105px;\n    font-size: 20px;\n  }\n  .exam-label {\n    font-size: 22px;\n  }\n  .exam-span {\n    margin: 20px;\n    font-weight: bold;\n    font-size: 14px;\n  }\n  .exam-div {\n    width: 100%;\n    position: relative;\n  }\n\n  .exam-div::before {\n    content: \"\";\n    background-image: url(\"/assets/spelling_bee.png\");\n    background-size: contain;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    opacity: 0.11;\n  }\n  .btn-exam {\n    position: relative;\n  }\n\n  .details {\n    background-color: #0b2f27;\n    color: #fff;\n    padding: 30px;\n  }\n  .text-name {\n    color: #f8f8f5 !important;\n  }\n  .spanDetails {\n    float: right;\n    font-weight: bold;\n    color: #f9f4ef;\n    font-size: 12px;\n  }\n\n  @media only screen and (max-width: 800px) {\n    .exam-div {\n    }\n\n    .clue {\n      margin: 1px 55px;\n      font-size: 16px;\n    }\n    .input-row {\n      margin: 0px 5px;\n    }\n    .input-spelling {\n      font-size: 20px;\n      width: 50px;\n      height: 50px;\n    }\n    .number {\n      font-size: 24px;\n      align-self: center;\n      padding: 0 10px;\n    }\n\n    .spelling-div {\n    }\n    .div-spellingWord {\n      align-items: center;\n    }\n\n    .spanDetails {\n      text-align: left;\n      float: none;\n      padding: 5px;\n    }\n    .btn-div {\n      margin-bottom: 20px;\n    }\n  }\n`;\n\nconst disableContext = (e) => {\n  e.preventDefault();\n};\n\nconst disableButtons = (e) => {\n  const code = e.which || e.keyCode;\n  switch (code) {\n    case 116:\n      return e.preventDefault();\n    default:\n      return true;\n  }\n};\n\nconst buildUpQuestions = (questionsArray = []) => {\n  let buildArray = [];\n  questionsArray.map(({ word, correctWord, clue }, index) => {\n    let questionObject = {\n      word,\n      number: index,\n      clue,\n      correctWord,\n    };\n    let wordArray = [];\n    //split word here and turn into an array\n    for (let i = 0; i < word.length; i++) {\n      const currentLetter = word[i];\n      const inputObject = {};\n      if (currentLetter === \"*\") {\n        inputObject.readOnly = false;\n        inputObject.value = \"*\";\n      } else {\n        inputObject.readOnly = true;\n        inputObject.value = currentLetter;\n      }\n      wordArray.push(inputObject);\n    }\n    questionObject.wordArray = wordArray;\n    buildArray.push(questionObject);\n  });\n  return buildArray;\n};\n\nconst QuestionPanelSpelling = (props) => {\n  const match = useRouteMatch(\"/exam/spelling/:examId\");\n  const [examinationEndedFunction, examinationEndedResult] = useMutation(\n    SpellingExaminationEnded\n  );\n  const [submitting, setSubmitting] = useState(false);\n  const [errors, setErrors] = useState(null);\n  const [examIdValue, setExamIdValue] = useState(null);\n  const examStarted = useRecoilValue(state.examStartedState);\n  const questionsFromStore = store.get(\"examQuestions\");\n  const examIdinStore = store.get(\"examId\");\n  const examStartedinStore = store.get(\"examStarted\");\n  const [questions, setQuestionsData] = useState([]);\n  const [scoreDetails, setScoreDetails] = useState(null);\n  const currentUser = useRecoilValue(state.currentLoginUserState);\n  const [user, setUser] = useState(null);\n  const storedData = store.get(\"questionData\");\n  const { examName, examType, examDuration } = store.get(\"examDetails\");\n  let examId = match.params.examId;\n\n  //effect to build up the questions\n  useEffect(() => {\n    const questionData = buildUpQuestions(questionsFromStore);\n    setUser(currentUser);\n    setQuestionsData(questionData);\n    const storedData = store.get(\"questionData\");\n    if (!storedData) {\n      store.set(\"questionData\", questionData);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!examId) {\n      props.history.push(\"/exam_start_page\");\n    }\n    setExamIdValue(examId);\n  }, [examId]);\n\n  useEffect(() => {\n    window.addEventListener(\"contextmenu\", disableContext);\n    window.addEventListener(\"keydown\", disableButtons);\n    return () => {\n      window.removeEventListener(\"contextmenu\", disableContext);\n      window.removeEventListener(\"keydown\", disableButtons);\n    };\n  });\n\n  useEffect(() => {\n    const { loading, data, error } = examinationEndedResult;\n    if (loading) {\n      //show a modal asking them to wait that submission is on going.\n    }\n    if (data) {\n      //redirect here to the summary page\n      setSubmitting(!submitting);\n      //clear the store value\n      //methods.Utils.ClearStoreValue();\n      props.history.replace(`/exam_summary/spelling/${examIdValue}`, {\n        scoreDetails: scoreDetails,\n      });\n    }\n\n    if (error) {\n      setErrors(error.message);\n      setSubmitting(!submitting);\n    }\n  }, [\n    examinationEndedResult.loading,\n    examinationEndedResult.data,\n    examinationEndedResult.error,\n  ]);\n\n  const submitQuizHandler = async () => {\n    //get the quiz answers and the other variables in the system\n    let examStartedVariable, examIdVariable;\n    examStartedVariable = examStarted ? examStarted : examStartedinStore;\n    examIdVariable = examId ? examId : examIdinStore;\n    if (examStartedVariable && examIdVariable) {\n      //we are good we can gather things here\n      const { total, scripts } = methods.MarkSpellingExam(storedData);\n      setScoreDetails({\n        score: total,\n        totalQuestions: scripts.length,\n        examId: examIdVariable,\n      });\n      const submissionObject = {\n        examTakenId: examIdVariable,\n        examFinished: true,\n        timeExamEnded: new Date(),\n        score: total,\n        scripts,\n      };\n      try {\n        setSubmitting(!submitting);\n        await examinationEndedFunction({\n          variables: {\n            submissionDetails: submissionObject,\n          },\n        });\n      } catch (error) {}\n    }\n  };\n\n  const handleSubmitQuiz = () => {\n    const confirmSubmit = window.confirm(\"Are you sure you want to submit now\");\n    if (!confirmSubmit) return;\n    submitQuizHandler();\n  };\n\n  const handleTextInputChange = ({ e, arrayPosition, wordPosition }) => {\n    const value = e.target.value;\n    if (value.length <= 1) {\n      const cloneData = [...storedData];\n      const currentInput = cloneData[arrayPosition].wordArray[wordPosition];\n      currentInput.value = value.toUpperCase();\n      cloneData[arrayPosition].wordArray[wordPosition] = currentInput;\n      //save the data back into the purse\n      store.set(\"questionData\", cloneData);\n      setQuestionsData(cloneData);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <QuestionPanelStyles>\n        <div className=\"row justify-content-center\">\n          <div className=\"col-md-10 col-sm-12 col-lg-10\">\n            <div className=\"details card-title container-shadow\">\n              <h2 className=\"text-center text-name\">\n                {examName && examName.toUpperCase()}\n              </h2>\n\n              <p className=\"exam-text\">\n                EXAMINATION TYPE:\n                <span className=\"spanDetails\">\n                  {examType && examType.toUpperCase()}\n                </span>\n              </p>\n              <p className=\"exam-text\">\n                EXZMINATION TIME:\n                <span className=\"spanDetails\">\n                  {methods.Utils.ConvertMinutesToHours(examDuration)}\n                </span>\n              </p>\n\n              <div className=\"text-center\">\n                <CountDownTimer submitQuiz={submitQuizHandler} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row justify-content-center\">\n          <div className=\"col-sm-10 col-md-10 col-lg-10\">\n            <div className=\"exam-div mb-4 container-shadow\">\n              <div className=\"card-body\">\n                {errors && <p className=\"lead text-danger\">{errors}</p>}\n                {storedData &&\n                  storedData.map(({ number, clue, wordArray }, ind) => {\n                    return (\n                      <div className=\"spelling-div\" key={ind}>\n                        <div className=\"input-row\">\n                          <p className=\"number\">{number + 1}. </p>\n\n                          <div className=\"div-spellingWord\">\n                            {wordArray &&\n                              wordArray.map(({ readOnly, value }, index) => {\n                                return (\n                                  <input\n                                    key={value + readOnly + index}\n                                    disabled={readOnly}\n                                    type=\"text\"\n                                    value={value === \"*\" ? \"\" : value}\n                                    placeholder={value === \"*\" ? \"-\" : \"\"}\n                                    className=\"form-control input-spelling\"\n                                    onChange={(e) =>\n                                      handleTextInputChange({\n                                        e,\n                                        arrayPosition: ind,\n                                        wordPosition: index,\n                                      })\n                                    }\n                                  />\n                                );\n                              })}\n                          </div>\n                        </div>\n                        <p className=\"clue\">clue : {clue}</p>\n                        <hr />\n                      </div>\n                    );\n                  })}\n              </div>\n            </div>\n            <div className=\"btn-div\">\n              <div className=\"text-center\">\n                <button\n                  className=\"btn btn-success btn-exam\"\n                  disabled={submitting}\n                  onClick={handleSubmitQuiz}\n                >\n                  {submitting\n                    ? \"submitting please wait\"\n                    : \"Submit Spelling Examination\"}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </QuestionPanelStyles>\n\n      <Modal\n        isOpen={submitting}\n        style={customStyles}\n        contentLabel=\"Examination submission modal\"\n      >\n        <p>Submitting examination please wait........</p>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default QuestionPanelSpelling;\n","/app/src/components/spellingExamSummary.js",["529"],"import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useParams, useLocation, useNavigate } from \"react-router-dom\";\nimport { useAuth } from \"../context\";\nimport methods from \"../methods\"\n\n\nconst ExamSummaryStyles = styled.div`\n  .summaryDiv {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 600px;\n  }\n  .summaryBoard {\n    background-color: #0f292d;\n    width: 100%;\n    margin: 20%;\n    padding: 20px;\n    color: white;\n\n    p {\n      font-size: 20px;\n      padding: 20px;\n    }\n\n    span {\n      float: right;\n    }\n  }\n  .user {\n    background: #1a3a28;\n    padding: 20px;\n  }\n  .score {\n    background: #205d4c;\n    padding: 20px;\n  }\n\n  .total {\n    background: #11233e;\n    padding: 20px;\n  }\n\n  .percentage {\n    background: #080802;\n    padding: 20px;\n  }\n  .grade {\n    background: #44194c;\n    padding: 20px;\n  }\n`;\n\n\n\nconst ExamSummaryComponent = (props) => {\n  const location = useLocation();\n  const navigate = useNavigate()\n  const { currentLoginUser: currentUser } = useAuth();\n  const scoreDetails = location.state && location.state.scoreDetails;\n  const { score, totalQuestions } = scoreDetails || {};\n  const { examId  } = useParams();\n  const total = totalQuestions;\n  const percentageScore = ((score / total) * 100).toFixed(2);\n  const grade = percentageScore >= 50 ? \"Pass\" : \"Fail\";\n\n  //clear the store and variables here\n\n  const navigateToScriptPage = () => {\n    navigate(`/spelling_examination_script/${examId}`);\n  };\n\n  useEffect(() => {\n    //persists it to store here\n    methods.Utils.ClearStoreValue();\n  }, []);\n\n  const onUnloadFunction = () => {\n    alert(\"we are about starting the exam\");\n  };\n  return (\n    <ExamSummaryStyles>\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <div className=\"summaryDiv\">\n            <div className=\"summaryBoard\">\n              <p className=\"text-center lead\">Result Summary</p>\n              <p className=\"user\">\n                Name : <span>{currentUser && currentUser.name.toUpperCase()}</span>\n              </p>\n\n              <p className=\"score\">\n                Score: <span>{score}</span>\n              </p>\n\n              <p className=\"total\">\n                Total : <span>{total}</span>\n              </p>\n\n              <p className=\"percentage\">\n                Percentage : <span>{percentageScore}%</span>\n              </p>\n\n              <p className=\"grade\">\n                Grade : <span>{grade}</span>\n              </p>\n            </div>\n          </div>\n          <div className=\"text-center\">\n            <button\n              className=\"btn btn-danger btn-lg\"\n              onClick={navigateToScriptPage}\n            >\n              view scripts\n            </button>\n          </div>\n        </div>\n      </div>\n    </ExamSummaryStyles>\n  );\n};\n\nexport default ExamSummaryComponent;\n","/app/src/components/displaySpellingScriptComponent.js",["530","531","532","533"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { GetCanidateExamResult } from \"../graphql/queries\";\nimport { useParams } from \"react-router-dom\";\nimport Loading from \"../common/loading\";\nimport DisplaySpellingScriptComponent from \"../common/displaySpellingScriptComponent\";\n\nconst DisplayQuizScriptComponentStyles = styled.div`\n  p {\n    font-size: 18px;\n  }\n  .question {\n    font-size: 16px;\n  }\n  span {\n    padding-left: 50px;\n  }\n  .question-panel {\n    display: flex;\n    font-size: 16px;\n  }\n  .question-divs {\n    padding-left: 20px;\n  }\n  .details {\n    background-color: #0b2f27;\n    color: #fff;\n    padding: 30px;\n  }\n  .text-name {\n    color: #7abbff !important;\n  }\n  .spanDetails {\n    float: right;\n    font-weight: bold;\n    color: #7c23f3;\n  }\n  .score {\n    font-size: 35px;\n    text-align: center;\n  }\n`;\n\nconst convertMinutesToHours = (minutesToConvert) => {\n  const hours = Math.floor(minutesToConvert / 60);\n  const minutes = minutesToConvert - hours * 60;\n  if (hours == 0) {\n    return `${minutes} minutes`;\n  }\n  return `${hours} hours ${minutes} minutes`;\n};\n\nconst DisplayQuizScriptComponent = () => {\n  const { examId } = useParams();\n  const [processing, setProcessing] = useState(false);\n  const [errors, setErrors] = useState(null);\n  const [scripts, setScripts] = useState(null);\n  const [nodata, setNoData] = useState(null);\n  const [getScriptFunction, getScriptResult] = useLazyQuery(\n    GetCanidateExamResult,\n    {\n      variables: {\n        examId: examId,\n      },\n    }\n  );\n\n  useEffect(() => {\n    setProcessing(!processing);\n    getScriptFunction();\n  }, []);\n\n  useEffect(() => {\n    if (getScriptResult.data) {\n      const scriptsData = getScriptResult.data.getExamOfCanidate;\n      if (scriptsData) {\n        setScripts(scriptsData);\n      } else {\n        setNoData(true);\n      }\n      setProcessing(!processing);\n    }\n    if (getScriptResult.error) {\n      const message = getScriptResult.error.message;\n      setProcessing(!processing);\n      setErrors(message);\n    }\n  }, [getScriptResult.loading, getScriptResult.data, getScriptResult.error]);\n\n  return (\n    <DisplayQuizScriptComponentStyles>\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          {errors && <p className=\"text-center lead text-danger\">{errors}</p>}\n\n          {processing && (\n            <div className=\"text-center\">\n              <Loading />\n            </div>\n          )}\n\n          {nodata && (\n            <div className=\"text-center\">\n              <p className=\"lead text-info\">\n                No examination matching that query\n              </p>\n            </div>\n          )}\n\n          { console.log(scripts)}\n\n          {\n            scripts && (\n              <React.Fragment>\n                <DisplaySpellingScriptComponent scripts={scripts} />\n              </React.Fragment>\n            )\n            /* end of scripts matter here */\n          }\n        </div>\n      </div>\n    </DisplayQuizScriptComponentStyles>\n  );\n};\n\nexport default DisplayQuizScriptComponent;\n","/app/src/components/displayEssayScriptComponent.js",["534","535"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { GetCanidateExamResult } from \"../graphql/queries\";\nimport { useParams } from \"react-router-dom\";\nimport Loading from \"../common/loading\";\nimport DisplayEssayScriptComponent from \"../common/displayEssayScript\";\n\nconst DisplayEssayScriptStyles = styled.div`\n  p {\n    font-size: 18px;\n  }\n  .question {\n    font-size: 16px;\n  }\n  span {\n    padding-left: 50px;\n  }\n  .question-panel {\n    display: flex;\n    font-size: 16px;\n  }\n  .question-divs {\n    padding-left: 20px;\n  }\n  .details {\n    background-color: #0b2f27;\n    color: #fff;\n    padding: 30px;\n  }\n  .text-name {\n    color: #7abbff !important;\n  }\n  .spanDetails {\n    float: right;\n    font-weight: bold;\n    color: #7c23f3;\n  }\n  .score {\n    font-size: 35px;\n    text-align: center;\n  }\n`;\n\nconst DisplayQuizScriptComponent = () => {\n  const { examId } = useParams();\n  const [processing, setProcessing] = useState(false);\n  const [errors, setErrors] = useState(null);\n  const [scripts, setScripts] = useState(null);\n  const [nodata, setNoData] = useState(null);\n  const [getScriptFunction, getScriptResult] = useLazyQuery(\n    GetCanidateExamResult,\n    {\n      variables: {\n        examId: examId,\n      },\n    }\n  );\n\n  useEffect(() => {\n    setProcessing(!processing);\n    getScriptFunction();\n  }, []);\n\n  useEffect(() => {\n    if (getScriptResult.data) {\n      const scriptsData = getScriptResult.data.getExamOfCanidate;\n      if (scriptsData) {\n        setScripts(scriptsData);\n      } else {\n        setNoData(true);\n      }\n      setProcessing(!processing);\n    }\n    if (getScriptResult.error) {\n      const message = getScriptResult.error.message;\n      setProcessing(!processing);\n      setErrors(message);\n    }\n  }, [getScriptResult.loading, getScriptResult.data, getScriptResult.error]);\n\n  return (\n    <DisplayEssayScriptStyles>\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          {errors && <p className=\"text-center lead text-danger\">{errors}</p>}\n\n          {processing && (\n            <div className=\"text-center\">\n              <Loading />\n            </div>\n          )}\n\n          {nodata && (\n            <div className=\"text-center\">\n              <p className=\"lead text-info\">\n                No examination matching that query\n              </p>\n            </div>\n          )}\n\n          {\n            scripts && (\n              <React.Fragment>\n                <DisplayEssayScriptComponent scripts={scripts} />\n              </React.Fragment>\n            )\n            /* end of scripts matter here */\n          }\n        </div>\n      </div>\n    </DisplayEssayScriptStyles>\n  );\n};\n\nexport default DisplayQuizScriptComponent;\n","/app/src/components/viewSpellingExaminationScript.js",[],"/app/src/components/viewEssayExaminationScripts.js",[],"/app/src/components/loadSpellingQuestions.js",["536","537","538","539","540","541"],"import React, { useEffect, useState } from \"react\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport {\n  GetDifferentExamination,\n  GetAllSpellingQuestions,\n} from \"../graphql/queries\";\nimport { DeleteOneSpellingQuestion } from \"../graphql/mutation\";\nimport { useLocation } from \"react-router-dom\";\nimport Loading from \"../common/loading\";\nimport styled from \"styled-components\";\n\nconst LoadQuestionsStyle = styled.div``;\n\nconst buttonsToDisplay = (total, numberPerPage) => {\n  const buttonNumber = +total / +numberPerPage;\n  let array = [];\n  array.length = Math.ceil(buttonNumber);\n  return array.fill(1);\n};\n\nconst LoadQuestionsComponent = ({ history }) => {\n  const [examType, setExamType] = useState([]);\n  const [loadingData, setLoading] = useState(false);\n  const [selectedExamId, setSelectedExamId] = useState(\"\");\n  const [selectedExamName, setSelectedExamName] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [questions, setQuestions] = useState({});\n  const [totalQuestion, setTotalQuestion] = useState(0);\n  const [queryRan, setQueryRan] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n  const location = useLocation();\n  const details = location.state && location.state.details;\n  const [questionsQuery, questionsQueryResult] = useLazyQuery(\n    GetAllSpellingQuestions\n  );\n  const [examsQuery, examsQueryResult] = useLazyQuery(GetDifferentExamination);\n\n  const [deleteQuestion, deleteQuestionResult] = useMutation(\n    DeleteOneSpellingQuestion\n  );\n\n \n\n  useEffect(() => {\n    examsQuery({\n      variables: {\n        examType: \"spelling examination\",\n      },\n    });\n  }, []);\n\n  useEffect(() => {\n    if (examsQueryResult.data) {\n      setExamType(examsQueryResult.data.getExamByType);\n      setLoading(false);\n    }\n\n    if (examsQueryResult.loading) {\n      setLoading(true);\n    }\n\n    if (examsQueryResult.error) {\n      setErrors(examsQueryResult.error.message);\n      setLoading(false);\n    }\n  }, [examsQueryResult.data, examsQueryResult.error]);\n\n  useEffect(() => {\n    if (questionsQueryResult.error) {\n      setErrors(questionsQueryResult.error.message);\n      setLoading(true);\n      setQueryRan(!queryRan);\n    }\n\n    if (questionsQueryResult.data) {\n      setQuestions(questionsQueryResult.data.getAllSpellingQuestions.questions);\n      setTotalQuestion(\n        questionsQueryResult.data.getAllSpellingQuestions.totalQuestion\n      );\n      setLoading(false);\n    }\n  }, [questionsQueryResult.error, questionsQueryResult.data]);\n\n  useEffect(() => {\n    if (deleteQuestionResult.error) {\n      setErrors(deleteQuestionResult.error.message);\n      setLoading(true);\n      setSubmitted(false);\n    }\n\n    if (deleteQuestionResult.data) {\n      if (deleteQuestionResult.data.deleteSpellingQuestion) {\n        window.alert(\"question deleted successfully\");\n        setLoading(false);\n        setSubmitted(false);\n      }\n    }\n  }, [deleteQuestionResult.error, deleteQuestionResult.data]);\n\n  const getMoreQuestions = (e, index) => {\n    try {\n      e.stopPropagation();\n      e.preventDefault();\n      setLoading(true);\n      setQueryRan(!queryRan);\n      questionsQueryResult.fetchMore({\n        variables: {\n          examId: selectedExamId,\n          offset: questions.length * (index - 1),\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult) return prev;\n          return Object.assign({}, prev, {\n            getAllSpellingQuestions: {\n              totalQuestion:\n                fetchMoreResult.getAllSpellingQuestions.totalQuestion,\n              __typename: \"QuestionsTotal\",\n              questions: [\n                //...prev.getAllQuestions.questions,\n                ...fetchMoreResult.getAllSpellingQuestions.questions,\n              ],\n            },\n          });\n        },\n      });\n    } catch (error) {}\n  };\n\n  const handleExamChange = async (e) => {\n    const value = e.target.value;\n    if (value == \"0\") return;\n    const splitValue = value.split(\"/\");\n    setSelectedExamId(splitValue[0]);\n    setSelectedExamName(splitValue[1]);\n    try {\n      setQueryRan(!queryRan);\n      questionsQuery({\n        variables: {\n          examId: splitValue[0],\n          offset: 0,\n        },\n        fetchPolicy: \"cache-and-network\",\n      });\n    } catch (error) {}\n  };\n\n  const handleEditSpelling = ({\n    word,\n    clue,\n    correctWord,\n    id,\n    examinationType,\n    examId,\n    index,\n    questionsLength,\n  }) => {\n    history.push(\"/add_spelling_question\", {\n      question: {\n        word,\n        clue,\n        correctWord,\n        id,\n        examinationType,\n        examId,\n        index,\n        questionsLength,\n      },\n    });\n  };\n\n  const handleQuestionDeleteAction = async ({ questionId, index }) => {\n    const confirmDelete = window.confirm(\"Are you sure?\");\n    if (!confirmDelete) return;\n    //delete the question here\n    try {\n      setSubmitted(true);\n      setLoading(true);\n      await deleteQuestion({\n        variables: {\n          questionId,\n        },\n        refetchQueries: [\n          {\n            query: GetAllSpellingQuestions,\n            variables: {\n              examId: selectedExamId,\n              offset: questions.length * (index - 1),\n            },\n          },\n        ],\n      });\n    } catch (error) {}\n  };\n\n  return (\n    <LoadQuestionsStyle>\n      <div className=\"row\">\n        <div className=\"col-md-8 offset-md-2\">\n          {errors && <p className=\"lead text-danger\">Error: {errors}</p>}\n          <div className=\"form-group\">\n            <select className=\"custom-select\" onChange={handleExamChange}>\n              <option value=\"0\">select examination type</option>\n              {examsQueryResult.loading && <option>loading data.......</option>}\n              {examType &&\n                examType.length > 0 &&\n                examType.map(({ id, examName }) => {\n                  return (\n                    <option value={`${id}/${examName}`} key={id}>\n                      {examName}\n                    </option>\n                  );\n                })}\n            </select>\n          </div>\n\n          <div className=\"form-group\">\n            {selectedExamName && (\n              <p className=\"lead\">\n                Selected Examination:{\" \"}\n                <span>\n                  {selectedExamName && selectedExamName.toUpperCase()}\n                </span>\n              </p>\n            )}\n          </div>\n\n          {questions && questions.length > 0 ? (\n            <table className=\"table\">\n              <caption>Spelling Questions</caption>\n              <thead className=\"thead-dark\">\n                <tr>\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">Spelling Word</th>\n                  <th scope=\"col\">Correct Word</th>\n                  <th scope=\"col\">Clue</th>\n                  <th scope=\"col\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {questions.map(\n                  (\n                    { word, clue, correctWord, id, examinationType, examId },\n                    index\n                  ) => {\n                    return (\n                      <tr key={index}>\n                        <th scope=\"row\">{index + 1}</th>\n                        <td>\n                          <p>{word.toUpperCase()}</p>\n                        </td>\n                        <td>\n                          <p>{correctWord.toUpperCase()}</p>\n                        </td>\n                        <td>\n                          <p>{clue}</p>\n                        </td>\n                        <td>\n                          <div\n                            className=\"btn-group\"\n                            role=\"group\"\n                            aria-label=\"Basic example\"\n                          >\n                            <button\n                              type=\"button\"\n                              className=\"btn btn-warning\"\n                              onClick={() =>\n                                handleEditSpelling({\n                                  word,\n                                  clue,\n                                  correctWord,\n                                  id,\n                                  examinationType,\n                                  examId,\n                                  index: index + 1,\n                                  questionsLength: questions.length,\n                                })\n                              }\n                            >\n                              Edit\n                            </button>\n                            <button\n                              disabled={submitted}\n                              type=\"button\"\n                              onClick={() =>\n                                handleQuestionDeleteAction({\n                                  questionId: id,\n                                  index: index + 1,\n                                })\n                              }\n                              className=\"btn btn-danger\"\n                            >\n                              {submitted ? \"please wait...\" : \"Delete\"}\n                            </button>\n                          </div>\n                        </td>\n                      </tr>\n                    );\n                  }\n                )}\n              </tbody>\n            </table>\n          ) : (\n            <div>\n              {queryRan && (\n                <p>\n                  No questions saved yet for the selected examination;{\" \"}\n                  {selectedExamName}\n                </p>\n              )}\n            </div>\n          )}\n\n          {loadingData && <Loading />}\n\n          <nav aria-label=\"Page navigation example\">\n            <ul className=\"pagination\">\n              {totalQuestion > 20 &&\n                buttonsToDisplay(totalQuestion, 20).map((_, index) => {\n                  return (\n                    <li\n                      className=\"page-item\"\n                      key={index}\n                      onClick={(e) => getMoreQuestions(e, index + 1)}\n                    >\n                      <a className=\"page-link\" href=\"\">\n                        {index + 1}\n                      </a>\n                    </li>\n                  );\n                })}\n            </ul>\n          </nav>\n        </div>\n      </div>\n    </LoadQuestionsStyle>\n  );\n};\n\nexport default LoadQuestionsComponent;\n","/app/src/components/loadEssayQuestions.js",["542","543","544","545","546","547"],"import React, { useEffect, useState } from \"react\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport {\n  GetDifferentExamination,\n  GetAllEssayQuestions,\n} from \"../graphql/queries\";\nimport { DeleteOneEssayQuestion } from \"../graphql/mutation\";\nimport { useLocation } from \"react-router-dom\";\nimport Loading from \"../common/loading\";\nimport styled from \"styled-components\";\nimport methods from \"../methods\";\n\nconst LoadQuestionsStyle = styled.div``;\n\nconst buttonsToDisplay = (total, numberPerPage) => {\n  const buttonNumber = +total / +numberPerPage;\n  let array = [];\n  array.length = Math.ceil(buttonNumber);\n  return array.fill(1);\n};\n\nconst LoadQuestionsComponent = ({ history }) => {\n  const [examType, setExamType] = useState([]);\n  const [loadingData, setLoading] = useState(false);\n  const [selectedExamId, setSelectedExamId] = useState(\"\");\n  const [selectedExamName, setSelectedExamName] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [questions, setQuestions] = useState({});\n  const [totalQuestion, setTotalQuestion] = useState(0);\n  const [queryRan, setQueryRan] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n  const location = useLocation();\n  const details = location.state && location.state.details;\n  const [questionsQuery, questionsQueryResult] = useLazyQuery(\n    GetAllEssayQuestions\n  );\n  const [examsQuery, examsQueryResult] = useLazyQuery(GetDifferentExamination);\n\n  const [deleteQuestion, deleteQuestionResult] = useMutation(\n    DeleteOneEssayQuestion\n  );\n\n  useEffect(() => {\n    examsQuery({\n      variables: {\n        examType: \"short answer exam\",\n      },\n    });\n  }, []);\n\n  useEffect(() => {\n    if (examsQueryResult.data) {\n      setExamType(examsQueryResult.data.getExamByType);\n      setLoading(false);\n    }\n\n    if (examsQueryResult.loading) {\n      setLoading(true);\n    }\n\n    if (examsQueryResult.error) {\n      setErrors(examsQueryResult.error.message);\n      setLoading(false);\n    }\n  }, [examsQueryResult.data, examsQueryResult.error]);\n\n  useEffect(() => {\n    if (questionsQueryResult.error) {\n      setErrors(questionsQueryResult.error.message);\n      setLoading(true);\n      setQueryRan(!queryRan);\n    }\n\n    if (questionsQueryResult.data) {\n      setQuestions(questionsQueryResult.data.getAllEssayQuestions.questions);\n      setTotalQuestion(\n        questionsQueryResult.data.getAllEssayQuestions.totalQuestion\n      );\n      setLoading(false);\n    }\n  }, [questionsQueryResult.error, questionsQueryResult.data]);\n\n  useEffect(() => {\n    if (deleteQuestionResult.error) {\n      setErrors(deleteQuestionResult.error.message);\n      setLoading(true);\n      setSubmitted(false);\n    }\n\n    if (deleteQuestionResult.data) {\n      if (deleteQuestionResult.data.deleteEssayQuestion) {\n        window.alert(\"question deleted successfully\");\n        setLoading(false);\n        setSubmitted(false);\n      }\n    }\n  }, [deleteQuestionResult.error, deleteQuestionResult.data]);\n\n  const getMoreQuestions = (e, index) => {\n    try {\n      e.stopPropagation();\n      e.preventDefault();\n      setLoading(true);\n      setQueryRan(!queryRan);\n      questionsQueryResult.fetchMore({\n        variables: {\n          examId: selectedExamId,\n          offset: questions.length * (index - 1),\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult) return prev;\n          return Object.assign({}, prev, {\n            getAllEssayQuestions: {\n              totalQuestion: fetchMoreResult.getAllEssayQuestions.totalQuestion,\n              __typename: \"QuestionsTotal\",\n              questions: [\n                //...prev.getAllQuestions.questions,\n                ...fetchMoreResult.getAllEssayQuestions.questions,\n              ],\n            },\n          });\n        },\n      });\n    } catch (error) {}\n  };\n\n  const handleExamChange = async (e) => {\n    const value = e.target.value;\n    if (value == \"0\") return;\n    const splitValue = value.split(\"/\");\n    setSelectedExamId(splitValue[0]);\n    setSelectedExamName(splitValue[1]);\n    try {\n      setQueryRan(!queryRan);\n      questionsQuery({\n        variables: {\n          examId: splitValue[0],\n          offset: 0,\n        },\n        fetchPolicy: \"cache-and-network\",\n      });\n    } catch (error) {}\n  };\n\n  const handleEditEssay = ({\n    mediaType,\n    mediaUrl,\n    possibleAnswers,\n    clue,\n    question,\n    id,\n    examId\n  }) => {\n    history.push(\"/edit_essay_question\", {\n      questionData: {\n        mediaType,\n        mediaUrl,\n        possibleAnswers,\n        clue,\n        question,\n        id,\n        examId\n      },\n    });\n  };\n\n  const handleQuestionDeleteAction = async ({ questionId, index }) => {\n    const confirmDelete = window.confirm(\"Are you sure?\");\n    if (!confirmDelete) return;\n    //delete the question here\n    try {\n      setSubmitted(true);\n      setLoading(true);\n      await deleteQuestion({\n        variables: {\n          questionId,\n        },\n        refetchQueries: [\n          {\n            query: GetAllEssayQuestions,\n            variables: {\n              examId: selectedExamId,\n              offset: questions.length * (index - 1),\n            },\n          },\n        ],\n      });\n    } catch (error) {}\n  };\n\n  return (\n    <LoadQuestionsStyle>\n      <div className=\"row\">\n        <div className=\"col-md-8 offset-md-2\">\n          {errors && <p className=\"lead text-danger\">Error: {errors}</p>}\n          <div className=\"form-group\">\n            <select className=\"custom-select\" onChange={handleExamChange}>\n              <option value=\"0\">select examination type</option>\n              {examsQueryResult.loading && <option>loading data.......</option>}\n              {examType &&\n                examType.length > 0 &&\n                examType.map(({ id, examName }) => {\n                  return (\n                    <option value={`${id}/${examName}`} key={id}>\n                      {examName}\n                    </option>\n                  );\n                })}\n            </select>\n          </div>\n\n          <div className=\"form-group\">\n            {selectedExamName && (\n              <p className=\"lead\">\n                Selected Examination:{\" \"}\n                <span>\n                  {selectedExamName && selectedExamName.toUpperCase()}\n                </span>\n              </p>\n            )}\n          </div>\n\n          {questions && questions.length > 0 ? (\n            <table className=\"table\">\n              <caption>Short Essay Questions</caption>\n              <thead className=\"thead-dark\">\n                <tr>\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">Question</th>\n                  <th scope=\"col\">Possible Answer</th>\n                  <th scope=\"col\">Clue</th>\n                  <th scope=\"col\">Media Type</th>\n                  <th scope=\"col\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {questions.map(\n                  (\n                    {\n                      question,\n                      clue,\n                      possibleAnswers,\n                      id,\n                      examinationType,\n                      examId,\n                      mediaType,\n                      mediaUrl,\n                    },\n                    index\n                  ) => {\n                    return (\n                      <tr key={index}>\n                        <th scope=\"row\">{index + 1}</th>\n                        <td>\n                          <div\n                            className=\"question-divs\"\n                            dangerouslySetInnerHTML={methods.Utils.SetHtml(\n                              question\n                            )}\n                          />\n                        </td>\n                        <td>\n                          {possibleAnswers.map((ans) => {\n                            return <p key={ans}>{ans}</p>;\n                          })}\n                        </td>\n                        <td>\n                          <p>{clue}</p>\n                        </td>\n                        <td>\n                          <p>{mediaType ? mediaType : \"none\"}</p>\n                        </td>\n                        <td>\n                          <div\n                            className=\"btn-group\"\n                            role=\"group\"\n                            aria-label=\"Basic example\"\n                          >\n                            <button\n                              type=\"button\"\n                              className=\"btn btn-warning\"\n                              onClick={() =>\n                                handleEditEssay({\n                                  mediaType,\n                                  mediaUrl,\n                                  possibleAnswers,\n                                  clue,\n                                  question,\n                                  id,\n                                  examinationType,\n                                  examId,\n                                  index: index + 1,\n                                  questionsLength: questions.length,\n                                })\n                              }\n                            >\n                              Edit\n                            </button>\n                            <button\n                              disabled={submitted}\n                              type=\"button\"\n                              onClick={() =>\n                                handleQuestionDeleteAction({\n                                  questionId: id,\n                                  index: index + 1,\n                                })\n                              }\n                              className=\"btn btn-danger\"\n                            >\n                              {submitted ? \"please wait...\" : \"Delete\"}\n                            </button>\n                          </div>\n                        </td>\n                      </tr>\n                    );\n                  }\n                )}\n              </tbody>\n            </table>\n          ) : (\n            <div>\n              {queryRan && (\n                <p>\n                  No questions saved yet for the selected examination;{\" \"}\n                  {selectedExamName}\n                </p>\n              )}\n            </div>\n          )}\n\n          {loadingData && <Loading />}\n\n          <nav aria-label=\"Page navigation example\">\n            <ul className=\"pagination\">\n              {totalQuestion > 20 &&\n                buttonsToDisplay(totalQuestion, 20).map((_, index) => {\n                  return (\n                    <li\n                      className=\"page-item\"\n                      key={index}\n                      onClick={(e) => getMoreQuestions(e, index + 1)}\n                    >\n                      <a className=\"page-link\" href=\"\">\n                        {index + 1}\n                      </a>\n                    </li>\n                  );\n                })}\n            </ul>\n          </nav>\n        </div>\n      </div>\n    </LoadQuestionsStyle>\n  );\n};\n\nexport default LoadQuestionsComponent;\n","/app/src/components/saveEssayQuestions.js",["548","549","550","551","552","553","554","555"],"import React, { useEffect, useState, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport ExaminationTypeComponent from \"../common/examinationTypeComponent\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport DraftJsToolBar from \"../common/draftJSToolBar\";\nimport draftToHtml from \"draftjs-to-html\";\nimport { useMutation } from \"@apollo/client\";\nimport { SaveEssayQuestion } from \"../graphql/mutation\";\nimport {\n  EditorState,\n  convertToRaw,\n  ContentState,\n  convertFromHTML,\n} from \"draft-js\";\n\nconst SaveEssayQuestionStyles = styled.div`\n  .write-question {\n    background-color: #c0c0c0;\n    margin-bottom: 20px;\n    padding: 10px;\n  }\n  .possible-span {\n    padding: 5px;\n    display: inline-block;\n    background-color: #063c16;\n    margin-top: 10px;\n    margin-right: 10px;\n    cursor: pointer;\n    color: #fff;\n    border-radius: 0px 10px;\n  }\n  .file-details {\n    padding: 20px;\n    width: 30%;\n  }\n  .custom-width {\n    width: 50%;\n  }\n`;\n\nconst SaveEssayQuestionComponent = () => {\n  const [selectedExamType, setSelectedExamType] = useState(null);\n  const [examDetails, setExamDetails] = useState(null);\n  const [question, setQuestion] = useState(null);\n  const [preview, setPreview] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [clue, setClue] = useState(\"\");\n  const [possibleAnswers, setPossibleAnswers] = useState([]);\n  const [mediaType, setMediaType] = useState(\"\");\n  const [fileDetails, setFileDetails] = useState(null);\n  const [file, setFile] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [submitted, setSubmitted] = useState(false);\n  const [saveQuestionFunc, saveQuestionResult] = useMutation(SaveEssayQuestion);\n  const textAnswer = useRef();\n  const fileRef = useRef();\n\n  useEffect(() => {\n    if (saveQuestionResult.error) {\n      setSubmitted(false);\n      setErrors(saveQuestionResult.error.message);\n    }\n    if (saveQuestionResult.data) {\n      //const data = saveQuestionResult.data.saveEssayQuestion;\n\n      setSubmitted(false);\n      setClue(\"\");\n      setText(\"\");\n      setMediaType(\"0\");\n      setPossibleAnswers([]);\n      setFileDetails(null);\n      setFile(null);\n      setQuestion(null);\n      fileRef.current.value = \"\";\n      window.alert(\"question saved to database.\");\n    }\n  }, [saveQuestionResult.data, saveQuestionResult.error]);\n\n  const handleExamNameFunc = ({ examId, examName }) => {\n    setExamDetails({\n      examId,\n      examName,\n    });\n  };\n\n  const handleExamTypeFunc = (selectedExamName) => {\n    setSelectedExamType(selectedExamName);\n  };\n  const handleChange = (editorState) => {\n    let html = draftToHtml(convertToRaw(editorState.getCurrentContent()));\n    setQuestion(editorState);\n    setPreview(html);\n  };\n\n  const setHtml = (html) => {\n    return { __html: html };\n  };\n\n  const handleTextChange = (e) => {\n    const value = e.target.value;\n    if (value.lastIndexOf(\",\") != -1) {\n      const oldValues = [...possibleAnswers];\n      const valueWithoutComma = value.substr(0, value.length - 1);\n      const old = oldValues.filter((e) => e != valueWithoutComma);\n      setPossibleAnswers([...old, valueWithoutComma]);\n      setText(\"\");\n    } else {\n      setText(value);\n    }\n  };\n\n  const handleTextClueChange = (e) => {\n    const value = e.target.value;\n    setClue(value);\n  };\n\n  const removePossibleAnswer = (answer) => {\n    const oldValues = [...possibleAnswers];\n    const newValues = oldValues.filter((e) => e != answer);\n    setPossibleAnswers(newValues);\n  };\n\n  const handleMediaChange = (e) => {\n    const value = e.target.value;\n    if (value !== \"0\") {\n      setMediaType(value);\n    }\n  };\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    const { name, size, type } = file;\n    const fileType = type.split(\"/\")[0];\n    if (mediaType != fileType) {\n      window.alert(\n        `please select the correct media type: Select a ${mediaType}`\n      );\n      fileRef.current.value = \"\";\n      return;\n      //remove the reference\n    }\n    setFile(file);\n    setFileDetails({\n      name,\n      size,\n      type,\n    });\n  };\n\n  const submitQuestionToDB = async () => {\n    if (!selectedExamType) {\n      return window.alert(\"please select the exam type. It is required\");\n    }\n    if (!preview) {\n      return window.alert(\n        \"we can not save a question without the actual question. can we ?\"\n      );\n    }\n    if (possibleAnswers.length == 0) {\n      return window.alert(\"please enter possible answers for the question\");\n    }\n    if (!examDetails) {\n      return window.alert(\"select the subject/examination the question is for\");\n    }\n    try {\n      const { examId, examName } = examDetails;\n      let inputQuestion = {\n        type: selectedExamType,\n        question: preview,\n        clue: clue,\n        possibleAnswers: possibleAnswers,\n        examId: examId,\n        examinationType: examName,\n      };\n      if (mediaType) {\n        inputQuestion.mediaType = mediaType;\n        inputQuestion.mediaFile = file;\n      }\n      setSubmitted(true);\n      await saveQuestionFunc({\n        variables: {\n          input: inputQuestion,\n        },\n        context: { hasUpload: mediaType ? true : false },\n      });\n    } catch (error) {}\n  };\n\n  return (\n    <SaveEssayQuestionStyles>\n      <div className=\"row justify-content-center\">\n        <div className=\"col-md-8 container-shadow\">\n          <h3 className=\"text-center\">Add Essay Questions</h3>\n          {errors && <p className=\"text-danger lead\">{errors}</p>}\n          <ExaminationTypeComponent\n            selectedExamTypeFunc={handleExamTypeFunc}\n            selectedExamNameFunc={handleExamNameFunc}\n            display={2}\n          />\n\n          <div>\n            <p>\n              <b> Preview of the question</b>\n            </p>\n          </div>\n          <div className=\"\" dangerouslySetInnerHTML={setHtml(preview)} />\n\n          <h4> Type Question</h4>\n\n          <Editor\n            editorState={question}\n            onEditorStateChange={handleChange}\n            editorClassName=\"write-question\"\n            placeholder=\"Type your question here.....\"\n            toolbar={DraftJsToolBar}\n          />\n\n          <div className=\"form-group\">\n            <label className=\"form-label\">Possible answers</label>\n\n            <input\n              type=\"text\"\n              className=\"form-control custom-width\"\n              aria-label=\"With textarea\"\n              value={text}\n              onChange={handleTextChange}\n              ref={textAnswer}\n            />\n            <small className=\"form-text text-muted\">\n              Type each possible answer seperated by a comma (,)\n            </small>\n          </div>\n\n          {possibleAnswers.map((answer, index) => {\n            return (\n              <span\n                key={index}\n                className=\"possible-span\"\n                onClick={() => removePossibleAnswer(answer)}\n              >\n                {answer}\n              </span>\n            );\n          })}\n\n          <div className=\"form-group\">\n            <label className=\"form-label\">Answer clues </label>\n\n            <textarea\n              className=\"form-control custom-width\"\n              aria-label=\"With textarea\"\n              value={clue}\n              onChange={handleTextClueChange}\n            ></textarea>\n          </div>\n\n          <div className=\"form-group\">\n            <label className=\"form-label\">Media Type</label>\n            <select\n              className=\"custom-width form-control\"\n              onChange={handleMediaChange}\n              value={mediaType}\n            >\n              <option value=\"0\">select media type</option>\n              <option value=\"video\">video</option>\n              <option value=\"audio\">audio</option>\n              <option value=\"image\">image</option>\n            </select>\n          </div>\n\n          <div className=\"form-group\">\n            <input\n              type=\"file\"\n              ref={fileRef}\n              className=\"file-input\"\n              onChange={handleFileChange}\n            />\n          </div>\n\n          {fileDetails && (\n            <div className=\"file-details\">\n              <p>file name: {fileDetails.name}</p>\n\n              <p>file type: {fileDetails.type}</p>\n\n              <p>file size: {+fileDetails.size / 1000} KB</p>\n            </div>\n          )}\n\n          <div className=\"float-right mb-3\">\n            <button\n              className=\"btn btn-success\"\n              disabled={submitted}\n              onClick={submitQuestionToDB}\n            >\n              {submitted\n                ? \"submitting please wait....\"\n                : \"Save Essay Questions \"}\n            </button>\n          </div>\n        </div>\n      </div>\n    </SaveEssayQuestionStyles>\n  );\n};\n\nexport default SaveEssayQuestionComponent;\n","/app/src/components/addEssayQuestionsToExam.js",["556","557","558","559","560","561","562"],"import React, { useState, useEffect } from \"react\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport { AutoGenerateEssayQuestions } from \"../graphql/queries\";\nimport { AddEssayQuestionsArrayToScheduleExam } from \"../graphql/mutation\";\nimport styled from \"styled-components\";\nimport LoadEssayQuestionsComponent from \"../common/loadEssayQuestionComponent\";\nimport ExaminationTypeComponent from \"../common/examinationTypeComponent\";\nimport methods from \"../methods\"\nconst AddQuestionStyles = styled.div`\n  .div-details {\n    margin: 20px 0px;\n  }\n  .question-divs {\n    padding-left: 10px;\n    cursor: pointer;\n  }\n\n  .div-question-details {\n    display: flex;\n    padding: 10px;\n    font-size: 16px;\n  }\n  .exam-details {\n    background: #02291c;\n    text-align: center;\n    padding: 20px;\n    color: #fff;\n  }\n`;\n\nconst setHtml = (html) => {\n  return { __html: html };\n};\n\nconst AddEssayQuestionsToExam = () => {\n  const [errors, setErrors] = useState(null);\n  const [examType, setExamType] = useState([]);\n  const [processing, setProcessing] = useState(false);\n  const [examData, setExamData] = useState(null);\n  const [loadQuestion, setLoadQuestion] = useState(false);\n  const [questionLoading, setQuestionLoading] = useState(false);\n  const [selectedQuestion, setSelectedQuestion] = useState([]);\n  const [submitted, setSubmitted] = useState(false);\n  const [autoProcessing, setAutoProcessing] = useState(false);\n  const [scheduleArray, setScheduleArray] = useState([]);\n  const [examScheduleDetails, setExamScheduleDetails] = useState(null);\n\n  //auto generate essay questions\n  const [autoGenerateFunc, autoGenResult] = useLazyQuery(\n    AutoGenerateEssayQuestions,\n    {\n      variables: {\n        examId: examData && examData.examId,\n        number: examScheduleDetails && examScheduleDetails.numberofQuestions,\n      },\n      \n    }\n  );\n\n  //add essay questions to exam\n  const [addEssayQuestionToExam, addQuestionsToExamResult] = useMutation(\n    AddEssayQuestionsArrayToScheduleExam\n  );\n\n  //auto generate essay questions\n  useEffect(() => {\n    if (autoGenResult.data) {\n      //set the questions selected here\n      const autoQuestions = autoGenResult.data.autoGenEssayQuestions;\n      setAutoProcessing(!autoProcessing);\n      setSelectedQuestion(autoQuestions);\n    }\n    if (autoGenResult.error) {\n      setErrors(autoGenResult.error);\n      setAutoProcessing(!autoProcessing);\n    }\n  }, [autoGenResult.data, autoGenResult.error]);\n\n  //add essay question to exam mutation\n  useEffect(() => {\n    if (addQuestionsToExamResult.error) {\n      setProcessing(!processing);\n      setSubmitted(!submitted);\n      setErrors(addQuestionsToExamResult.error.message);\n    }\n\n    if (\n      addQuestionsToExamResult.data &&\n      addQuestionsToExamResult.data.addEssayQuestionsToExam\n    ) {\n      setProcessing(!processing);\n      window.alert(\"questions added successfully\");\n    }\n  }, [addQuestionsToExamResult.error, addQuestionsToExamResult.data]);\n\n  const handleLoadQuestions = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setLoadQuestion(!loadQuestion);\n    setQuestionLoading(!questionLoading);\n  };\n\n  const handleQuestionClick = (question) => {\n    const selectedQuestionLength = selectedQuestion.length;\n    const totalQuestion = examScheduleDetails.numberofQuestions;\n    const findQuestion = selectedQuestion.some((ques) => {\n      return ques.id == question.id;\n    });\n\n    if (findQuestion) {\n      return;\n    }\n    if (selectedQuestionLength < totalQuestion) {\n      //add the question to the question array\n      //check if the question has been saved before\n      setSelectedQuestion((questions) => {\n        return [...questions, question];\n      });\n    } else {\n      //remove the last item and append the new question\n      const oldItems = [...selectedQuestion];\n      oldItems.pop();\n      oldItems.push(question);\n      setSelectedQuestion(oldItems);\n    }\n  };\n\n  const removeQuestionFromQuestionArray = (id) => {\n    const remainQuestion = selectedQuestion.filter((ele) => ele.id !== id);\n    setSelectedQuestion(remainQuestion);\n  };\n\n  const handleSubmitQuestion = async () => {\n    if (examScheduleDetails.numberofQuestions > selectedQuestion.length) {\n      //we have not selected the complete questions\n      return window.alert(\n        `Please complete the questions. You have ${\n          examScheduleDetails.numberofQuestions - selectedQuestion.length\n        } questions left to add to the examination. `\n      );\n    }\n\n    const arrayOfEssayQuestions = selectedQuestion.map(\n      ({\n        type,\n        question,\n        clue,\n        possibleAnswers,\n        mediaUrl,\n        examId,\n        examinationType,\n        mediaType,\n        id,\n      }) => {\n        const questionObj = {\n          type,\n          question,\n          clue,\n          possibleAnswers,\n          mediaUrl,\n          examId: examId,\n          examinationType,\n          mediaType,\n          id,\n        };\n        return questionObj;\n      }\n    );\n    await addEssayQuestionToExam({\n      variables: {\n        questionsArray: arrayOfEssayQuestions,\n        scheduleId: examScheduleDetails.id,\n      },\n\n    });\n  };\n\n  const autoGenerateQuestionsToAdd = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const examId = examData && examData.examId;\n    const number = examScheduleDetails && examScheduleDetails.numberofQuestions;\n    if (examId && number) {\n      setAutoProcessing(!autoProcessing);\n      switch (examType) {\n        case \"short answer exam\":\n          autoGenerateFunc();\n          break;\n      }\n    }\n  };\n\n  const selectedExamTypeFunc = (examType) => {\n    //clear everything before setting\n    setExamData(null);\n    setExamScheduleDetails(null);\n    setScheduleArray([]);\n    setExamType(examType);\n  };\n\n  const selectedExamFunc = ({ examId, examName, examSchedules }) => {\n    setExamData({\n      examId,\n      examName,\n      examSchedules,\n    });\n    \n    if (examSchedules) {\n      setScheduleArray(examSchedules);\n    } else {\n      setScheduleArray([]);\n    }\n  };\n\n  const handleScheduleExamChange = (e) => {\n    const value = e.target.value;\n    if (value == \"0\") return;\n    //filter and find the selected details\n    const selectedSchedule = scheduleArray.find((e) => e.id === value);\n    if (selectedSchedule) {\n      setSelectedQuestion(selectedSchedule.questions);\n    }\n    setExamScheduleDetails(selectedSchedule);\n    //query for the details of the selected paper\n    //if we already have questions load the selected questions array here\n  };\n\n  return (\n    <AddQuestionStyles>\n      <div className=\"row justify-content-center\">\n        <div className=\"col-sm-6 col-md-4 col-lg-4\">\n          <h4 className=\"text-center\">Add Essay Question to Examination</h4>\n\n          <ExaminationTypeComponent\n            selectedExamTypeFunc={selectedExamTypeFunc}\n            selectedExamNameFunc={selectedExamFunc}\n            display={2}\n          />\n\n          <select className=\"form-control\" onChange={handleScheduleExamChange}>\n            <option value=\"0\">select examination </option>\n\n            {scheduleArray.map(({ id, examinationName }) => {\n              return (\n                <option key={id} value={id}>\n                  {examinationName}\n                </option>\n              );\n            })}\n          </select>\n\n          {examScheduleDetails && (\n            <div className=\"div-details\">\n              <div className=\"exam-details\">\n                <p className=\"lead\">\n                  <span>{examScheduleDetails.examinationName}</span>\n                </p>\n                <p className=\"lead\">\n                  Total Questions :{\" \"}\n                  <span>{examScheduleDetails.numberofQuestions}</span>\n                </p>\n\n                <p className=\"lead\">\n                  Examination Duration :{\" \"}\n                  <span>{examScheduleDetails.examinationDuration} minutes</span>\n                </p>\n\n                <p className=\"lead\">\n                  Questions Added :{\" \"}\n                  <span>{examScheduleDetails.questions.length}</span>\n                </p>\n              </div>\n\n              <div\n                className=\"button-div text-center\"\n                onClick={handleLoadQuestions}\n              >\n                <button className=\"btn btn-success\">\n                  Manually Add Questions\n                </button>\n\n                <button\n                  disabled={autoProcessing}\n                  className=\"btn btn-info m-2\"\n                  onClick={autoGenerateQuestionsToAdd}\n                >\n                  {autoProcessing\n                    ? \"auto selecting questions\"\n                    : \"Auto Add Questions\"}\n                </button>\n              </div>\n\n              {examScheduleDetails && questionLoading && (\n                <React.Fragment>\n                  <h5 className=\"text-center\">Questions</h5>\n                  <LoadEssayQuestionsComponent\n                    examId={examData && examData.examId}\n                    handleQuestionClick={handleQuestionClick}\n                    examType={examType}\n                  />\n                </React.Fragment>\n              )}\n            </div>\n          )}\n        </div>\n\n        <div className=\"col-md-4 offset-md-2\">\n          {selectedQuestion && selectedQuestion.length > 0 && (\n            <p className=\"text-center lead\">\n              Remaining questions:{\" \"}\n              {examScheduleDetails &&\n                examScheduleDetails.numberofQuestions -\n                  +selectedQuestion.length}\n            </p>\n          )}\n          {selectedQuestion.length > 0 &&\n            selectedQuestion.map(({ question, id }, index) => {\n              return (\n                <div\n                  className=\"div-question-details\"\n                  key={id}\n                  onClick={() => removeQuestionFromQuestionArray(id)}\n                >\n                  <div>{index + 1}).</div>\n                  <div\n                    className=\"question-divs\"\n                    dangerouslySetInnerHTML={setHtml(question)}\n                  />\n                </div>\n              );\n            })}\n\n          {selectedQuestion.length > 0 && (\n            <div className=\"text-center\">\n              <button\n                onClick={handleSubmitQuestion}\n                className=\"btn btn-danger btn-lg\"\n                disabled={submitted}\n              >\n                {submitted\n                  ? \"submitting please wait....\"\n                  : \"Save Question Selection\"}\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </AddQuestionStyles>\n  );\n};\n\nexport default AddEssayQuestionsToExam;\n","/app/src/common/loadableLoader.js",[],"/app/src/components/viewRunningExaminations.js",["563"],"import React, { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { GetRunningExamination } from \"../graphql/queries\";\nimport { CancelExamination } from \"../graphql/mutation\";\nimport Loading from \"../common/loading\";\nimport methods from \"../methods\";\nimport dayjs from \"dayjs\";\nvar relativeTime = require(\"dayjs/plugin/relativeTime\");\ndayjs.extend(relativeTime);\n\nconst ViewRunningExamination = () => {\n  const [examRunning, setExamRunning] = useState([]);\n  const { data, error, loading } = useQuery(GetRunningExamination);\n  const [noData, setNoData] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [submitted, setSubmitted] = useState(false);\n\n  const [cancelExamFunction, cancelExamResult] = useMutation(CancelExamination);\n\n  useEffect(() => {\n    if (cancelExamResult.data) {\n      window.alert(\"successful\");\n      setSubmitted(false);\n    }\n    if (cancelExamResult.error) {\n      setSubmitted(false);\n      setErrors(error.message);\n    }\n  }, [cancelExamResult.data, cancelExamResult.error]);\n\n  useEffect(() => {\n    if (data) {\n      const examData = data.getRunningExamination;\n      if (examData.length > 0) {\n        setExamRunning(examData);\n        setNoData(false);\n      } else {\n        setNoData(true);\n        setExamRunning([]);\n      }\n    }\n    if (error) {\n      setErrors(error.message);\n    }\n  }, [data, error]);\n\n  const handleCancelExamination = async (examId) => {\n    const confirmCancel = window.confirm(\n      \"You are about cancelling an examination? Are you sure\"\n    );\n    if (!confirmCancel) return;\n    try {\n      setSubmitted(true);\n      await cancelExamFunction({\n        variables: {\n          examId,\n        },\n        refetchQueries: [\n          {\n            query: GetRunningExamination,\n          },\n        ],\n      });\n    } catch (error) {}\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-12\">\n        <div className=\"text-center\">\n          {loading && <Loading />}\n          {errors && <p className=\"lead text-danger\">{error}</p>}\n        </div>\n\n        {!loading && noData ? (\n          <div className=\"text-center\">\n            <h3>No examination currently runing</h3>\n          </div>\n        ) : (\n          <div className=\"table-responsive\">\n            <table className=\"table\">\n              <thead className=\"thead-light\">\n                <tr>\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">Canidate details</th>\n                  <th scope=\"col\">Exam Details</th>\n                  <th scope=\"col\">Time Elapsed</th>\n                  <th scope=\"col\">Action</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {examRunning.map(\n                  (\n                    {\n                      id,\n                      timeExamStarted,\n                      canidateDetails: { username, name },\n                      examDetails: {\n                        examinationName,\n                        numberOfQuestions,\n                        duration,\n                      },\n                    },\n                    index\n                  ) => {\n                    return (\n                      <tr key={id}>\n                        <td>{index + 1}</td>\n\n                        <td>\n                          <p>\n                            username: <span>{username.toUpperCase()}</span>\n                          </p>\n                          <p>\n                            name: <span>{name.toUpperCase()}</span>\n                          </p>\n                        </td>\n\n                        <td>\n                          <p>\n                            <span>\n                              Examination name: {examinationName.toUpperCase()}\n                            </span>\n                            <br />\n                            <span>\n                              Number of questions: {numberOfQuestions}\n                            </span>\n                            <br />\n                            <span>\n                              Duration :{\" \"}\n                              {methods.Utils.ConvertMinutesToHours(duration)}\n                            </span>\n                            <br />\n                          </p>\n                        </td>\n\n                        <td>{dayjs(timeExamStarted).from(dayjs())}</td>\n\n                        <td>\n                          <button\n                            className=\"btn btn-danger btn-sm\"\n                            disabled={submitted}\n                            onClick={() => handleCancelExamination(id)}\n                          >\n                            {submitted ? \"cancelling exam....\" : \"cancel exam\"}\n                          </button>\n                        </td>\n                      </tr>\n                    );\n                  }\n                )}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ViewRunningExamination;\n","/app/src/components/essayExamSummary.js",[],"/app/src/components/startEssayExam.js",["564","565","566","567","568","569","570"],"import React, { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport CountDownTimer from \"./countDownTimer\";\nimport state from \"../applicationState\";\nimport { useRecoilValue } from \"recoil\";\nimport { useMutation } from \"@apollo/client\";\nimport { EssayExaminationEnded } from \"../graphql/mutation\";\nimport store from \"store\";\nimport methods from \"../methods\";\nimport Modal from \"react-modal\";\nimport { useRouteMatch, useHistory } from \"react-router-dom\";\nimport EssayQuestionComponent from \"../common/essayQuestionComponent\";\nimport QuestionNumberDiv from \"../common/questionNumberDiv\";\n\nModal.setAppElement(\"#root\");\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\nconst buildUpQuestions = (questionsArray = []) => {\n  let buildArray = [];\n  questionsArray.map(\n    ({ question, clue, mediaUrl, mediaType, possibleAnswers }, index) => {\n      let questionObject = {\n        number: index + 1,\n        question,\n        clue,\n        mediaUrl,\n        mediaType,\n        possibleAnswers,\n        textBox: {\n          value: \"\",\n          hasAnswered: false,\n        },\n      };\n      buildArray.push(questionObject);\n    }\n  );\n  return buildArray;\n};\n\nconst disableContext = (e) => {\n  //e.preventDefault();\n};\n\nconst disableButtons = (e) => {\n  const code = e.which || e.keyCode;\n  switch (code) {\n    case 116:\n      return e.preventDefault();\n    default:\n      return true;\n  }\n};\n\nconst EssayExamQuestionComponentStyles = styled.div`\n  .exam-span {\n    float: right;\n  }\n  .exam-label {\n    font-size: 20px;\n  }\n  .details {\n    background-color: #0b2f27;\n    color: #fff;\n    padding: 30px;\n  }\n  .text-name {\n    color: #f8f8f5 !important;\n  }\n  .spanDetails {\n    float: right;\n    font-weight: bold;\n    color: #d28431;\n  }\n`;\n\nconst EssayExamQuestionComponent = () => {\n  const match = useRouteMatch(\"/exam/short_essay/:examId\");\n  const [examinationEndedFunction, examinationEndedResult] = useMutation(\n    EssayExaminationEnded\n  );\n  const [submitting, setSubmitting] = useState(false);\n  const [errors, setErrors] = useState(null);\n  const [examIdValue, setExamIdValue] = useState(null);\n  const examStarted = useRecoilValue(state.examStartedState);\n  const questionsFromStore = store.get(\"examQuestions\");\n  const examIdinStore = store.get(\"examId\");\n  const examStartedinStore = store.get(\"examStarted\");\n  const [questions, setQuestionsData] = useState([]);\n  const [scoreDetails, setScoreDetails] = useState(null);\n  const storedData = store.get(\"questionData\");\n  const { examName, examType, examDuration } = store.get(\"examDetails\");\n  let examId = match.params.examId;\n\n  const history = useHistory();\n\n  //effect to build up the questions\n  useEffect(() => {\n    const questionData = buildUpQuestions(questionsFromStore);\n    setQuestionsData(questionData);\n    const storedData = store.get(\"questionData\");\n    if (!storedData) {\n      store.set(\"questionData\", questionData);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!examId) {\n      history.push(\"/exam_start_page\");\n    }\n    setExamIdValue(examId);\n  }, [examId]);\n\n  useEffect(() => {\n    window.addEventListener(\"contextmenu\", disableContext);\n    window.addEventListener(\"keydown\", disableButtons);\n    return () => {\n      window.removeEventListener(\"contextmenu\", disableContext);\n      window.removeEventListener(\"keydown\", disableButtons);\n    };\n  });\n\n  useEffect(() => {\n    const { loading, data, error } = examinationEndedResult;\n    if (loading) {\n      //show a modal asking them to wait that submission is on going.\n    }\n    if (data) {\n      //redirect here to the summary page\n      setSubmitting(!submitting);\n      methods.Utils.ClearStoreValue();\n      history.replace(`/exam_summary/essay/${examIdValue}`, {\n        scoreDetails: scoreDetails,\n      });\n    }\n\n    if (error) {\n      setErrors(error.message);\n      setSubmitting(!submitting);\n    }\n  }, [\n    examinationEndedResult.loading,\n    examinationEndedResult.data,\n    examinationEndedResult.error,\n  ]);\n\n  const onChangeText = ({ value, index }) => {\n    //update the storedData here and also the hasAnswered variable here\n    const storedData = store.get(\"questionData\");\n    const dataFromStore = [...storedData];\n    const currentItem = dataFromStore[index];\n    //fix the stuff here please\n    currentItem.textBox = {\n      value,\n      hasAnswered: value.length > 0 ? true : false,\n    };\n    dataFromStore[index] = currentItem;\n    store.set(\"questionData\", dataFromStore);\n    setQuestionsData(dataFromStore);\n  };\n\n  const submitQuizHandler = async () => {\n    //get the quiz answers and the other variables in the system\n    let examStartedVariable, examIdVariable;\n    examStartedVariable = examStarted ? examStarted : examStartedinStore;\n    examIdVariable = examId ? examId : examIdinStore;\n    if (examStartedVariable && examIdVariable) {\n      //we are good we can gather things here\n      const { total, scripts } = methods.MarkEssayExam(storedData);\n      setScoreDetails({\n        score: total,\n        totalQuestions: scripts.length,\n        examId: examIdVariable,\n      });\n      const submissionObject = {\n        examTakenId: examIdVariable,\n        examFinished: true,\n        timeExamEnded: new Date(),\n        score: total,\n        scripts,\n      };\n      try {\n        setSubmitting(!submitting);\n        await examinationEndedFunction({\n          variables: {\n            submissionDetails: submissionObject,\n          },\n        });\n      } catch (error) {}\n    }\n  };\n\n  const handleQuizSubmit = () => {\n    const confirmMe = window.confirm(\"Are you sure, you want to submit\");\n    if (!confirmMe) return;\n    submitQuizHandler();\n  };\n\n  return (\n    <EssayExamQuestionComponentStyles>\n      <div className=\"row\">\n        <div className=\"col-md-10 offset-md-1\">\n          <div className=\"details card-title\">\n            <h2 className=\"text-center text-name\">\n              {examName && examName.toUpperCase()}\n            </h2>\n\n            <p>\n              Examination Type:\n              <span className=\"spanDetails\">\n                <b>{examType && examType.toUpperCase()}</b>\n              </span>\n            </p>\n\n            <p>\n              Exam Duration:\n              <span className=\"spanDetails\">\n                <b>{methods.Utils.ConvertMinutesToHours(examDuration)}</b>\n              </span>\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-md-10 offset-md-1\">\n          <div className=\"text-center\">\n            <CountDownTimer submitQuiz={submitQuizHandler} />\n          </div>\n\n          <QuestionNumberDiv questionsArray={storedData} />\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-md-10 offset-md-1\">\n          {storedData &&\n            storedData.map(\n              (\n                {\n                  number,\n                  question,\n                  clue,\n                  mediaUrl,\n                  mediaType,\n                  textBox: { value, hasAnswered },\n                },\n                index\n              ) => {\n                const data = {\n                  number,\n                  question,\n                  clue,\n                  mediaUrl,\n                  mediaType,\n                  textBox: { value, hasAnswered },\n                  onChangeText,\n                  index,\n                };\n                return (\n                  <EssayQuestionComponent\n                    key={index + number * index + 1}\n                    data={data}\n                  />\n                );\n              }\n            )}\n\n          <div className=\"text-center mb-3\">\n            <button\n              className=\"btn btn-success\"\n              disabled={submitting}\n              onClick={handleQuizSubmit}\n            >\n              {submitting ? \"submitting please wait\" : \"Submit Examination\"}\n            </button>\n          </div>\n        </div>\n      </div>\n    </EssayExamQuestionComponentStyles>\n  );\n};\n\nexport default EssayExamQuestionComponent;\n","/app/src/components/editEssayQuestions.js",["571","572","573","574","575","576","577","578","579"],"import React, { useEffect, useState, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport DraftJsToolBar from \"../common/draftJSToolBar\";\nimport draftToHtml from \"draftjs-to-html\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport { EditEssayQuestion, DeleteMedia } from \"../graphql/mutation\";\nimport { GetAllEssayQuestions } from \"../graphql/queries\";\nimport {\n  EditorState,\n  convertToRaw,\n  ContentState,\n  convertFromHTML,\n} from \"draft-js\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport AudioComponent from \"../common/audioComponent\";\nimport VideoComponent from \"../common/videoComponent\";\nimport ImageComponent from \"../common/imageComponent\";\nimport settings from \"../config\";\n\nconst baseUrl = settings.API_URL;\n\nconst SaveEssayQuestionStyles = styled.div`\n  .write-question {\n    background-color: #c0c0c0;\n    margin-bottom: 20px;\n    padding: 10px;\n  }\n  .possible-span {\n    padding: 5px;\n    display: inline-block;\n    background-color: #063c16;\n    margin-top: 10px;\n    margin-right: 10px;\n    cursor: pointer;\n    color: #fff;\n    border-radius: 0px 10px;\n  }\n  .file-details {\n    padding: 20px;\n    width: 30%;\n  }\n  .custom-width {\n    width: 50%;\n  }\n  .media-div {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-wrap: wrap;\n  }\n`;\n\nconst SaveEssayQuestionComponent = () => {\n  const navigate = useNavigate()\n  const [essayQuestion, setQuestion] = useState(null);\n  const [preview, setPreview] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [clue, setClue] = useState(\"\");\n  const [possibleAnswers, setPossibleAnswers] = useState([]);\n  const [mediaType, setMediaType] = useState(\"\");\n  const [oldmediaType, setOldMediaType] = useState(\"\");\n  const [oldmediaUrl, setOldMediaUrl] = useState(\"\");\n  const [fileDetails, setFileDetails] = useState(null);\n  const [file, setFile] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [submitted, setSubmitted] = useState(false);\n  const [questionId, setQuestionId] = useState(null);\n  const [examId, setExamId] = useState(null);\n\n  const textAnswer = useRef();\n  const fileRef = useRef();\n\n  const [editQuestionFunc, editQuestionResult] = useMutation(EditEssayQuestion);\n  const [deleteMediaQuestionFunc, deleteMediaResult] = useMutation(DeleteMedia);\n\n  const [questionsQuery, questionsQueryResult] = useLazyQuery(\n    GetAllEssayQuestions\n  );\n\n  const location = useLocation();\n  const questionData = location.state && location.state.questionData;\n\n  useEffect(() => {\n    if (questionData) {\n      const {\n        mediaType,\n        mediaUrl,\n        possibleAnswers,\n        clue,\n        question,\n        id,\n        examId,\n      } = questionData;\n      const blocksFromHTML = convertFromHTML(question);\n      const content = ContentState.createFromBlockArray(\n        blocksFromHTML.contentBlocks,\n        blocksFromHTML.entityMap\n      );\n      setQuestion(EditorState.createWithContent(content));\n      setPreview(question);\n      setPossibleAnswers(possibleAnswers);\n      setClue(clue);\n      setOldMediaType(mediaType);\n      setOldMediaUrl(mediaUrl);\n      setQuestionId(id);\n      setExamId(examId);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (deleteMediaResult.error) {\n      setErrors(deleteMediaResult.error.message);\n    }\n    if (deleteMediaResult.data) {\n      //we have a successful delete\n      //load the mediatype here\n      window.alert(\"media file removed successfully\");\n      setOldMediaType(null);\n      setOldMediaUrl(null);\n    }\n  }, [deleteMediaResult.error, deleteMediaResult.data]);\n\n  useEffect(() => {\n    if (editQuestionResult.error) {\n      setSubmitted(false);\n      setErrors(editQuestionResult.error.message);\n    }\n    if (editQuestionResult.data) {\n      window.alert(\"question edited successfully.\");\n      //make a redirect here\n      navigate(\"/load_essay_question\");\n    }\n  }, [editQuestionResult.data, editQuestionResult.error]);\n\n  const handleChange = (editorState) => {\n    let html = draftToHtml(convertToRaw(editorState.getCurrentContent()));\n    setQuestion(editorState);\n    setPreview(html);\n  };\n\n  const setHtml = (html) => {\n    return { __html: html };\n  };\n\n  const handleTextChange = (e) => {\n    const value = e.target.value;\n    if (value.lastIndexOf(\",\") != -1) {\n      const oldValues = [...possibleAnswers];\n      const valueWithoutComma = value.substr(0, value.length - 1);\n      const old = oldValues.filter((e) => e != valueWithoutComma);\n      setPossibleAnswers([...old, valueWithoutComma]);\n      setText(\"\");\n    } else {\n      setText(value);\n    }\n  };\n\n  const handleTextClueChange = (e) => {\n    const value = e.target.value;\n    setClue(value);\n  };\n\n  const removePossibleAnswer = (answer) => {\n    const oldValues = [...possibleAnswers];\n    const newValues = oldValues.filter((e) => e != answer);\n    setPossibleAnswers(newValues);\n  };\n\n  const handleMediaChange = (e) => {\n    const value = e.target.value;\n    if (value !== \"0\") {\n      setMediaType(value);\n    }\n  };\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    const { name, size, type } = file;\n    const fileType = type.split(\"/\")[0];\n    if (mediaType != fileType) {\n      window.alert(\n        `please select the correct media type: Select a ${mediaType}`\n      );\n      fileRef.current.value = \"\";\n      return;\n      //remove the reference\n    }\n    setFile(file);\n    setFileDetails({\n      name,\n      size,\n      type,\n    });\n  };\n\n  const submitQuestionToDB = async () => {\n    if (!preview) {\n      return window.alert(\n        \"we can not save a question without the actual question. can we ?\"\n      );\n    }\n    if (possibleAnswers.length == 0) {\n      return window.alert(\"please enter possible answers for the question\");\n    }\n\n    try {\n      let inputQuestion = {\n        question: preview,\n        clue: clue,\n        possibleAnswers: possibleAnswers,\n        id: questionId,\n      };\n      if (mediaType) {\n        inputQuestion.mediaType = mediaType;\n        inputQuestion.mediaFile = file;\n      }\n      const examinationId = examId;\n      setSubmitted(true);\n      await editQuestionFunc({\n        variables: {\n          input: inputQuestion,\n        },\n        context: { hasUpload: true  },\n        refetchQueries: [\n          {\n            query: GetAllEssayQuestions,\n            variables: {\n              examId: examinationId,\n              offset: 0,\n            },\n          },\n        ],\n      });\n    } catch (error) {}\n  };\n\n  const deleteMediaFromFile = async () => {\n    const confirmDelete = window.confirm(\"Are you sure?\");\n    if (!confirmDelete) return;\n    try {\n      await deleteMediaQuestionFunc({\n        variables: {\n          questionId: questionId,\n          mediaUrl: oldmediaUrl,\n        },\n      });\n    } catch (error) {}\n  };\n\n  return (\n    <SaveEssayQuestionStyles>\n      <div className=\"row\">\n        <div className=\"col-md-8 offset-md-2\">\n          <h3 className=\"text-center\">Editing Questions</h3>\n          {errors && <p className=\"text-danger lead\">{errors}</p>}\n\n          <div>\n            <p>\n              <b> Preview of the question</b>\n            </p>\n          </div>\n          <div className=\"\" dangerouslySetInnerHTML={setHtml(preview)} />\n\n          <h4> Type Question</h4>\n\n          <Editor\n            editorState={essayQuestion}\n            onEditorStateChange={handleChange}\n            editorClassName=\"write-question\"\n            placeholder=\"Type your question here.....\"\n            toolbar={DraftJsToolBar}\n          />\n\n          <div className=\"form-group\">\n            <label className=\"form-label\">Possible answers</label>\n\n            <input\n              type=\"text\"\n              className=\"form-control custom-width\"\n              aria-label=\"With textarea\"\n              value={text}\n              onChange={handleTextChange}\n              ref={textAnswer}\n            />\n            <small className=\"form-text text-muted\">\n              Type each possible answer seperated by a comma (,)\n            </small>\n          </div>\n\n          {possibleAnswers.map((answer, index) => {\n            return (\n              <span\n                key={index}\n                className=\"possible-span\"\n                onClick={() => removePossibleAnswer(answer)}\n              >\n                {answer}\n              </span>\n            );\n          })}\n\n          <div className=\"form-group\">\n            <label className=\"form-label\">Answer clues </label>\n\n            <textarea\n              className=\"form-control custom-width\"\n              aria-label=\"With textarea\"\n              value={clue}\n              onChange={handleTextClueChange}\n            ></textarea>\n          </div>\n\n          {!oldmediaType && (\n            <React.Fragment>\n              <div className=\"form-group\">\n                <label className=\"form-label\">Media Type</label>\n                <select\n                  className=\"custom-width form-control\"\n                  onChange={handleMediaChange}\n                  value={mediaType}\n                >\n                  <option value=\"0\">select media type</option>\n                  <option value=\"video\">video</option>\n                  <option value=\"audio\">audio</option>\n                  <option value=\"image\">image</option>\n                </select>\n              </div>\n\n              <div className=\"form-group\">\n                <input\n                  type=\"file\"\n                  ref={fileRef}\n                  className=\"file-input\"\n                  onChange={handleFileChange}\n                />\n              </div>\n\n              {fileDetails && (\n                <div className=\"file-details\">\n                  <p>file name: {fileDetails.name}</p>\n\n                  <p>file type: {fileDetails.type}</p>\n\n                  <p>file size: {+fileDetails.size / 1000} KB</p>\n                </div>\n              )}\n            </React.Fragment>\n          )}\n\n          <div className=\"media-div\">\n            {oldmediaType === \"audio\" && (\n              <React.Fragment>\n                <AudioComponent src={`${baseUrl}/${oldmediaUrl}`} />\n                <button\n                  className=\"btn btn-danger\"\n                  onClick={deleteMediaFromFile}\n                >\n                  delete media\n                </button>\n              </React.Fragment>\n            )}\n\n            {oldmediaType === \"video\" && (\n              <React.Fragment>\n                <VideoComponent src={`${baseUrl}/${oldmediaUrl}`} />\n\n                <button\n                  className=\"btn btn-danger\"\n                  onClick={deleteMediaFromFile}\n                >\n                  delete media\n                </button>\n              </React.Fragment>\n            )}\n\n            {oldmediaType === \"image\" && (\n              <React.Fragment>\n                <ImageComponent src={`${baseUrl}/${oldmediaUrl}`} />\n                <button\n                  className=\"btn btn-danger\"\n                  onClick={deleteMediaFromFile}\n                >\n                  delete media\n                </button>\n              </React.Fragment>\n            )}\n          </div>\n\n          <div className=\"text-center mb-3\">\n            <button\n              className=\"btn btn-success\"\n              disabled={submitted}\n              onClick={submitQuestionToDB}\n            >\n              {submitted ? \"submitting please wait....\" : \"Edit Questions \"}\n            </button>\n          </div>\n        </div>\n      </div>\n    </SaveEssayQuestionStyles>\n  );\n};\n\nexport default SaveEssayQuestionComponent;\n","/app/src/components/notAuthorizedComponent.js",[],"/app/src/components/questionComponent.js",["580"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport { useExamDetails } from \"../context\";\n\nimport store from \"store\";\n\nconst QuestionComponentStyles = styled.div`\n  .question {\n    font-size: 20px;\n  }\n\n  .question span {\n    margin-right: 15px;\n  }\n\n  .questionDiv {\n    padding: 20px;\n    margin-top: 100px;\n  }\n  .radioDiv {\n    padding: 20px;\n  }\n  .radioLabel {\n    padding: 10px;\n    cursor: pointer;\n  }\n  radio {\n    cursor: pointer;\n  }\n\n  .question-divs {\n    padding-left: 10px;\n    cursor: pointer;\n    font-size: 20px;\n  }\n\n  .question-panel {\n    display: flex;\n    padding: 10px;\n    font-size: 16px;\n  }\n  hr {\n    border-width: 5px;\n  }\n`;\n\n\n\nconst QuestionComponent = () => {\n  const { examQuestions, setExamQuestions, currentIndex } = useExamDetails();\n  let questionsFromStore = store.get(\"examQuestions\");\n  let indexFromStore = store.get(\"currentIndex\");\n  let questionNumber = currentIndex ? currentIndex  : indexFromStore;\n  let currentQuestion = examQuestions[currentIndex]\n    ? examQuestions[currentIndex]\n    : questionsFromStore[questionNumber];\n\n  let question = currentQuestion;\n\n  const handleAnswerSelected = (selectedIndex) => {\n    debugger\n    //loop through questions and replace the\n    //replace the one that there is an answer\n    let questionFromStoreOrState =\n      examQuestions.length > 0 ? examQuestions : questionsFromStore;\n\n    let presentQuestion = questionFromStoreOrState[questionNumber];\n    let answersArray = [];\n    for (let i = 0; i < presentQuestion.answers.length; i++) {\n      let answerObj = presentQuestion.answers[i];\n      //clear previously selected answers;\n      let selectedAnswerObject = {};\n      if (i == selectedIndex) {\n        selectedAnswerObject.selected = true;\n      } else {\n        selectedAnswerObject.selected = false;\n      }\n      selectedAnswerObject.isCorrect = answerObj.isCorrect;\n      selectedAnswerObject.option = answerObj.option;\n      answersArray.push(selectedAnswerObject);\n    }\n    let copyOfCurrentQuestion = { ...presentQuestion };\n    let copyOfQuizQuestions = [...questionFromStoreOrState];\n    copyOfCurrentQuestion.answers = answersArray;\n    copyOfQuizQuestions[questionNumber] = copyOfCurrentQuestion;\n    setExamQuestions(copyOfQuizQuestions);\n    store.set(\"examQuestions\", copyOfQuizQuestions);\n  };\n\n  //useBeforeunload(() => \"You'll lose your data!\");\n  const setHtml = (html) => {\n    return { __html: html };\n  };\n\n  return (\n    <QuestionComponentStyles>\n      <div className=\"questionDiv\">\n        <div className=\"question-panel\">\n          <div>{1 + +questionNumber}).</div>\n          <div\n            className=\"question-divs\"\n            dangerouslySetInnerHTML={setHtml(question && question.question)}\n          />\n        </div>\n        <hr />\n        <div className=\"radioDiv\">\n          {question &&\n            question.answers &&\n            question.answers.length > 0 &&\n            question.answers.map(({ option, selected }, index) => {\n              return (\n                <React.Fragment key={index}>\n                  <input\n                    type=\"radio\"\n                    id={option}\n                    name=\"answers\"\n                    value={option}\n                    checked={selected ? true : false}\n                    onChange={() => handleAnswerSelected(index)}\n                  />\n                  <label\n                    className=\"radioLabel\"\n                    htmlFor={option}\n                    onChange={() => handleAnswerSelected(index)}\n                  >\n                    {option}\n                  </label>\n                  <br></br>\n                </React.Fragment>\n              );\n            })}\n        </div>\n      </div>\n    </QuestionComponentStyles>\n  );\n};\n\nexport default QuestionComponent;\n","/app/src/components/questionButtonsComponent.js",["581","582","583","584"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport store from \"store\";\nimport { useExamDetails } from \"../context\";\n\nconst QuestionButtonComponentStyles = styled.div`\n  button {\n    margin: 10px;\n  }\n`;\n\nconst QuestionButtonComponent = ({ submitQuiz }) => {\n  const {\n    examQuestions,\n    currentIndex,\n    setCurrentIndex,\n    setSkippedQuestion,\n  } = useExamDetails();\n  //get total questions from the stored questions\n  const questionsTotalFromStore = store.get(\"totalQuestions\");\n  let totalQuestion = examQuestions.length ? examQuestions.length : questionsTotalFromStore;\n\n  const handleSkippedQuestion = () => {\n    setSkippedQuestion((skippedArray) => {\n      const findSkipped = skippedArray.some((val) => +val == currentIndex);\n      return findSkipped ? skippedArray : [...skippedArray, currentIndex];\n    });\n    if (currentIndex < totalQuestion) {\n      //skipped forward\n      store.set(\"currentIndex\", +currentIndex + 1);\n      setCurrentIndex(+currentIndex + 1);\n    } else {\n      //start at the beginning\n      store.set(\"currentIndex\", 0);\n      setCurrentIndex(0);\n    }\n  };\n\n  const handleCurrentIndexChange = (value) => {\n    if (value === \"increment\") {\n      store.set(\"currentIndex\", +currentIndex + 1);\n      setCurrentIndex(+currentIndex + 1);\n    } else if (value === \"decrement\") {\n      store.set(\"currentIndex\", +currentIndex - 1);\n      setCurrentIndex(+currentIndex - 1);\n    }\n  };\n  const handleExaminationSubmission = (e) => {\n    e.preventDefault();\n    const confirmSubmission = window.confirm(\n      \"Are you sure you want to submit. Please review your work. If you are sure click yes\"\n    );\n    if (!confirmSubmission) return;\n    submitQuiz();\n  };\n  return (\n    <QuestionButtonComponentStyles>\n      <button\n        type=\"button\"\n        className=\"btn btn-primary\"\n        disabled={currentIndex == 0}\n        onClick={() => handleCurrentIndexChange(\"decrement\")}\n      >\n        Previous Question\n      </button>\n      <button\n        type=\"button\"\n        className=\"btn btn-warning\"\n        disabled={currentIndex == totalQuestion - 1}\n        onClick={() => handleCurrentIndexChange(\"increment\")}\n      >\n        Next Question\n      </button>\n      <button\n        type=\"button\"\n        className=\"btn btn-danger\"\n        disabled={currentIndex == totalQuestion - 1}\n        onClick={handleSkippedQuestion}\n      >\n        Skip Question\n      </button>\n      <button\n        type=\"button\"\n        className=\"btn btn-success\"\n        onClick={handleExaminationSubmission}\n      >\n        Submit\n      </button>\n    </QuestionButtonComponentStyles>\n  );\n};\n\nexport default QuestionButtonComponent;\n","/app/src/components/questionsNumberDiv.js",["585","586"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport { useExamDetails } from \"../context\"\nimport store from \"store\";\n\nconst QuestionNumberDivStyles = styled.div`\n  margin-top: 40px;\n  .container-num{\n    display: flex;\n    flex-direction: column;\n    justify-contents: center;\n  }\n  .div-number {\n    width: 60px;\n    height: 60px;\n    cursor: pointer;\n    display: flex;\n    font-size: 20px;\n    justify-content: center;\n    align-items: center;\n    color: #fff;\n  }\n\n  .numberDiv {\n    display: flex;\n    flex-wrap: wrap;\n  }\n\n  .answered {\n    background-color: green;\n    margin: 2px;\n  }\n  .notAnswered {\n    background-color: black;\n    margin: 2px;\n  }\n\n  .skipped {\n    background-color: red;\n    margin: 2px;\n  }\n\n  .code {\n    height: 100px;\n    width: 100px;\n    margin: 5px;\n    color: white;\n  }\n\n  .numberCode {\n    border: 2px solid #c0c0c0;\n    width: 50%;\n    padding: 5px;\n    float: right;\n    background-color: #0a1b1b;\n  }\n  .numberCode p {\n    align-self: center;\n    font-size: 16px;\n    color: #fff;\n    padding-left: 30px;\n  }\n\n  .colorAnswered {\n    background-color: green;\n  }\n\n  .colorNotAnswered {\n    background-color: black;\n  }\n  .colorVisited {\n    background-color: red;\n  }\n  .colorDiv {\n    display: flex;\n  }\n`;\n\nconst QuestionsNumberDiv = () => {\n  //GET THE TOTAL QUESTIONS HERE\n  const { skippedQuestion: skipped, setCurrentIndex, examQuestions } = useExamDetails()\n  const questionsFromStore = store.get(\"examQuestions\");\n  let questions = examQuestions?.length > 0 ? examQuestions : questionsFromStore;\n  \n\n  //get the others from store\n\n\n  const handleOnClick = (index) => {\n    store.set(\"currentIndex\", index);\n    setCurrentIndex(index);\n  };\n  return (\n    <QuestionNumberDivStyles>\n      <div className=\"container-num\">\n      <div className=\"numberDiv\">\n        {questions &&\n          questions.map(({ answers }, index) => {\n            let hasAnswered = false;\n            answers.map(({ selected }) => {\n              if (selected === true) {\n                hasAnswered = true;\n              }\n            });\n            if (hasAnswered) {\n              return (\n                <div\n                  className=\"div-number answered\"\n                  key={index}\n                  onClick={() => handleOnClick(index)}\n                >\n                  {1 + index}\n                </div>\n              );\n            } else {\n              //skipped array\n\n              const skipNumber = skipped.some((value) => {\n                return +value == +index;\n              });\n              if (skipNumber) {\n                //the question was skipped\n                return (\n                  <div\n                    className=\"div-number skipped\"\n                    key={index}\n                    onClick={() => handleOnClick(index)}\n                  >\n                    {1 + index}\n                  </div>\n                );\n              }\n              return (\n                <div\n                  className=\"div-number notAnswered\"\n                  key={index}\n                  onClick={() => handleOnClick(index)}\n                >\n                  {1 + index}\n                </div>\n              );\n            }\n          })}\n      </div>\n      <div className=\"numberCode\">\n        <div className=\"colorDiv\">\n          <div className=\"code colorAnswered\"></div>\n\n          <p>Answered</p>\n        </div>\n\n        <div className=\"colorDiv\">\n          <div className=\"code colorNotAnswered\"></div>\n          <p>Not answered</p>\n        </div>\n        <div className=\"colorDiv\">\n          <div className=\"code colorVisited\"></div>\n          <p>Visited</p>\n        </div>\n      </div>\n      </div>\n    </QuestionNumberDivStyles>\n  );\n};\n\nexport default QuestionsNumberDiv;\n","/app/src/components/countDownTimer.js",["587","588","589","590","591","592","593"],"import React, { useEffect, useState } from \"react\";\nimport useCountDown from \"react-countdown-hook\";\nimport styled from \"styled-components\";\nimport { useExamDetails } from \"../context\";\nimport store from \"store\";\n\nconst CountDownTimerStyles = styled.div`\n  span {\n    font-size: 30px;\n  }\n  .timer {\n    font-size: 40px;\n    color: blue;\n    background-color: white;\n  }\n`;\n\nconst CountDownTimer = ({ submitQuiz }) => {\n  const { duration, setDuration } = useExamDetails();\n  const [timeRemaining, setTimeRemaining] = useState(null);\n  const [timerStarted, setTimerStarted] = useState(false);\n  const timerFromStore = store.get(\"timer\");\n  const time = 1000 * 60 * duration;\n  const timerToUsed = time ? time : timerFromStore;\n\n  const [timeLeft, { start }] = useCountDown(timerToUsed, 100);\n\n  useEffect(() => {\n    store.set(\"timer\", timeLeft);\n    //setDuration(timeLeft)\n    if (timerStarted && timeLeft == 0) {\n      submitQuiz();\n    }\n  }, [timeLeft]);\n\n  useEffect(() => {\n    start();\n    setTimerStarted(true);\n  }, []);\n\n  useEffect(() => {\n    secondsToTime(timeLeft);\n  }, [timeRemaining, timeLeft]);\n\n  const secondsToTime = (time) => {\n    let secs = time / 1000;\n    let hours = Math.floor(secs / (60 * 60));\n    let divisor_for_minutes = secs % (60 * 60);\n    let minutes = Math.floor(divisor_for_minutes / 60);\n    let divisor_for_seconds = divisor_for_minutes % 60;\n    let seconds = Math.ceil(divisor_for_seconds);\n\n    let padHours = hours.toString().length == 1 ? `0${hours}` : hours;\n    let padMins = minutes.toString().length == 1 ? `0${minutes}` : minutes;\n    let padSecs = seconds.toString().length == 1 ? `0${seconds}` : seconds;\n\n    setTimeRemaining(`${padHours}: ${padMins} : ${padSecs}`);\n  };\n\n  return (\n    <CountDownTimerStyles>\n      <p className=\"timer\">{timeRemaining}</p>\n    </CountDownTimerStyles>\n  );\n};\n\nexport default CountDownTimer;\n","/app/src/common/examinationTypeComponent.js",["594","595","596","597","598","599"],"import React, { useEffect, useState } from \"react\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { GetDifferentExamination } from \"../graphql/queries\";\n\nconst ExaminationTypeComponent = ({\n  selectedExamTypeFunc,\n  selectedExamNameFunc,\n  display,\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState(null);\n  const [examTypeData, setExamDataType] = useState([]);\n  const [selectedExamName, setSelectedExamName] = useState(null);\n  const [examTypeQuery, examTypeResult] = useLazyQuery(GetDifferentExamination);\n\n  useEffect(() => {\n    if (examTypeResult.loading) {\n      setLoading(true);\n    }\n    if (examTypeResult.data) {\n      const data = examTypeResult.data.getExamByType;\n      setExamDataType(data);\n      setLoading(false);\n    }\n    if (examTypeResult.error) {\n      setLoading(false);\n      setErrors(examTypeResult.error);\n    }\n  }, [examTypeResult.data, examTypeResult.error, examTypeResult.loading]);\n\n  const handleExamChange = (e) => {\n    const value = e.target.value;\n    if (value == \"0\") return;\n    const splitValue = value.split(\"/\");\n    //extract selected schedules here\n    const selValue = examTypeData.find((e) => e.id == splitValue[0]);\n    const examSchedules = selValue && selValue.examSchedules;\n    setSelectedExamName(splitValue[1]);\n    selectedExamNameFunc({\n      examId: splitValue[0],\n      examName: splitValue[1],\n      examSchedules: examSchedules,\n    });\n  };\n\n  const handleExamTypeChange = (e) => {\n    const value = e.target.value;\n    if (value !== \"0\") {\n      selectedExamTypeFunc(value);\n      setSelectedExamName(null);\n      examTypeQuery({\n        variables: {\n          examType: value,\n        },\n      });\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {errors && <p className=\"lead text-danger\">Error: {errors}</p>}\n      <div className=\"form-group\">\n        <label className=\"form-label\">Select examination type</label>\n        <select className=\"custom-select\" onChange={handleExamTypeChange}>\n          <option value=\"0\">select examination type</option>\n          {display == \"all\" && (\n         <React.Fragment>\n              <option value=\"multiple choice questions\">\n                Multiple choice questions\n              </option>\n              <option value=\"spelling examination\">\n                Spelling examination{\" \"}\n              </option>\n\n              <option value=\"short answer exam\">Short answer type</option>\n              <option value=\"essay exam\">Essay examination</option>\n\n              <option value=\"quantitative exam\">\n                Quantitative examination\n              </option>\n            </React.Fragment>\n          )}\n\n          {display == 1 && (\n            <React.Fragment>\n              <option value=\"multiple choice questions\">\n                Multiple choice questions\n              </option>\n              <option value=\"spelling examination\">\n                Spelling examination{\" \"}\n              </option>\n            </React.Fragment>\n          )}\n\n          {display == 2 && (\n            <React.Fragment>\n              <option value=\"short answer exam\">Short answer type</option>\n              {/* <option value=\"essay exam\">Essay examination</option> */}\n            </React.Fragment>\n          )}\n\n          {display == 3 && (\n            {/* <React.Fragment>\n              <option value=\"quantitative exam\">\n                Quantitative examination\n              </option>\n            </React.Fragment> */}\n          )}\n        </select>\n      </div>\n      <div className=\"form-group\">\n        <label className=\"form-label\">Select examination name</label>\n        <select className=\"custom-select\" onChange={handleExamChange}>\n          <option value=\"0\">select subject </option>\n          {loading && <option>loading data.......</option>}\n          {examTypeData.map(({ id, examName }) => {\n            return (\n              <option value={`${id}/${examName}`} key={id}>\n                {examName}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n\n      <div className=\"form-group\">\n        {selectedExamName && (\n          <p className=\"lead\">\n            Selected Examination name : <span>{selectedExamName}</span>\n          </p>\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default ExaminationTypeComponent;\n","/app/src/common/draftJSToolBar.js",[],"/app/src/common/loading.js",[],"/app/src/common/displayEssayScript.js",[],"/app/src/common/loadEssayQuestionComponent.js",["600","601","602","603"],"import React, { useEffect, useState } from \"react\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { GetAllEssayQuestions } from \"../graphql/queries\";\nimport ShowQuestionComponent from \"./showQuestionsComponent\";\nimport Loading from \"../common/loading\";\nimport styled from \"styled-components\";\n\nconst LoadQuestionsStyle = styled.div``;\n\nconst buttonsToDisplay = (total, numberPerPage) => {\n  const buttonNumber = +total / +numberPerPage;\n  let array = [];\n  array.length = Math.ceil(buttonNumber);\n  return array.fill(1);\n};\n\nconst LoadEssayQuestionComponent = ({\n  examId,\n  handleQuestionClick,\n  examType,\n}) => {\n  const [loadingData, setLoading] = useState(false);\n  const [errors, setErrors] = useState(null);\n  const [questions, setQuestions] = useState({});\n  const [totalQuestion, setTotalQuestion] = useState(0);\n  const [queryRan, setQueryRan] = useState(false);\n\n  const [essayQuestionsQuery, essayQuestionsQueryResult] = useLazyQuery(\n    GetAllEssayQuestions,\n    {\n      variables: {\n        examId: examId,\n      },\n    }\n  );\n\n  useEffect(() => {\n    switch (examType) {\n      case \"short answer exam\":\n        essayQuestionsQuery();\n        break;\n      case \"essay exam\":\n        break;\n    }\n  }, [examId]);\n\n  //effect for spelling questions loading\n  useEffect(() => {\n    if (essayQuestionsQueryResult.error) {\n      setErrors(essayQuestionsQueryResult.error.message);\n      setLoading(true);\n      setQueryRan(!queryRan);\n    }\n\n    if (essayQuestionsQueryResult.data) {\n      setQuestions(\n        essayQuestionsQueryResult.data.getAllEssayQuestions.questions\n      );\n      setTotalQuestion(\n        essayQuestionsQueryResult.data.getAllEssayQuestions.totalQuestion\n      );\n\n      setLoading(false);\n    }\n  }, [essayQuestionsQueryResult.error, essayQuestionsQueryResult.data]);\n\n  //get more questions for multiple choice questions\n  const getMoreQuestions = (e, index) => {\n    try {\n      e.stopPropagation();\n      e.preventDefault();\n      setLoading(true);\n      setQueryRan(!queryRan);\n      essayQuestionsQueryResult.fetchMore({\n        variables: {\n          examId: examId,\n          offset: questions.length * (index - 1),\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult) return prev;\n          return Object.assign({}, prev, {\n            getAllEssayQuestions: {\n              totalQuestion: fetchMoreResult.getAllEssayQuestions.totalQuestion,\n              __typename: \"QuestionsTotal\",\n              questions: [\n                //...prev.getAllQuestions.questions,\n                ...fetchMoreResult.getAllEssayQuestions.questions,\n              ],\n            },\n          });\n        },\n      });\n    } catch (error) {}\n  };\n\n  return (\n    <LoadQuestionsStyle>\n      {errors && <p className=\"lead text-danger\">Error: {errors}</p>}\n\n      {examType === \"short answer exam\" &&\n      questions &&\n      questions.length > 0 ? (\n        questions.map((question, index) => {\n          return (\n            <div key={index} onClick={() => handleQuestionClick(question)}>\n              <ShowQuestionComponent question={question} />\n            </div>\n          );\n        })\n      ) : (\n        <div>{queryRan && <p>No questions saved yet.</p>}</div>\n      )}\n\n      {loadingData && <Loading />}\n\n      <nav aria-label=\"Page navigation example\">\n        <ul className=\"pagination\">\n          {examType === \"short answer exam\" &&\n            totalQuestion > 0 &&\n            buttonsToDisplay(totalQuestion, 20).map((_, index) => {\n              return (\n                <li\n                  className=\"page-item\"\n                  key={index}\n                  onClick={(e) => getMoreQuestions(e, index + 1)}\n                >\n                  <a className=\"page-link\" href=\"\">\n                    {index + 1}\n                  </a>\n                </li>\n              );\n            })}\n        </ul>\n      </nav>\n    </LoadQuestionsStyle>\n  );\n};\n\nexport default LoadEssayQuestionComponent;\n","/app/src/common/displaySpellingScriptComponent.js",[],"/app/src/common/questionNumberDiv.js",["604"],"import React, { useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { HashLink } from \"react-router-hash-link\";\nconst NumberStyles = styled.div`\n  .number-panel {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .num-div {\n    width: 50px;\n    height: 50px;\n    padding: 20px;\n    color: #fff;\n    background-color: black;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 5px;\n  }\n  .has-answered {\n    background-color: green;\n  }\n\n  .sticky {\n    position: fixed;\n    top: 0;\n    z-index: 1000;\n  }\n`;\n\nconst QuestionNumberDiv = ({ questionsArray = [] }) => {\n  const divRef = useRef();\n\n  const sticky = divRef && divRef.current && divRef.current.offsetTop;\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", scrollFunction);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollFunction);\n    };\n  });\n\n  const scrollFunction = () => {\n    if (window.pageYOffset > sticky) {\n      divRef && divRef.current && divRef.current.classList.add(\"sticky\");\n    } else {\n      divRef && divRef.current && divRef.current.classList.remove(\"sticky\");\n    }\n  };\n\n  return (\n    <NumberStyles>\n      <div className=\"number-panel\" ref={divRef}>\n        {questionsArray.map(({ number, textBox: { hasAnswered } }) => {\n          return (\n            <React.Fragment key={number}>\n              {hasAnswered == false ? (\n                <HashLink to={`#${number}`} className=\"num-div\">\n                  {number}\n                </HashLink>\n              ) : (\n                <HashLink to={`#${number}`} className=\"num-div has-answered\">\n                  {number}\n                </HashLink>\n              )}\n            </React.Fragment>\n          );\n        })}\n      </div>\n    </NumberStyles>\n  );\n};\n\nexport default QuestionNumberDiv;\n","/app/src/config.js",[],"/app/src/common/imageComponent.js",["605"],"import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ImageStyles = styled.div`\n  margin-bottom: 10px;\n  .img{\n    width: 240px;\n  }\n`;\n\nconst ImageComponent = ({ src }) => {\n  return (\n    <ImageStyles>\n      <img src={src} className=\"img\" />\n    </ImageStyles>\n  );\n};\n\nexport default ImageComponent;\n","/app/src/common/videoComponent.js",[],"/app/src/common/audioComponent.js",[],"/app/src/graphql/mutation.js",[],"/app/src/graphql/queries.js",[],"/app/src/common/essayQuestionComponent.js",["606","607"],"import React, { useState, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport VideoComponent from \"../common/videoComponent\";\nimport AudioComponent from \"../common/audioComponent\";\nimport ImageComponent from \"../common/imageComponent\";\nimport settings from \"../config\";\n\nconst baseUrl = settings.API_URL;\nconst EssayComponentStyles = styled.div`\n  .number {\n    font-size: 20px;\n  }\n  .div-panel {\n    border: 1px solid #c0c0c0;\n    padding: 20px;\n    margin-bottom: 20px;\n  }\n  .question-panel {\n    display: flex;\n  }\n  .question-divs {\n    margin-left: 40px;\n    font-size: 20px;\n  }\n  .media {\n    margin-left: 40px;\n  }\n\n  .clue {\n    font-size: 16px;\n    color: #082b79;\n  }\n\n  input {\n    border-top-style: hidden;\n    border-right-style: hidden;\n    border-left-style: hidden;\n    border-bottom-style: groove;\n    border-bottom: 2px solid black;\n    width: 50%;\n    background: none;\n  }\n\n  .no-outline:focus {\n    outline: none;\n    padding: 10px;\n  }\n  .clue {\n    font-size: 20px;\n    margin: 20px 0px;\n  }\n  .hideMe {\n    display: none;\n  }\n  @media only screen and (max-width: 600px) {\n    input {\n      width: 100%;\n    }\n  }\n`;\n\nconst setHtml = (html) => {\n  return { __html: html };\n};\n\nconst EssayExamQuestionComponent = ({\n  data: {\n    number,\n    question,\n    clue,\n    mediaUrl,\n    mediaType,\n    index,\n    textBox: { value },\n    onChangeText,\n  },\n}) => {\n  const onTextAnswerChange = (e, index) => {\n    const text = e.target.value;\n    onChangeText({ value: text, index });\n  };\n\n  return (\n    <EssayComponentStyles>\n      <div className=\"card div-panel\" id={`${index + 1}`}>\n        <div className=\"question-panel\">\n          <div className=\"number\">{number}.</div>\n          <div\n            className=\"question-divs\"\n            dangerouslySetInnerHTML={setHtml(question)}\n          />\n        </div>\n        {mediaType && (\n          <div className=\"media\">\n            {mediaType === \"video\" && (\n              <VideoComponent src={`${baseUrl}/${mediaUrl}`} type={mediaType} />\n            )}\n            {mediaType === \"audio\" && (\n              <AudioComponent src={`${baseUrl}/${mediaUrl}`} type={mediaType} />\n            )}\n\n            {mediaType === \"image\" && (\n              <ImageComponent src={`${baseUrl}/${mediaUrl}`} />\n            )}\n          </div>\n        )}\n\n        <input\n          type=\"text\"\n          className=\"no-outline\"\n          placeholder=\"type your answer here....\"\n          value={value}\n          onChange={(e) => onTextAnswerChange(e, index)}\n        />\n\n        <div className=\"clue\">\n          {clue && (\n            <p className=\"clue\">\n              Question clue:{\" \"}\n              <b>\n                <i>{clue}</i>\n              </b>\n            </p>\n          )}\n        </div>\n      </div>\n    </EssayComponentStyles>\n  );\n};\n\nexport default EssayExamQuestionComponent;\n","/app/src/common/usersTablePanel.js",["608"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport methods from \"../methods\";\nimport Modal from \"react-modal\";\nimport { useMutation } from \"@apollo/client\";\nimport { ChangeUserPasswordMutation } from \"../graphql/mutation\";\n\nModal.setAppElement(\"#root\");\n\nconst customStyles = {\n  content: {\n    width: \"500px\",\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\nconst UsersTablePanelStyles = styled.div``;\n\nconst UsersTablePanel = ({\n  users,\n  changeStatusFunc,\n  processing,\n  currentLoginUser,\n}) => {\n  const [processingData, setProcessing] = useState(false);\n  const [password, setPassword] = useState(\"\");\n  const [errors, setErrors] = useState(null);\n  const [username, setUserName] = useState(null);\n  const [submitting, setSubmitting] = useState(false);\n\n  //mutation here\n  const [changePasswordFunction, changePasswordResult] = useMutation(\n    ChangeUserPasswordMutation\n  );\n\n  useEffect(() => {\n    if (changePasswordResult.data) {\n      window.alert(\"password was changed successfully\");\n      setProcessing(!processingData);\n      setSubmitting(!submitting);\n    }\n\n    if (changePasswordResult.error) {\n      setErrors(changePasswordResult.error);\n      setProcessing(!processingData);\n      setSubmitting(!submitting);\n    }\n  }, [changePasswordResult.data, changePasswordResult.error]);\n\n  const handlePasswordButtonClick = (username) => {\n    if (username) {\n      setUserName(username);\n      setProcessing(!processingData);\n    }\n  };\n\n  const handleStatusChange = ({ id, active }) => {\n    changeStatusFunc({ id, active });\n  };\n\n  const handleTextChange = (e) => {\n    const value = e.target.value;\n    setPassword(value);\n  };\n  const handlePasswordChange = async (e) => {\n    e.preventDefault();\n    setSubmitting(!submitting);\n    try {\n      await changePasswordFunction({\n        variables: {\n          username,\n          newPassword: password,\n        },\n      });\n    } catch (error) {}\n  };\n\n  return (\n    <UsersTablePanelStyles>\n      <div className=\"table-responsive\">\n        <table className=\"table table-success table-striped\">\n          <thead>\n            <tr>\n              <th scope=\"col\">S/N</th>\n              <th scope=\"col\">User Details</th>\n              <th scope=\"col\">Account Type</th>\n              <th scope=\"col\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {users &&\n              users.length > 0 &&\n              users.map(({ username, id, userType, active, name }, index) => {\n                return (\n                  <tr key={id}>\n                    <td>\n                      <p>{index + 1}</p>\n                    </td>\n\n                    <td>\n                      <p>Name: {name.toUpperCase()}</p>\n                      <p>Username: {username.toUpperCase()}</p>\n                    </td>\n\n                    <td>\n                      <p>{userType.toUpperCase()}</p>\n                    </td>\n\n                    <td>\n                      <div\n                        className=\"btn-group\"\n                        role=\"group\"\n                        aria-label=\"Action Group\"\n                      >\n                        {methods.Utils.DisablecurrentLoginUser(\n                          currentLoginUser,\n                          username\n                        ) === true ? null : (\n                          <button\n                            type=\"button\"\n                            disabled={processing}\n                            className={\n                              active ? \"btn btn-danger\" : \"btn btn-success\"\n                            }\n                            onClick={() => handleStatusChange({ id, active })}\n                          >\n                            {active ? \"Deactivate account\" : \"Activate Account\"}\n                          </button>\n                        )}\n                        <button\n                          type=\"button\"\n                          className=\"btn btn-warning\"\n                          onClick={() => handlePasswordButtonClick(username)}\n                        >\n                          change password\n                        </button>\n                      </div>\n                    </td>\n                  </tr>\n                );\n              })}\n          </tbody>\n        </table>\n      </div>\n\n      {\n        processingData &&\n      \n      <Modal\n        isOpen={processingData}\n        style={customStyles}\n        contentLabel=\"Change password modal\"\n      >\n        {errors && <p className=\"text-danger text-center\">{errors.message}</p>}\n        <form onSubmit={handlePasswordChange}>\n          <div className=\"mb-3\">\n            <label htmlFor=\"password\" className=\"form-label\">\n              password\n            </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"password\"\n              aria-describedby=\"passwordHelp\"\n              value={password}\n              onChange={handleTextChange}\n            />\n            <div id=\"passwordHelp\" className=\"form-text\">\n              Enter a new password.\n            </div>\n          </div>\n\n          <div className=\"text-center\">\n            <div className=\"btn-group\" role=\"group\" aria-label=\"Action Group\">\n              <button\n                onClick={() => setProcessing(!processingData)}\n                className=\"btn btn-warning\"\n              >\n                close\n              </button>\n\n              <button\n                disabled={submitting}\n                type=\"submit\"\n                className=\"btn btn-primary\"\n              >\n                {submitting\n                  ? \"changing password please wait.....\"\n                  : \"Change Password\"}\n              </button>\n            </div>\n          </div>\n        </form>\n      </Modal>\n      }\n    </UsersTablePanelStyles>\n  );\n};\n\nexport default UsersTablePanel;\n","/app/src/common/displayScriptComponent.js",["609"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\n\nconst DisplayQuizScriptComponentStyles = styled.div`\n  p {\n    font-size: 18px;\n  }\n  .question {\n    font-size: 16px;\n  }\n  span {\n    padding-left: 50px;\n  }\n  .question-panel {\n    display: flex;\n    font-size: 16px;\n  }\n  .question-divs {\n    padding-left: 20px;\n  }\n  .details {\n    background-color: #0b2f27;\n    color: #fff;\n    padding: 30px;\n  }\n  .details {\n    background-color: #0b2f27;\n    color: #fff;\n    padding: 30px;\n  }\n  .text-name {\n    color: #f8f8f5 !important;\n  }\n  .spanDetails {\n    float: right;\n    font-weight: bold;\n    color: #d28431;\n  }\n  .score {\n    font-size: 35px;\n    text-align: center;\n  }\n  .right-float {\n    float: right;\n  }\n`;\n\nconst setHtml = (html) => {\n  return { __html: html };\n};\n\nconst DisplayScriptComponent = ({ scripts }) => {\n  return (\n    <DisplayQuizScriptComponentStyles>\n      <div className=\"row\">\n        <div className=\"col-md-10 offset-md-1\">\n          {scripts && (\n            <React.Fragment>\n              <div className=\"details card-title\">\n                <h2 className=\"text-center text-name\">\n                  <b>{scripts.examDetails.examinationName.toUpperCase()}</b>\n                </h2>\n\n                <p>\n                  Time started :\n                  <span className=\"spanDetails\">\n                    {moment(scripts.timeExamStarted).format(\n                      \"dddd, MMMM Do YYYY, h:mm:ss a\"\n                    )}\n                  </span>\n                </p>\n                <p>\n                  Time ended :\n                  <span className=\"spanDetails\">\n                    {moment(scripts.timeExamEnded).format(\n                      \"dddd, MMMM Do YYYY, h:mm:ss a\"\n                    )}\n                  </span>\n                </p>\n                <p>\n                  Exam Duration :{\" \"}\n                  <span className=\"spanDetails\">\n                    {scripts.examDetails.duration}\n                  </span>\n                </p>\n\n                <p>\n                  Time Taken :\n                  <span className=\"spanDetails\">\n                    {moment(scripts.timeExamEnded).diff(\n                      moment(scripts.timeExamStarted),\n                      \"minutes\"\n                    )}\n                  </span>\n                </p>\n              </div>\n              <p className=\"score\">\n                Score :\n                <span>\n                  {scripts.score} /{scripts.examDetails.numberOfQuestions}\n                </span>\n              </p>\n            </React.Fragment>\n          )}\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-md-10 offset-md-1 card\">\n          {scripts &&\n            scripts.scripts.map(\n              (\n                {\n                  number,\n                  selectedOption,\n                  correctOption,\n                  explanation,\n                  question,\n                },\n                index\n              ) => {\n                let gotTheAnswer;\n\n                if (selectedOption) {\n                  if (selectedOption == correctOption) {\n                    gotTheAnswer = true;\n                  }\n                }\n                return (\n                  <div key={index}>\n                    <div className=\"question-panel\">\n                      <div>{number}).</div>\n                      <div\n                        className=\"question-divs\"\n                        dangerouslySetInnerHTML={setHtml(question)}\n                      />\n                    </div>\n\n                    {gotTheAnswer ? (\n                      <p>\n                        <span className=\"text-success\">\n                          {correctOption}\n                          <span className=\"right-float\" style={{ fontSize: 30 + \"px\" }}>&#10004;</span>\n                        </span>\n                        <br />\n                        <span>{explanation}</span>\n                      </p>\n                    ) : (\n                      <p>\n                        {selectedOption ? (\n                          <React.Fragment>\n                            <span className=\"text-danger\">\n                              selected answer : {selectedOption}\n                              <span className=\"right-float\" style={{ fontSize: 30 + \"px\" }}>\n                                &#10006;\n                              </span>\n                            </span>\n                            <br />\n                            <span className=\"text-success\">\n                              correct answer : {correctOption}\n                            </span>\n                            <br />\n                            <span>{explanation}</span>\n                          </React.Fragment>\n                        ) : (\n                          <React.Fragment>\n                            <span>\n                              you did not select any option{\" \"}\n                              <span\n                                className=\"text-danger\"\n                                style={{ fontSize: 20 + \"px\" }}\n                              >\n                                &#10006;\n                              </span>\n                            </span>\n                            <br />\n                            <span className=\"text-success\">\n                              correct answer : {correctOption}\n                            </span>\n                            <br />\n                            <span>{explanation}</span>\n                          </React.Fragment>\n                        )}\n                      </p>\n                    )}\n                  </div>\n                );\n                /* end of scripts matter here */\n              }\n            )}\n        </div>\n      </div>\n    </DisplayQuizScriptComponentStyles>\n  );\n};\n\nexport default DisplayScriptComponent;\n","/app/src/common/selectExaminationComponent.js",["610","611","612"],"import React, { useState, useEffect } from \"react\";\nimport { useQuery, useLazyQuery } from \"@apollo/client\";\nimport { GetAllExamination, GetExamScheduleByType } from \"../graphql/queries\";\n\nimport styled from \"styled-components\";\n\nimport Loading from \"../common/loading\";\n\nconst SelectExaminationStyles = styled.div``;\n\nconst SelectExaminationComponent = ({ examFunc, examTypeFunc }) => {\n  const [selectedExamId, setSelectedExamId] = useState(\"\");\n\n  const [errors, setErrors] = useState(null);\n  const [examType, setExamType] = useState([]);\n\n  const [scheduleExams, setScheduleExams] = useState([]);\n  const [processing, setProcessing] = useState(false);\n  const { loading, error, data } = useQuery(GetAllExamination);\n  const [scheduleExamQuery, scheduleExamResult] = useLazyQuery(\n    GetExamScheduleByType,\n    {\n      variables: {\n        examTypeId: selectedExamId,\n      },\n    }\n  );\n\n  //get exam schedule by type\n  useEffect(() => {\n    if (scheduleExamResult.error) {\n      setProcessing(!processing);\n      setErrors(scheduleExamResult.error.message);\n    }\n\n    if (scheduleExamResult.called && scheduleExamResult.loading) {\n      setProcessing(!processing);\n    }\n\n    if (scheduleExamResult.data) {\n      setProcessing(!processing);\n      setScheduleExams(scheduleExamResult.data.getExamScheduleByType);\n    }\n  }, [\n    scheduleExamResult.error,\n    scheduleExamResult.loading,\n    scheduleExamResult.data,\n    scheduleExamResult.called,\n  ]);\n\n  //load exam type schedule\n  useEffect(() => {\n    if (error) {\n      setErrors(error.message);\n    }\n    if (data) {\n      setExamType(data.getAllExam);\n    }\n  }, [loading, error, data]);\n\n  const handleExamChange = async (e) => {\n    const value = e.target.value;\n    if (value == \"0\") return;\n    const splitValue = value.split(\"/\");\n    setSelectedExamId(splitValue[0]);\n    examFunc({ examId: splitValue[0], examName: splitValue[1] });\n\n    scheduleExamQuery();\n  };\n\n  const handleScheduleExamChange = (e) => {\n    const value = e.target.value;\n    if (value == \"0\") return;\n    const splitValue = value.split(\"/\");\n\n    examTypeFunc({\n      examScheduleId: splitValue[0],\n      examScheduleName: splitValue[1],\n    });\n  };\n\n  return (\n    <SelectExaminationStyles>\n      <div className=\"text-center\">{loading && <Loading />}</div>\n      <div className=\"text-center\">\n        {errors && <p className=\"lead text-danger\">{errors.message}</p>}\n      </div>\n      <div className=\"form-group\">\n        <select className=\"custom-select\" onChange={handleExamChange}>\n          <option value=\"0\">select examination type</option>\n          {loading && <option>loading data.......</option>}\n          {examType &&\n            examType.length > 0 &&\n            examType.map(({ id, examName }) => {\n              return (\n                <option value={`${id}/${examName}`} key={id}>\n                  {examName}\n                </option>\n              );\n            })}\n        </select>\n      </div>\n\n      <select className=\"form-control\" onChange={handleScheduleExamChange}>\n        <option value=\"0\">select examination </option>\n        {processing && <option value=\"0\">loading data....</option>}\n        {scheduleExams &&\n          scheduleExams.length > 0 &&\n          scheduleExams.map(({ id, examinationName }) => {\n            return (\n              <option key={id} value={`${id}/${examinationName}`}>\n                {examinationName}\n              </option>\n            );\n          })}\n      </select>\n    </SelectExaminationStyles>\n  );\n};\n\nexport default SelectExaminationComponent;\n","/app/src/common/loadQuestionsComponent.js",["613","614","615","616","617","618"],"import React, { useEffect, useState } from \"react\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { GetAllQuestions, GetAllSpellingQuestions } from \"../graphql/queries\";\nimport ShowQuestionComponent from \"./showQuestionsComponent\";\nimport ShowSpellingComponent from \"./showSpellingComponent\";\nimport Loading from \"../common/loading\";\nimport styled from \"styled-components\";\n\nconst LoadQuestionsStyle = styled.div``;\n\nconst buttonsToDisplay = (total, numberPerPage) => {\n  const buttonNumber = +total / +numberPerPage;\n  let array = [];\n  array.length = Math.ceil(buttonNumber);\n  return array.fill(1);\n};\n\nconst LoadQuestionsComponent = ({\n  examId,\n  handleQuestionClick,\n  examType,\n}) => {\n  const [loadingData, setLoading] = useState(false);\n  const [errors, setErrors] = useState(null);\n  const [questions, setQuestions] = useState({});\n  const [totalQuestion, setTotalQuestion] = useState(0);\n  const [queryRan, setQueryRan] = useState(false);\n\n  const [questionsQuery, questionsQueryResult] = useLazyQuery(GetAllQuestions, {\n    variables: {\n      examId: examId,\n    },\n  });\n\n  const [spellingQuestionsQuery, spellingQuestionsQueryResult] = useLazyQuery(\n    GetAllSpellingQuestions,\n    {\n      variables: {\n        examId: examId,\n      },\n    }\n  );\n\n  useEffect(() => {\n    switch (examType) {\n      case \"multiple choice questions\":\n        questionsQuery();\n        break;\n\n      case \"spelling examination\":\n        spellingQuestionsQuery();\n        break;\n      case \"short answer exam\":\n        break;\n      case \"essay exam\":\n        break;\n      case \"quantitative exam\":\n        break;\n    }\n  }, [examId]);\n\n  //effects for multiple choice questions\n  useEffect(() => {\n    if (questionsQueryResult.error) {\n      setErrors(questionsQueryResult.error.message);\n      setLoading(true);\n      setQueryRan(!queryRan);\n    }\n\n    if (questionsQueryResult.data) {\n      setQuestions(questionsQueryResult.data.getAllQuestions.questions);\n      setTotalQuestion(questionsQueryResult.data.getAllQuestions.totalQuestion);\n      setLoading(false);\n    }\n  }, [questionsQueryResult.error, questionsQueryResult.data]);\n\n  //effect for spelling questions loading\n  useEffect(() => {\n    if (spellingQuestionsQueryResult.error) {\n      setErrors(spellingQuestionsQueryResult.error.message);\n      setLoading(true);\n      setQueryRan(!queryRan);\n    }\n\n    if (spellingQuestionsQueryResult.data) {\n\n      setQuestions(\n        spellingQuestionsQueryResult.data.getAllSpellingQuestions.questions\n      );\n      setTotalQuestion(\n        spellingQuestionsQueryResult.data.getAllSpellingQuestions.totalQuestion\n      );\n      \n      setLoading(false);\n    }\n  }, [spellingQuestionsQueryResult.error, spellingQuestionsQueryResult.data]);\n\n  //get more questions for multiple choice questions\n  const getMoreQuestions = (e, index) => {\n    try {\n      e.stopPropagation();\n      e.preventDefault();\n      setLoading(true);\n      setQueryRan(!queryRan);\n      questionsQueryResult.fetchMore({\n        variables: {\n          examId: examId,\n          offset: questions.length * (index - 1),\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult) return prev;\n          return Object.assign({}, prev, {\n            getAllQuestions: {\n              totalQuestion: fetchMoreResult.getAllQuestions.totalQuestion,\n              __typename: \"QuestionsTotal\",\n              questions: [\n                //...prev.getAllQuestions.questions,\n                ...fetchMoreResult.getAllQuestions.questions,\n              ],\n            },\n          });\n        },\n      });\n    } catch (error) {}\n  };\n\n  //get more questions for spelling questions\n  const getMoreSpellingQuestions = (e, index) => {\n    try {\n      e.stopPropagation();\n      e.preventDefault();\n      setLoading(true);\n      setQueryRan(!queryRan);\n      spellingQuestionsQueryResult.fetchMore({\n        variables: {\n          examId: examId,\n          offset: questions.length * (index - 1),\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult) return prev;\n          return Object.assign({}, prev, {\n            getAllSpellingQuestions: {\n              totalQuestion:\n                fetchMoreResult.getAllSpellingQuestions.totalQuestion,\n              __typename: \"QuestionsTotal\",\n              questions: [\n                //...prev.getAllQuestions.questions,\n                ...fetchMoreResult.getAllSpellingQuestions.questions,\n              ],\n            },\n          });\n        },\n      });\n    } catch (error) {}\n  };\n\n  return (\n    <LoadQuestionsStyle>\n      {errors && <p className=\"lead text-danger\">Error: {errors}</p>}\n\n      {examType === \"multiple choice questions\" &&\n      questions &&\n      questions.length > 0 ? (\n        questions.map((question, index) => {\n          return (\n            <div key={index} onClick={() => handleQuestionClick(question)}>\n              <ShowQuestionComponent question={question} />\n            </div>\n          );\n        })\n      ) : (\n        <div>{queryRan && <p>No questions saved yet.</p>}</div>\n      )}\n\n      {examType === \"spelling examination\" && questions &&\n      questions.length > 0 ? (\n        questions.map((word, index) => {\n          return (\n            <div key={index} onClick={() => handleQuestionClick(word)}>\n              <ShowSpellingComponent question={word} />\n            </div>\n          );\n        })\n      ) : (\n        <div>{queryRan && <p>No questions saved yet.</p>}</div>\n      )}\n\n      {loadingData && <Loading />}\n\n      <nav aria-label=\"Page navigation example\">\n        <ul className=\"pagination\">\n          {examType === \"multiple choice questions\" &&\n            totalQuestion > 0 &&\n            buttonsToDisplay(totalQuestion, 20).map((_, index) => {\n              return (\n                <li\n                  className=\"page-item\"\n                  key={index}\n                  onClick={(e) => getMoreQuestions(e, index + 1)}\n                >\n                  <a className=\"page-link\" href=\"\">\n                    {index + 1}\n                  </a>\n                </li>\n              );\n            })}\n\n          {examType === \"spelling examination\" &&\n            totalQuestion > 0 &&\n            buttonsToDisplay(totalQuestion, 20).map((_, index) => {\n              return (\n                <li\n                  className=\"page-item\"\n                  key={index}\n                  onClick={(e) => getMoreSpellingQuestions(e, index + 1)}\n                >\n                  <a className=\"page-link\" href=\"\">\n                    {index + 1}\n                  </a>\n                </li>\n              );\n            })}\n        </ul>\n      </nav>\n    </LoadQuestionsStyle>\n  );\n};\n\nexport default LoadQuestionsComponent;\n","/app/src/components/editButton.js",[],"/app/src/components/showQuestionComponent.js",[],"/app/src/methods/index.js",["619"],"import bulkMethods from \"./saveBulkQuestions\";\nimport ExamMarking from \"./examMarking\";\nimport Utils from \"./utils\";\nimport GenerateScripts from \"./generateScripts\";\nimport SaveBulkSpellingQuestions from \"./saveBulkSpellingQuestions\";\nimport MarkSpellingExam from \"./markSpellingScripts\";\nimport MarkEssayExam from \"./markEssayExamination\";\nimport SaveBulkEssayQuestions from \"./saveBulkEssayQuestions\";\n\nexport default {\n  bulkMethods,\n  ExamMarking,\n  Utils,\n  GenerateScripts,\n  SaveBulkSpellingQuestions,\n  SaveBulkEssayQuestions,\n  MarkSpellingExam,\n  MarkEssayExam,\n};\n","/app/src/common/showQuestionsComponent.js",[],"/app/src/common/showSpellingComponent.js",[],"/app/src/methods/saveBulkQuestions.js",["620","621","622","623","624","625","626","627","628","629"],"import * as XLSX from \"xlsx\";\n\n//question: String,\n// answers: [\n//   {\n//     option: String,\n//     isCorrect: Boolean,\n//     selected: Boolean\n//   },\n// ],\n// questionImageUrl: { type: String, required: false },\n// examinationType: String,\n// examId: String,\n// explanation: { type: String, required: false }\n\n//answers is an array\n//answer is graded 1 to 4\n\n//\n\nconst saveBulkQuestions = (excelArray, examId, examinationType) => {\n  //build the question and return the array data\n  let questionsArray = [];\n  let errorArray = [];\n  for (let i = 0; i < excelArray.length; i++) {\n    let currentArray = excelArray[i];\n    let answersArray = [];\n    let questionObject = {};\n    //loop through the second array\n    for (let j = 0; j < currentArray.length; j++) {\n      const arrayValue = currentArray[j];\n      let answerObject = {};\n      const correctAnswer = currentArray[5];\n\n      switch (j) {\n        case 0:\n          questionObject.question =\n            arrayValue != \"undefined\" ? \"<p>\" + arrayValue + \"</p>\" : \"<p></p>\";\n          break;\n        case 1:\n          answerObject.option = arrayValue;\n          answerObject.selected = false;\n          if (+correctAnswer == 1) {\n            answerObject.isCorrect = true;\n          } else {\n            answerObject.isCorrect = false;\n          }\n          answersArray.push(answerObject);\n          break;\n\n        case 2:\n          answerObject.option = arrayValue;\n          answerObject.selected = false;\n          if (+correctAnswer == 2) {\n            answerObject.isCorrect = true;\n          } else {\n            answerObject.isCorrect = false;\n          }\n          answersArray.push(answerObject);\n\n          break;\n\n        case 3:\n          answerObject.option = arrayValue;\n          answerObject.selected = false;\n          if (+correctAnswer == 3) {\n            answerObject.isCorrect = true;\n          } else {\n            answerObject.isCorrect = false;\n          }\n          answersArray.push(answerObject);\n          break;\n        case 4:\n          answerObject.option = arrayValue;\n          answerObject.selected = false;\n          if (+correctAnswer == 4) {\n            answerObject.isCorrect = true;\n          } else {\n            answerObject.isCorrect = false;\n          }\n          answersArray.push(answerObject);\n          break;\n\n        case 6:\n          //the answer object;\n          questionObject.explanation =\n            arrayValue != \"undefined\" ? arrayValue.trim() : \"\";\n          break;\n      }\n    }\n    //add the questions and the answers here\n    //check if a question has an answer or not\n\n    const findAnswers = answersArray.filter((ans) => {\n      return ans.isCorrect == true;\n    });\n    if (findAnswers.length == 0) {\n      //we have an error in this question\n      errorArray.push(questionObject.question);\n    }\n    questionObject.answers = answersArray;\n    questionObject.questionImageUrl = \"\";\n    questionObject.examId = examId;\n    questionObject.examinationType = examinationType;\n    questionsArray.push(questionObject);\n  }\n  if (errorArray.length > 0) {\n    return {\n      type: \"error\",\n      payload: errorArray,\n    };\n  }\n  return { type: \"result\", payload: questionsArray };\n};\n\nexport const SheetToArray = (sheet) => {\n  var result = [];\n  var row;\n  var rowNum;\n  var colNum;\n  var range = XLSX.utils.decode_range(sheet[\"!ref\"]);\n  for (rowNum = range.s.r; rowNum <= range.e.r; rowNum++) {\n    row = [];\n    for (colNum = range.s.c; colNum <= range.e.c; colNum++) {\n      var nextCell = sheet[XLSX.utils.encode_cell({ r: rowNum, c: colNum })];\n      if (typeof nextCell === \"undefined\") {\n        row.push(void 0);\n      } else row.push(nextCell.w);\n    }\n    result.push(row);\n  }\n  return result;\n};\n\nexport default { saveBulkQuestions, SheetToArray };\n","/app/src/methods/examMarking.js",["630","631","632"],"const calculateTotalScored = (questionArray=[]) => {\n    let total = 0;\n    for (let i = 0; i < questionArray.length; i++) {\n      const answers = questionArray[i].answers;\n      const selectedAnswerArray = answers.filter((answer) => {\n        return answer.selected == true;\n      });\n      const correctAnswerArray = answers.filter((answer) => {\n        return answer.isCorrect == true;\n      });\n      const selectedAnswer = selectedAnswerArray[0];\n      const correctAnswer = correctAnswerArray[0];\n      if (selectedAnswer) {\n        if (correctAnswer.option == selectedAnswer.option) {\n          total++;\n        }\n      }\n    }\n    return total;\n  };\n\n\n  export default calculateTotalScored;","/app/src/methods/utils.js",["633","634","635"],"import store from \"store\";\n\nconst ExtractError = (errorObject) => {\n  const { graphQLErrors, networkError } = errorObject;\n  const errorArray = [];\n  if (graphQLErrors) {\n    graphQLErrors.map((message) => {\n      errorArray.push(message);\n    });\n  }\n  if (networkError) {\n    errorArray.push({ message: \"could not connect to the database\" });\n  }\n\n  return errorArray;\n};\n\nconst RemoveSlash = (word) => {\n  if (word) {\n    let replaceSpace = word.replace(/\\//g, \"_\");\n\n    return replaceSpace;\n  }\n};\n\nconst ReplaceSlash = (word) => {\n  if (word) {\n    let replaceWord = word.replace(/_/g, \"/\");\n    return replaceWord;\n  }\n};\n\nconst CapFirstLetterOfEachWord = (word) => {\n  if (!word) return null;\n  const wordArray = word.split(\" \");\n  let capitalizedWord = \"\";\n  for (let i = 0; i < wordArray.length; i++) {\n    const currentWord = wordArray[i];\n    capitalizedWord +=\n      currentWord[0].toUpperCase() +\n      currentWord.substr(1, currentWord.length) +\n      \" \";\n  }\n  return capitalizedWord;\n};\n\nconst ConvertMinutesToHours = (minutesToConvert) => {\n  const hours = Math.floor(minutesToConvert / 60);\n  const minutes = minutesToConvert - hours * 60;\n  if (hours == 0) {\n    return `${minutes} MINUTES`;\n  }\n  return `${hours} HOURS ${minutes} MINUTES`;\n};\n\nconst DisablecurrentLoginUser = (currentLoginUser, username) => {\n  if (currentLoginUser) {\n    let parsedUser = JSON.parse(currentLoginUser);\n    if (parsedUser.username.toLowerCase() === username.toLowerCase())\n      return true;\n  }\n  return false;\n};\n\nconst SetHtml = (html) => {\n  return { __html: html };\n};\n\nconst ClearStoreValue = () => {\n  //clear the value of the store\n  store.remove(\"examQuestions\");\n  store.remove(\"currentIndex\");\n  store.remove(\"examStarted\");\n  store.remove(\"duration\");\n  store.remove(\"examId\");\n  store.remove(\"totalQuestions\");\n  store.remove(\"questionData\");\n  store.remove(\"examDetails\");\n  store.remove(\"timer\");\n};\n\nconst removeTypename = (value) => {\n  if (value === null || value === undefined) {\n    return value;\n  } else if (Array.isArray(value)) {\n    return value.map((v) => removeTypename(v));\n  } else if (typeof value === \"object\") {\n    const newObj = {};\n    Object.entries(value).forEach(([key, v]) => {\n      if (key !== \"__typename\") {\n        newObj[key] = removeTypename(v);\n      }\n    });\n    return newObj;\n  }\n  return value;\n};\n\nexport default {\n  CapFirstLetterOfEachWord,\n  ExtractError,\n  RemoveSlash,\n  ReplaceSlash,\n  ConvertMinutesToHours,\n  DisablecurrentLoginUser,\n  SetHtml,\n  ClearStoreValue,\n  removeTypename\n};\n","/app/src/methods/generateScripts.js",["636","637"],"const generateScripts = (questionArray = []) => {\n  //loop through the question array and generate\n  let scriptArray = [];\n  for (let i = 0; i < questionArray.length; i++) {\n    const currentQuestion = questionArray[i];\n    const question = currentQuestion.question;\n    const answers = currentQuestion.answers;\n    const explanation = currentQuestion.explanation;\n    const questionNumber = i + 1;\n    const selectedAnswerArray = answers.filter(\n      (answer) => answer.selected == true\n    );\n    let selectedOption = \"You did not select an answer.\";\n    if (selectedAnswerArray.length > 0) {\n      selectedOption = selectedAnswerArray[0].option;\n    }\n    const correctAnswerArray = answers.filter(\n      (answer) => answer.isCorrect == true\n    );\n    let correctOption = correctAnswerArray[0].option;\n\n    let questionObject = {\n      number: questionNumber,\n      selectedOption,\n      correctOption,\n      explanation,\n      question,\n    };\n\n    scriptArray.push(questionObject);\n  }\n  return scriptArray;\n};\n\nexport default generateScripts;\n","/app/src/methods/saveBulkSpellingQuestions.js",["638","639","640"],"const saveBulkSpellingQuestions = (excelArray, examId, examinationType) => {\n  //build the question and return the array data\n  let questionsArray = [];\n  for (let i = 0; i < excelArray.length; i++) {\n    let currentArray = excelArray[i];\n    let questionObject = {};\n    //loop through the second array\n    for (let j = 0; j < currentArray.length; j++) {\n      const arrayValue = currentArray[j];\n\n      switch (j) {\n        case 0:\n          questionObject.word = arrayValue;\n          break;\n        case 1:\n          questionObject.correctWord = arrayValue;\n        case 2:\n          questionObject.clue = arrayValue;\n          break;\n      }\n    }\n    //check if the word has asterisks\n    if (questionObject.word.indexOf(\"*\") != -1) {\n      questionObject.examId = examId;\n      questionObject.examinationType = examinationType;\n      questionObject.createdAt = new Date();\n      questionsArray.push(questionObject);\n    }\n  }\n  return { type: \"result\", payload: questionsArray };\n};\n\nexport default saveBulkSpellingQuestions;\n","/app/src/methods/markSpellingScripts.js",[],"/app/src/methods/markEssayExamination.js",[],"/app/src/methods/saveBulkEssayQuestions.js",["641"],"//: is the character that seperates the possible answers array\n\nconst saveBulkEssayQuestions = (excelArray, examId, examinationType) => {\n  //build the question and return the array data\n  let questionsArray = [];\n  for (let i = 0; i < excelArray.length; i++) {\n    let currentArray = excelArray[i];\n    let questionObject = {};\n    //loop through the second array\n    for (let j = 0; j < currentArray.length; j++) {\n      const arrayValue = currentArray[j];\n      switch (j) {\n        case 0:\n          questionObject.question = arrayValue.trim();\n          break;\n        case 1:\n          //lets split the positive answers array here\n          const splitValueByAsterik = arrayValue.split(\":\");\n          questionObject.possibleAnswers = splitValueByAsterik;\n          break;\n        case 2:\n          questionObject.clue = arrayValue;\n          break;\n      }\n    }\n    //check if we have a question that we want to save\n    if (questionObject.question && questionObject.possibleAnswers.length > 0) {\n      questionObject.examId = examId;\n      questionObject.type = \"short answer exam\";\n      questionObject.examinationType = examinationType;\n      questionsArray.push(questionObject);\n    }\n  }\n  return { type: \"result\", payloadValue: questionsArray };\n};\n\nexport default saveBulkEssayQuestions;\n","/app/src/common/footer.js",[],"/app/src/context/index.js",[],"/app/src/Routes/index.js",[],"/app/src/context/authContext.js",[],"/app/src/context/examContext.js",[],"/app/src/Routes/authorizedRoutes.js",[],{"ruleId":"642","severity":1,"message":"643","line":215,"column":5,"nodeType":"644","messageId":"645","endLine":215,"endColumn":10},{"ruleId":"642","severity":1,"message":"646","line":216,"column":5,"nodeType":"644","messageId":"645","endLine":216,"endColumn":13},{"ruleId":"642","severity":1,"message":"647","line":219,"column":10,"nodeType":"644","messageId":"645","endLine":219,"endColumn":17},{"ruleId":"648","severity":1,"message":"649","line":234,"column":6,"nodeType":"650","endLine":234,"endColumn":24,"suggestions":"651"},{"ruleId":"652","replacedBy":"653"},{"ruleId":"654","replacedBy":"655"},{"ruleId":"642","severity":1,"message":"656","line":5,"column":3,"nodeType":"644","messageId":"645","endLine":5,"endColumn":11},{"ruleId":"642","severity":1,"message":"657","line":26,"column":7,"nodeType":"644","messageId":"645","endLine":26,"endColumn":11},{"ruleId":"658","severity":1,"message":"659","line":286,"column":13,"nodeType":"660","endLine":286,"endColumn":25},{"ruleId":"661","severity":1,"message":"662","line":289,"column":51,"nodeType":"663","messageId":"664","endLine":289,"endColumn":53},{"ruleId":"658","severity":1,"message":"665","line":291,"column":15,"nodeType":"660","endLine":291,"endColumn":18},{"ruleId":"661","severity":1,"message":"662","line":295,"column":51,"nodeType":"663","messageId":"664","endLine":295,"endColumn":53},{"ruleId":"658","severity":1,"message":"665","line":297,"column":15,"nodeType":"660","endLine":297,"endColumn":31},{"ruleId":"658","severity":1,"message":"665","line":303,"column":19,"nodeType":"660","endLine":303,"endColumn":22},{"ruleId":"658","severity":1,"message":"665","line":307,"column":19,"nodeType":"660","endLine":307,"endColumn":22},{"ruleId":"661","severity":1,"message":"662","line":313,"column":51,"nodeType":"663","messageId":"664","endLine":313,"endColumn":53},{"ruleId":"658","severity":1,"message":"665","line":315,"column":15,"nodeType":"660","endLine":315,"endColumn":31},{"ruleId":"658","severity":1,"message":"665","line":321,"column":19,"nodeType":"660","endLine":321,"endColumn":22},{"ruleId":"658","severity":1,"message":"665","line":327,"column":19,"nodeType":"660","endLine":327,"endColumn":22},{"ruleId":"661","severity":1,"message":"662","line":333,"column":51,"nodeType":"663","messageId":"664","endLine":333,"endColumn":53},{"ruleId":"658","severity":1,"message":"665","line":335,"column":15,"nodeType":"660","endLine":335,"endColumn":31},{"ruleId":"658","severity":1,"message":"665","line":341,"column":19,"nodeType":"660","endLine":341,"endColumn":22},{"ruleId":"658","severity":1,"message":"665","line":348,"column":19,"nodeType":"660","endLine":348,"endColumn":22},{"ruleId":"661","severity":1,"message":"662","line":354,"column":51,"nodeType":"663","messageId":"664","endLine":354,"endColumn":53},{"ruleId":"658","severity":1,"message":"665","line":356,"column":15,"nodeType":"660","endLine":356,"endColumn":31},{"ruleId":"658","severity":1,"message":"665","line":362,"column":19,"nodeType":"660","endLine":362,"endColumn":22},{"ruleId":"661","severity":1,"message":"662","line":368,"column":51,"nodeType":"663","messageId":"664","endLine":368,"endColumn":53},{"ruleId":"658","severity":1,"message":"665","line":370,"column":15,"nodeType":"660","endLine":370,"endColumn":31},{"ruleId":"658","severity":1,"message":"665","line":376,"column":19,"nodeType":"660","endLine":376,"endColumn":22},{"ruleId":"658","severity":1,"message":"665","line":383,"column":19,"nodeType":"660","endLine":383,"endColumn":22},{"ruleId":"658","severity":1,"message":"665","line":390,"column":19,"nodeType":"660","endLine":390,"endColumn":22},{"ruleId":"661","severity":1,"message":"662","line":396,"column":51,"nodeType":"663","messageId":"664","endLine":396,"endColumn":53},{"ruleId":"658","severity":1,"message":"665","line":398,"column":15,"nodeType":"660","endLine":398,"endColumn":31},{"ruleId":"658","severity":1,"message":"665","line":404,"column":19,"nodeType":"660","endLine":404,"endColumn":22},{"ruleId":"658","severity":1,"message":"665","line":411,"column":19,"nodeType":"660","endLine":411,"endColumn":22},{"ruleId":"658","severity":1,"message":"665","line":418,"column":19,"nodeType":"660","endLine":418,"endColumn":22},{"ruleId":"661","severity":1,"message":"662","line":424,"column":51,"nodeType":"663","messageId":"664","endLine":424,"endColumn":53},{"ruleId":"658","severity":1,"message":"665","line":426,"column":15,"nodeType":"660","endLine":426,"endColumn":31},{"ruleId":"658","severity":1,"message":"665","line":432,"column":19,"nodeType":"660","endLine":432,"endColumn":22},{"ruleId":"658","severity":1,"message":"665","line":439,"column":19,"nodeType":"660","endLine":439,"endColumn":22},{"ruleId":"658","severity":1,"message":"665","line":446,"column":19,"nodeType":"660","endLine":446,"endColumn":22},{"ruleId":"658","severity":1,"message":"659","line":468,"column":15,"nodeType":"660","endLine":468,"endColumn":26},{"ruleId":"658","severity":1,"message":"659","line":472,"column":15,"nodeType":"660","endLine":472,"endColumn":26},{"ruleId":"658","severity":1,"message":"659","line":477,"column":13,"nodeType":"660","endLine":477,"endColumn":25},{"ruleId":"648","severity":1,"message":"666","line":76,"column":6,"nodeType":"650","endLine":76,"endColumn":14,"suggestions":"667"},{"ruleId":"648","severity":1,"message":"668","line":118,"column":6,"nodeType":"650","endLine":122,"endColumn":4,"suggestions":"669"},{"ruleId":"642","severity":1,"message":"670","line":1,"column":28,"nodeType":"644","messageId":"645","endLine":1,"endColumn":36},{"ruleId":"642","severity":1,"message":"671","line":55,"column":7,"nodeType":"644","messageId":"645","endLine":55,"endColumn":16},{"ruleId":"672","severity":1,"message":"673","line":56,"column":3,"nodeType":"674","messageId":"675","endLine":61,"endColumn":4},{"ruleId":"642","severity":1,"message":"676","line":84,"column":9,"nodeType":"644","messageId":"645","endLine":84,"endColumn":25},{"ruleId":"661","severity":1,"message":"662","line":113,"column":15,"nodeType":"663","messageId":"664","endLine":113,"endColumn":17},{"ruleId":"661","severity":1,"message":"662","line":153,"column":19,"nodeType":"663","messageId":"664","endLine":153,"endColumn":21},{"ruleId":"677","severity":1,"message":"678","line":180,"column":36,"nodeType":"679","messageId":"680","endLine":180,"endColumn":38},{"ruleId":"648","severity":1,"message":"681","line":88,"column":6,"nodeType":"650","endLine":88,"endColumn":57,"suggestions":"682"},{"ruleId":"648","severity":1,"message":"683","line":102,"column":6,"nodeType":"650","endLine":102,"endColumn":69,"suggestions":"684"},{"ruleId":"648","severity":1,"message":"685","line":116,"column":6,"nodeType":"650","endLine":116,"endColumn":28,"suggestions":"686"},{"ruleId":"661","severity":1,"message":"662","line":119,"column":19,"nodeType":"663","messageId":"664","endLine":119,"endColumn":21},{"ruleId":"661","severity":1,"message":"662","line":126,"column":15,"nodeType":"663","messageId":"664","endLine":126,"endColumn":17},{"ruleId":"648","severity":1,"message":"687","line":138,"column":20,"nodeType":"644","endLine":138,"endColumn":27},{"ruleId":"648","severity":1,"message":"688","line":164,"column":6,"nodeType":"650","endLine":164,"endColumn":8,"suggestions":"689"},{"ruleId":"661","severity":1,"message":"662","line":178,"column":14,"nodeType":"663","messageId":"664","endLine":178,"endColumn":16},{"ruleId":"661","severity":1,"message":"662","line":197,"column":69,"nodeType":"663","messageId":"664","endLine":197,"endColumn":71},{"ruleId":"677","severity":1,"message":"678","line":201,"column":28,"nodeType":"679","messageId":"680","endLine":201,"endColumn":30},{"ruleId":"661","severity":1,"message":"662","line":234,"column":61,"nodeType":"663","messageId":"664","endLine":234,"endColumn":63},{"ruleId":"661","severity":1,"message":"662","line":269,"column":61,"nodeType":"663","messageId":"664","endLine":269,"endColumn":63},{"ruleId":"642","severity":1,"message":"690","line":2,"column":10,"nodeType":"644","messageId":"645","endLine":2,"endColumn":18},{"ruleId":"648","severity":1,"message":"691","line":42,"column":6,"nodeType":"650","endLine":42,"endColumn":8,"suggestions":"692"},{"ruleId":"648","severity":1,"message":"693","line":58,"column":6,"nodeType":"650","endLine":58,"endColumn":53,"suggestions":"694"},{"ruleId":"648","severity":1,"message":"695","line":74,"column":6,"nodeType":"650","endLine":74,"endColumn":61,"suggestions":"696"},{"ruleId":"661","severity":1,"message":"662","line":120,"column":15,"nodeType":"663","messageId":"664","endLine":120,"endColumn":17},{"ruleId":"658","severity":1,"message":"659","line":245,"column":23,"nodeType":"660","endLine":245,"endColumn":56},{"ruleId":"642","severity":1,"message":"697","line":50,"column":10,"nodeType":"644","messageId":"645","endLine":50,"endColumn":23},{"ruleId":"642","severity":1,"message":"698","line":50,"column":25,"nodeType":"644","messageId":"645","endLine":50,"endColumn":39},{"ruleId":"648","severity":1,"message":"699","line":65,"column":6,"nodeType":"650","endLine":65,"endColumn":71,"suggestions":"700"},{"ruleId":"648","severity":1,"message":"699","line":80,"column":6,"nodeType":"650","endLine":80,"endColumn":77,"suggestions":"701"},{"ruleId":"648","severity":1,"message":"699","line":95,"column":6,"nodeType":"650","endLine":95,"endColumn":61,"suggestions":"702"},{"ruleId":"661","severity":1,"message":"662","line":103,"column":26,"nodeType":"663","messageId":"664","endLine":103,"endColumn":28},{"ruleId":"661","severity":1,"message":"662","line":106,"column":24,"nodeType":"663","messageId":"664","endLine":106,"endColumn":26},{"ruleId":"661","severity":1,"message":"662","line":109,"column":15,"nodeType":"663","messageId":"664","endLine":109,"endColumn":17},{"ruleId":"661","severity":1,"message":"662","line":109,"column":32,"nodeType":"663","messageId":"664","endLine":109,"endColumn":34},{"ruleId":"672","severity":1,"message":"673","line":200,"column":5,"nodeType":"674","messageId":"675","endLine":213,"endColumn":6},{"ruleId":"642","severity":1,"message":"703","line":42,"column":10,"nodeType":"644","messageId":"645","endLine":42,"endColumn":16},{"ruleId":"642","severity":1,"message":"704","line":44,"column":10,"nodeType":"644","messageId":"645","endLine":44,"endColumn":20},{"ruleId":"661","severity":1,"message":"662","line":163,"column":22,"nodeType":"663","messageId":"664","endLine":163,"endColumn":24},{"ruleId":"672","severity":1,"message":"673","line":199,"column":5,"nodeType":"674","messageId":"675","endLine":262,"endColumn":6},{"ruleId":"705","severity":1,"message":"706","line":236,"column":7,"nodeType":"707","messageId":"708","endLine":261,"endColumn":10},{"ruleId":"672","severity":1,"message":"673","line":272,"column":7,"nodeType":"674","messageId":"675","endLine":281,"endColumn":8},{"ruleId":"661","severity":1,"message":"662","line":310,"column":15,"nodeType":"663","messageId":"664","endLine":310,"endColumn":17},{"ruleId":"642","severity":1,"message":"709","line":57,"column":5,"nodeType":"644","messageId":"645","endLine":57,"endColumn":11},{"ruleId":"642","severity":1,"message":"643","line":60,"column":5,"nodeType":"644","messageId":"645","endLine":60,"endColumn":10},{"ruleId":"648","severity":1,"message":"710","line":115,"column":6,"nodeType":"650","endLine":115,"endColumn":34,"suggestions":"711"},{"ruleId":"642","severity":1,"message":"712","line":6,"column":8,"nodeType":"644","messageId":"645","endLine":6,"endColumn":14},{"ruleId":"642","severity":1,"message":"713","line":46,"column":7,"nodeType":"644","messageId":"645","endLine":46,"endColumn":28},{"ruleId":"661","severity":1,"message":"662","line":49,"column":13,"nodeType":"663","messageId":"664","endLine":49,"endColumn":15},{"ruleId":"648","severity":1,"message":"714","line":73,"column":6,"nodeType":"650","endLine":73,"endColumn":8,"suggestions":"715"},{"ruleId":"648","severity":1,"message":"699","line":90,"column":6,"nodeType":"650","endLine":90,"endColumn":76,"suggestions":"716"},{"ruleId":"642","severity":1,"message":"717","line":92,"column":9,"nodeType":"644","messageId":"645","endLine":92,"endColumn":16},{"ruleId":"661","severity":1,"message":"662","line":57,"column":13,"nodeType":"663","messageId":"664","endLine":57,"endColumn":15},{"ruleId":"661","severity":1,"message":"662","line":89,"column":58,"nodeType":"663","messageId":"664","endLine":89,"endColumn":60},{"ruleId":"672","severity":1,"message":"673","line":102,"column":9,"nodeType":"674","messageId":"675","endLine":116,"endColumn":10},{"ruleId":"661","severity":1,"message":"662","line":117,"column":67,"nodeType":"663","messageId":"664","endLine":117,"endColumn":69},{"ruleId":"648","severity":1,"message":"718","line":132,"column":6,"nodeType":"650","endLine":136,"endColumn":4,"suggestions":"719"},{"ruleId":"648","severity":1,"message":"699","line":152,"column":6,"nodeType":"650","endLine":152,"endColumn":28,"suggestions":"720"},{"ruleId":"642","severity":1,"message":"721","line":35,"column":9,"nodeType":"644","messageId":"645","endLine":35,"endColumn":16},{"ruleId":"648","severity":1,"message":"722","line":64,"column":6,"nodeType":"650","endLine":64,"endColumn":76,"suggestions":"723"},{"ruleId":"648","severity":1,"message":"699","line":35,"column":6,"nodeType":"650","endLine":35,"endColumn":53,"suggestions":"724"},{"ruleId":"661","severity":1,"message":"662","line":23,"column":55,"nodeType":"663","messageId":"664","endLine":23,"endColumn":57},{"ruleId":"648","severity":1,"message":"699","line":46,"column":6,"nodeType":"650","endLine":46,"endColumn":53,"suggestions":"725"},{"ruleId":"672","severity":1,"message":"673","line":51,"column":5,"nodeType":"674","messageId":"675","endLine":64,"endColumn":6},{"ruleId":"661","severity":1,"message":"662","line":53,"column":19,"nodeType":"663","messageId":"664","endLine":53,"endColumn":21},{"ruleId":"705","severity":1,"message":"706","line":58,"column":7,"nodeType":"707","messageId":"708","endLine":60,"endColumn":15},{"ruleId":"661","severity":1,"message":"662","line":88,"column":18,"nodeType":"663","messageId":"664","endLine":88,"endColumn":20},{"ruleId":"661","severity":1,"message":"662","line":26,"column":18,"nodeType":"663","messageId":"664","endLine":26,"endColumn":20},{"ruleId":"648","severity":1,"message":"699","line":36,"column":6,"nodeType":"650","endLine":36,"endColumn":57,"suggestions":"726"},{"ruleId":"661","severity":1,"message":"662","line":165,"column":51,"nodeType":"663","messageId":"664","endLine":165,"endColumn":53},{"ruleId":"648","severity":1,"message":"727","line":48,"column":6,"nodeType":"650","endLine":48,"endColumn":61,"suggestions":"728"},{"ruleId":"658","severity":1,"message":"659","line":170,"column":23,"nodeType":"660","endLine":170,"endColumn":56},{"ruleId":"672","severity":1,"message":"673","line":47,"column":5,"nodeType":"674","messageId":"675","endLine":61,"endColumn":6},{"ruleId":"661","severity":1,"message":"729","line":49,"column":19,"nodeType":"663","messageId":"664","endLine":49,"endColumn":21},{"ruleId":"661","severity":1,"message":"729","line":57,"column":19,"nodeType":"663","messageId":"664","endLine":57,"endColumn":21},{"ruleId":"661","severity":1,"message":"662","line":74,"column":17,"nodeType":"663","messageId":"664","endLine":74,"endColumn":19},{"ruleId":"661","severity":1,"message":"729","line":84,"column":19,"nodeType":"663","messageId":"664","endLine":84,"endColumn":21},{"ruleId":"642","severity":1,"message":"730","line":58,"column":10,"nodeType":"644","messageId":"645","endLine":58,"endColumn":21},{"ruleId":"642","severity":1,"message":"731","line":61,"column":10,"nodeType":"644","messageId":"645","endLine":61,"endColumn":26},{"ruleId":"648","severity":1,"message":"732","line":100,"column":6,"nodeType":"650","endLine":100,"endColumn":8,"suggestions":"733"},{"ruleId":"648","severity":1,"message":"734","line":108,"column":6,"nodeType":"650","endLine":108,"endColumn":8,"suggestions":"735"},{"ruleId":"648","severity":1,"message":"736","line":142,"column":6,"nodeType":"650","endLine":142,"endColumn":57,"suggestions":"737"},{"ruleId":"672","severity":1,"message":"673","line":182,"column":5,"nodeType":"674","messageId":"675","endLine":192,"endColumn":6},{"ruleId":"677","severity":1,"message":"678","line":208,"column":32,"nodeType":"679","messageId":"680","endLine":208,"endColumn":34},{"ruleId":"661","severity":1,"message":"662","line":214,"column":20,"nodeType":"663","messageId":"664","endLine":214,"endColumn":22},{"ruleId":"642","severity":1,"message":"738","line":13,"column":7,"nodeType":"644","messageId":"645","endLine":13,"endColumn":14},{"ruleId":"677","severity":1,"message":"678","line":182,"column":59,"nodeType":"679","messageId":"680","endLine":182,"endColumn":61},{"ruleId":"648","severity":1,"message":"739","line":243,"column":6,"nodeType":"650","endLine":243,"endColumn":8,"suggestions":"740"},{"ruleId":"648","severity":1,"message":"666","line":249,"column":6,"nodeType":"650","endLine":249,"endColumn":14,"suggestions":"741"},{"ruleId":"648","severity":1,"message":"668","line":285,"column":6,"nodeType":"650","endLine":289,"endColumn":4,"suggestions":"742"},{"ruleId":"642","severity":1,"message":"676","line":79,"column":9,"nodeType":"644","messageId":"645","endLine":79,"endColumn":25},{"ruleId":"642","severity":1,"message":"713","line":45,"column":7,"nodeType":"644","messageId":"645","endLine":45,"endColumn":28},{"ruleId":"661","severity":1,"message":"662","line":48,"column":13,"nodeType":"663","messageId":"664","endLine":48,"endColumn":15},{"ruleId":"648","severity":1,"message":"714","line":72,"column":6,"nodeType":"650","endLine":72,"endColumn":8,"suggestions":"743"},{"ruleId":"648","severity":1,"message":"699","line":89,"column":6,"nodeType":"650","endLine":89,"endColumn":76,"suggestions":"744"},{"ruleId":"648","severity":1,"message":"714","line":63,"column":6,"nodeType":"650","endLine":63,"endColumn":8,"suggestions":"745"},{"ruleId":"648","severity":1,"message":"699","line":80,"column":6,"nodeType":"650","endLine":80,"endColumn":76,"suggestions":"746"},{"ruleId":"642","severity":1,"message":"747","line":32,"column":9,"nodeType":"644","messageId":"645","endLine":32,"endColumn":16},{"ruleId":"648","severity":1,"message":"691","line":50,"column":6,"nodeType":"650","endLine":50,"endColumn":8,"suggestions":"748"},{"ruleId":"648","severity":1,"message":"693","line":66,"column":6,"nodeType":"650","endLine":66,"endColumn":53,"suggestions":"749"},{"ruleId":"648","severity":1,"message":"695","line":82,"column":6,"nodeType":"650","endLine":82,"endColumn":61,"suggestions":"750"},{"ruleId":"661","severity":1,"message":"662","line":131,"column":15,"nodeType":"663","messageId":"664","endLine":131,"endColumn":17},{"ruleId":"658","severity":1,"message":"659","line":325,"column":23,"nodeType":"660","endLine":325,"endColumn":56},{"ruleId":"642","severity":1,"message":"747","line":33,"column":9,"nodeType":"644","messageId":"645","endLine":33,"endColumn":16},{"ruleId":"648","severity":1,"message":"691","line":49,"column":6,"nodeType":"650","endLine":49,"endColumn":8,"suggestions":"751"},{"ruleId":"648","severity":1,"message":"693","line":65,"column":6,"nodeType":"650","endLine":65,"endColumn":53,"suggestions":"752"},{"ruleId":"648","severity":1,"message":"695","line":81,"column":6,"nodeType":"650","endLine":81,"endColumn":61,"suggestions":"753"},{"ruleId":"661","severity":1,"message":"662","line":129,"column":15,"nodeType":"663","messageId":"664","endLine":129,"endColumn":17},{"ruleId":"658","severity":1,"message":"659","line":343,"column":23,"nodeType":"660","endLine":343,"endColumn":56},{"ruleId":"642","severity":1,"message":"754","line":11,"column":3,"nodeType":"644","messageId":"645","endLine":11,"endColumn":14},{"ruleId":"642","severity":1,"message":"755","line":13,"column":3,"nodeType":"644","messageId":"645","endLine":13,"endColumn":15},{"ruleId":"642","severity":1,"message":"756","line":14,"column":3,"nodeType":"644","messageId":"645","endLine":14,"endColumn":18},{"ruleId":"661","severity":1,"message":"729","line":102,"column":32,"nodeType":"663","messageId":"664","endLine":102,"endColumn":34},{"ruleId":"661","severity":1,"message":"729","line":105,"column":45,"nodeType":"663","messageId":"664","endLine":105,"endColumn":47},{"ruleId":"661","severity":1,"message":"729","line":120,"column":49,"nodeType":"663","messageId":"664","endLine":120,"endColumn":51},{"ruleId":"661","severity":1,"message":"729","line":135,"column":19,"nodeType":"663","messageId":"664","endLine":135,"endColumn":21},{"ruleId":"661","severity":1,"message":"662","line":160,"column":32,"nodeType":"663","messageId":"664","endLine":160,"endColumn":34},{"ruleId":"642","severity":1,"message":"757","line":8,"column":8,"nodeType":"644","messageId":"645","endLine":8,"endColumn":15},{"ruleId":"642","severity":1,"message":"703","line":36,"column":10,"nodeType":"644","messageId":"645","endLine":36,"endColumn":16},{"ruleId":"648","severity":1,"message":"758","line":77,"column":6,"nodeType":"650","endLine":77,"endColumn":47,"suggestions":"759"},{"ruleId":"648","severity":1,"message":"760","line":94,"column":6,"nodeType":"650","endLine":94,"endColumn":69,"suggestions":"761"},{"ruleId":"661","severity":1,"message":"662","line":107,"column":22,"nodeType":"663","messageId":"664","endLine":107,"endColumn":24},{"ruleId":"672","severity":1,"message":"673","line":185,"column":7,"nodeType":"674","messageId":"675","endLine":189,"endColumn":8},{"ruleId":"661","severity":1,"message":"662","line":217,"column":15,"nodeType":"663","messageId":"664","endLine":217,"endColumn":17},{"ruleId":"648","severity":1,"message":"762","line":29,"column":6,"nodeType":"650","endLine":29,"endColumn":53,"suggestions":"763"},{"ruleId":"642","severity":1,"message":"764","line":1,"column":38,"nodeType":"644","messageId":"645","endLine":1,"endColumn":44},{"ruleId":"642","severity":1,"message":"765","line":16,"column":7,"nodeType":"644","messageId":"645","endLine":16,"endColumn":19},{"ruleId":"677","severity":1,"message":"678","line":33,"column":7,"nodeType":"679","messageId":"680","endLine":33,"endColumn":9},{"ruleId":"642","severity":1,"message":"703","line":108,"column":10,"nodeType":"644","messageId":"645","endLine":108,"endColumn":16},{"ruleId":"648","severity":1,"message":"739","line":125,"column":6,"nodeType":"650","endLine":125,"endColumn":8,"suggestions":"766"},{"ruleId":"648","severity":1,"message":"666","line":131,"column":6,"nodeType":"650","endLine":131,"endColumn":14,"suggestions":"767"},{"ruleId":"648","severity":1,"message":"668","line":167,"column":6,"nodeType":"650","endLine":171,"endColumn":4,"suggestions":"768"},{"ruleId":"642","severity":1,"message":"769","line":78,"column":10,"nodeType":"644","messageId":"645","endLine":78,"endColumn":24},{"ruleId":"642","severity":1,"message":"770","line":78,"column":26,"nodeType":"644","messageId":"645","endLine":78,"endColumn":46},{"ruleId":"648","severity":1,"message":"771","line":110,"column":6,"nodeType":"650","endLine":110,"endColumn":8,"suggestions":"772"},{"ruleId":"648","severity":1,"message":"666","line":135,"column":6,"nodeType":"650","endLine":135,"endColumn":57,"suggestions":"773"},{"ruleId":"661","severity":1,"message":"729","line":149,"column":32,"nodeType":"663","messageId":"664","endLine":149,"endColumn":34},{"ruleId":"661","severity":1,"message":"729","line":152,"column":45,"nodeType":"663","messageId":"664","endLine":152,"endColumn":47},{"ruleId":"661","severity":1,"message":"729","line":167,"column":49,"nodeType":"663","messageId":"664","endLine":167,"endColumn":51},{"ruleId":"661","severity":1,"message":"729","line":182,"column":19,"nodeType":"663","messageId":"664","endLine":182,"endColumn":21},{"ruleId":"661","severity":1,"message":"662","line":204,"column":32,"nodeType":"663","messageId":"664","endLine":204,"endColumn":34},{"ruleId":"661","severity":1,"message":"662","line":73,"column":13,"nodeType":"663","messageId":"664","endLine":73,"endColumn":15},{"ruleId":"661","severity":1,"message":"662","line":25,"column":59,"nodeType":"663","messageId":"664","endLine":25,"endColumn":61},{"ruleId":"661","severity":1,"message":"662","line":61,"column":32,"nodeType":"663","messageId":"664","endLine":61,"endColumn":34},{"ruleId":"661","severity":1,"message":"662","line":69,"column":32,"nodeType":"663","messageId":"664","endLine":69,"endColumn":34},{"ruleId":"661","severity":1,"message":"662","line":77,"column":32,"nodeType":"663","messageId":"664","endLine":77,"endColumn":34},{"ruleId":"677","severity":1,"message":"678","line":100,"column":40,"nodeType":"679","messageId":"680","endLine":100,"endColumn":42},{"ruleId":"661","severity":1,"message":"662","line":119,"column":31,"nodeType":"663","messageId":"664","endLine":119,"endColumn":33},{"ruleId":"642","severity":1,"message":"774","line":19,"column":21,"nodeType":"644","messageId":"645","endLine":19,"endColumn":32},{"ruleId":"661","severity":1,"message":"662","line":31,"column":34,"nodeType":"663","messageId":"664","endLine":31,"endColumn":36},{"ruleId":"648","severity":1,"message":"775","line":34,"column":6,"nodeType":"650","endLine":34,"endColumn":16,"suggestions":"776"},{"ruleId":"648","severity":1,"message":"777","line":39,"column":6,"nodeType":"650","endLine":39,"endColumn":8,"suggestions":"778"},{"ruleId":"661","severity":1,"message":"662","line":53,"column":44,"nodeType":"663","messageId":"664","endLine":53,"endColumn":46},{"ruleId":"661","severity":1,"message":"662","line":54,"column":45,"nodeType":"663","messageId":"664","endLine":54,"endColumn":47},{"ruleId":"661","severity":1,"message":"662","line":55,"column":45,"nodeType":"663","messageId":"664","endLine":55,"endColumn":47},{"ruleId":"661","severity":1,"message":"662","line":33,"column":15,"nodeType":"663","messageId":"664","endLine":33,"endColumn":17},{"ruleId":"661","severity":1,"message":"662","line":36,"column":52,"nodeType":"663","messageId":"664","endLine":36,"endColumn":54},{"ruleId":"661","severity":1,"message":"662","line":66,"column":20,"nodeType":"663","messageId":"664","endLine":66,"endColumn":22},{"ruleId":"661","severity":1,"message":"662","line":84,"column":20,"nodeType":"663","messageId":"664","endLine":84,"endColumn":22},{"ruleId":"661","severity":1,"message":"662","line":95,"column":20,"nodeType":"663","messageId":"664","endLine":95,"endColumn":22},{"ruleId":"661","severity":1,"message":"662","line":102,"column":20,"nodeType":"663","messageId":"664","endLine":102,"endColumn":22},{"ruleId":"672","severity":1,"message":"673","line":38,"column":5,"nodeType":"674","messageId":"675","endLine":44,"endColumn":6},{"ruleId":"648","severity":1,"message":"779","line":45,"column":6,"nodeType":"650","endLine":45,"endColumn":14,"suggestions":"780"},{"ruleId":"648","severity":1,"message":"695","line":65,"column":6,"nodeType":"650","endLine":65,"endColumn":71,"suggestions":"781"},{"ruleId":"658","severity":1,"message":"659","line":127,"column":19,"nodeType":"660","endLine":127,"endColumn":52},{"ruleId":"661","severity":1,"message":"662","line":57,"column":28,"nodeType":"663","messageId":"664","endLine":57,"endColumn":30},{"ruleId":"782","severity":1,"message":"783","line":14,"column":7,"nodeType":"660","endLine":14,"endColumn":40},{"ruleId":"642","severity":1,"message":"670","line":1,"column":17,"nodeType":"644","messageId":"645","endLine":1,"endColumn":25},{"ruleId":"642","severity":1,"message":"764","line":1,"column":27,"nodeType":"644","messageId":"645","endLine":1,"endColumn":33},{"ruleId":"648","severity":1,"message":"784","line":53,"column":6,"nodeType":"650","endLine":53,"endColumn":61,"suggestions":"785"},{"ruleId":"661","severity":1,"message":"662","line":126,"column":38,"nodeType":"663","messageId":"664","endLine":126,"endColumn":40},{"ruleId":"648","severity":1,"message":"699","line":44,"column":6,"nodeType":"650","endLine":49,"endColumn":4,"suggestions":"786"},{"ruleId":"661","severity":1,"message":"662","line":63,"column":15,"nodeType":"663","messageId":"664","endLine":63,"endColumn":17},{"ruleId":"661","severity":1,"message":"662","line":73,"column":15,"nodeType":"663","messageId":"664","endLine":73,"endColumn":17},{"ruleId":"672","severity":1,"message":"673","line":45,"column":5,"nodeType":"674","messageId":"675","endLine":59,"endColumn":6},{"ruleId":"648","severity":1,"message":"787","line":60,"column":6,"nodeType":"650","endLine":60,"endColumn":14,"suggestions":"788"},{"ruleId":"648","severity":1,"message":"695","line":75,"column":6,"nodeType":"650","endLine":75,"endColumn":61,"suggestions":"789"},{"ruleId":"648","severity":1,"message":"695","line":96,"column":6,"nodeType":"650","endLine":96,"endColumn":77,"suggestions":"790"},{"ruleId":"658","severity":1,"message":"659","line":201,"column":19,"nodeType":"660","endLine":201,"endColumn":52},{"ruleId":"658","severity":1,"message":"659","line":217,"column":19,"nodeType":"660","endLine":217,"endColumn":52},{"ruleId":"791","severity":1,"message":"792","line":11,"column":1,"nodeType":"793","endLine":21,"endColumn":3},{"ruleId":"672","severity":1,"message":"673","line":35,"column":7,"nodeType":"674","messageId":"675","endLine":89,"endColumn":8},{"ruleId":"661","severity":1,"message":"729","line":38,"column":24,"nodeType":"663","messageId":"664","endLine":38,"endColumn":26},{"ruleId":"661","severity":1,"message":"662","line":43,"column":30,"nodeType":"663","messageId":"664","endLine":43,"endColumn":32},{"ruleId":"661","severity":1,"message":"662","line":54,"column":30,"nodeType":"663","messageId":"664","endLine":54,"endColumn":32},{"ruleId":"661","severity":1,"message":"662","line":66,"column":30,"nodeType":"663","messageId":"664","endLine":66,"endColumn":32},{"ruleId":"661","severity":1,"message":"662","line":76,"column":30,"nodeType":"663","messageId":"664","endLine":76,"endColumn":32},{"ruleId":"661","severity":1,"message":"729","line":87,"column":24,"nodeType":"663","messageId":"664","endLine":87,"endColumn":26},{"ruleId":"661","severity":1,"message":"662","line":95,"column":28,"nodeType":"663","messageId":"664","endLine":95,"endColumn":30},{"ruleId":"661","severity":1,"message":"662","line":97,"column":28,"nodeType":"663","messageId":"664","endLine":97,"endColumn":30},{"ruleId":"791","severity":1,"message":"792","line":135,"column":1,"nodeType":"793","endLine":135,"endColumn":52},{"ruleId":"661","severity":1,"message":"662","line":6,"column":32,"nodeType":"663","messageId":"664","endLine":6,"endColumn":34},{"ruleId":"661","severity":1,"message":"662","line":9,"column":33,"nodeType":"663","messageId":"664","endLine":9,"endColumn":35},{"ruleId":"661","severity":1,"message":"662","line":14,"column":34,"nodeType":"663","messageId":"664","endLine":14,"endColumn":36},{"ruleId":"677","severity":1,"message":"678","line":7,"column":33,"nodeType":"679","messageId":"680","endLine":7,"endColumn":35},{"ruleId":"661","severity":1,"message":"662","line":50,"column":13,"nodeType":"663","messageId":"664","endLine":50,"endColumn":15},{"ruleId":"791","severity":1,"message":"792","line":99,"column":1,"nodeType":"793","endLine":109,"endColumn":3},{"ruleId":"661","severity":1,"message":"662","line":11,"column":35,"nodeType":"663","messageId":"664","endLine":11,"endColumn":37},{"ruleId":"661","severity":1,"message":"662","line":18,"column":36,"nodeType":"663","messageId":"664","endLine":18,"endColumn":38},{"ruleId":"672","severity":1,"message":"673","line":11,"column":7,"nodeType":"674","messageId":"675","endLine":20,"endColumn":8},{"ruleId":"705","severity":1,"message":"706","line":17,"column":9,"nodeType":"707","messageId":"708","endLine":19,"endColumn":17},{"ruleId":"661","severity":1,"message":"729","line":23,"column":42,"nodeType":"663","messageId":"664","endLine":23,"endColumn":44},{"ruleId":"672","severity":1,"message":"673","line":12,"column":7,"nodeType":"674","messageId":"675","endLine":24,"endColumn":8},"no-unused-vars","'token' is assigned a value but never used.","Identifier","unusedVar","'setToken' is assigned a value but never used.","'loading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setIsAuth' and 'setcurrentLoginUser'. Either include them or remove the dependency array.","ArrayExpression",["794"],"no-native-reassign",["795"],"no-negated-in-lhs",["796"],"'HttpLink' is defined but never used.","'port' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["797"],"React Hook useEffect has missing dependencies: 'examId', 'examinationEndedResult', 'navigate', 'scoreDetails', 'setCurrentIndex', 'setDuration', 'setExamQuestions', 'setExamStarted', 'setSkippedQuestion', and 'submitting'. Either include them or remove the dependency array. You can also do a functional update 'setSubmitting(s => ...)' if you only need 'submitting' in the 'setSubmitting' call.",["798"],"'useState' is defined but never used.","'disableF5' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'onUnloadFunction' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'history' and 'submitted'. Either include them or remove the dependency array. You can also do a functional update 'setSubmitted(s => ...)' if you only need 'submitted' in the 'setSubmitted' call.",["799"],"React Hook useEffect has a missing dependency: 'submitted'. Either include it or remove the dependency array. You can also do a functional update 'setSubmitted(s => ...)' if you only need 'submitted' in the 'setSubmitted' call.",["800"],"React Hook useEffect has a missing dependency: 'loadingData'. Either include it or remove the dependency array. You can also do a functional update 'setLoading(l => ...)' if you only need 'loadingData' in the 'setLoading' call.",["801"],"The ref value 'textAnswer.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'textAnswer.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'editMode' and 'questionToEdit'. Either include them or remove the dependency array.",["802"],"'useQuery' is defined but never used.","React Hook useEffect has a missing dependency: 'examsQuery'. Either include it or remove the dependency array.",["803"],"React Hook useEffect has a missing dependency: 'examsQueryResult.loading'. Either include it or remove the dependency array.",["804"],"React Hook useEffect has a missing dependency: 'queryRan'. Either include it or remove the dependency array. You can also do a functional update 'setQueryRan(q => ...)' if you only need 'queryRan' in the 'setQueryRan' call.",["805"],"'examTypeQuery' is assigned a value but never used.","'examTypeResult' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'processing'. Either include it or remove the dependency array. You can also do a functional update 'setProcessing(p => ...)' if you only need 'processing' in the 'setProcessing' call.",["806"],["807"],["808"],"'errors' is assigned a value but never used.","'processing' is assigned a value but never used.","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'isAuth' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'navigate', 'setIsAuth', 'setToken', and 'setcurrentLoginUser'. Either include them or remove the dependency array.",["809"],"'moment' is defined but never used.","'convertMinutesToHours' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getScriptFunction' and 'processing'. Either include them or remove the dependency array. You can also do a functional update 'setProcessing(p => ...)' if you only need 'processing' in the 'setProcessing' call.",["810"],["811"],"'setHtml' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'duration', 'examProcessing', 'examQuestions', 'navigate', and 'setExamStarted'. Either include them or remove the dependency array. You can also do a functional update 'setExamProcessing(e => ...)' if you only need 'examProcessing' in the 'setExamProcessing' call.",["812"],["813"],"'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'processing' and 'resultQueryData.called'. Either include them or remove the dependency array. You can also do a functional update 'setProcessing(p => ...)' if you only need 'processing' in the 'setProcessing' call.",["814"],["815"],["816"],["817"],"React Hook useEffect has a missing dependency: 'processingData'. Either include it or remove the dependency array. You can also do a functional update 'setProcessingData(p => ...)' if you only need 'processingData' in the 'setProcessingData' call.",["818"],"Expected '!==' and instead saw '!='.","'inputLength' is assigned a value but never used.","'selectedExamType' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'question'. Either include it or remove the dependency array.",["819"],"React Hook useEffect has a missing dependency: 'examTypeQuery'. Either include it or remove the dependency array.",["820"],"React Hook useEffect has missing dependencies: 'navigate' and 'saveSpellingResult.error'. Either include them or remove the dependency array.",["821"],"'baseUrl' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'questions' and 'setExamQuestions'. Either include them or remove the dependency array.",["822"],["823"],["824"],["825"],["826"],["827"],["828"],"'details' is assigned a value but never used.",["829"],["830"],["831"],["832"],["833"],["834"],"'EditorState' is defined but never used.","'ContentState' is defined but never used.","'convertFromHTML' is defined but never used.","'methods' is defined but never used.","React Hook useEffect has a missing dependency: 'autoProcessing'. Either include it or remove the dependency array. You can also do a functional update 'setAutoProcessing(a => ...)' if you only need 'autoProcessing' in the 'setAutoProcessing' call.",["835"],"React Hook useEffect has missing dependencies: 'processing' and 'submitted'. Either include them or remove the dependency array. You can also do a functional update 'setProcessing(p => ...)' if you only need 'processing' in the 'setProcessing' call.",["836"],"React Hook useEffect has a missing dependency: 'error.message'. Either include it or remove the dependency array.",["837"],"'useRef' is defined but never used.","'customStyles' is assigned a value but never used.",["838"],["839"],["840"],"'questionsQuery' is assigned a value but never used.","'questionsQueryResult' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'questionData'. Either include it or remove the dependency array.",["841"],["842"],"'setDuration' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'submitQuiz' and 'timerStarted'. Either include them or remove the dependency array. If 'submitQuiz' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["843"],"React Hook useEffect has a missing dependency: 'start'. Either include it or remove the dependency array.",["844"],"React Hook useEffect has missing dependencies: 'essayQuestionsQuery' and 'examType'. Either include them or remove the dependency array.",["845"],["846"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has missing dependencies: 'processingData' and 'submitting'. Either include them or remove the dependency array. You can also do a functional update 'setProcessing(p => ...)' if you only need 'processingData' in the 'setProcessing' call.",["847"],["848"],"React Hook useEffect has missing dependencies: 'examType', 'questionsQuery', and 'spellingQuestionsQuery'. Either include them or remove the dependency array.",["849"],["850"],["851"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"852","fix":"853"},"no-global-assign","no-unsafe-negation",{"desc":"854","fix":"855"},{"desc":"856","fix":"857"},{"desc":"858","fix":"859"},{"desc":"860","fix":"861"},{"desc":"862","fix":"863"},{"desc":"864","fix":"865"},{"desc":"866","fix":"867"},{"desc":"868","fix":"869"},{"desc":"870","fix":"871"},{"desc":"872","fix":"873"},{"desc":"874","fix":"875"},{"desc":"876","fix":"877"},{"desc":"878","fix":"879"},{"desc":"880","fix":"881"},{"desc":"882","fix":"883"},{"desc":"884","fix":"885"},{"desc":"886","fix":"887"},{"desc":"888","fix":"889"},{"desc":"890","fix":"891"},{"desc":"892","fix":"893"},{"desc":"894","fix":"895"},{"desc":"896","fix":"897"},{"desc":"898","fix":"899"},{"desc":"900","fix":"901"},{"desc":"902","fix":"903"},{"desc":"904","fix":"905"},{"desc":"854","fix":"906"},{"desc":"856","fix":"907"},{"desc":"880","fix":"908"},{"desc":"882","fix":"909"},{"desc":"880","fix":"910"},{"desc":"882","fix":"911"},{"desc":"866","fix":"912"},{"desc":"868","fix":"913"},{"desc":"870","fix":"914"},{"desc":"866","fix":"915"},{"desc":"868","fix":"916"},{"desc":"870","fix":"917"},{"desc":"918","fix":"919"},{"desc":"920","fix":"921"},{"desc":"922","fix":"923"},{"desc":"904","fix":"924"},{"desc":"854","fix":"925"},{"desc":"856","fix":"926"},{"desc":"927","fix":"928"},{"desc":"929","fix":"930"},{"desc":"931","fix":"932"},{"desc":"933","fix":"934"},{"desc":"935","fix":"936"},{"desc":"937","fix":"938"},{"desc":"939","fix":"940"},{"desc":"941","fix":"942"},{"desc":"943","fix":"944"},{"desc":"870","fix":"945"},{"desc":"946","fix":"947"},"Update the dependencies array to be: [currentLoginUser, setIsAuth, setcurrentLoginUser]",{"range":"948","text":"949"},"Update the dependencies array to be: [examId, navigate]",{"range":"950","text":"951"},"Update the dependencies array to be: [examinationEndedResult.loading, examinationEndedResult.data, examinationEndedResult.error, examinationEndedResult, submitting, setDuration, setExamStarted, setExamQuestions, setCurrentIndex, setSkippedQuestion, navigate, examId, scoreDetails]",{"range":"952","text":"953"},"Update the dependencies array to be: [editQuestionResult.error, editQuestionResult.data, submitted, history]",{"range":"954","text":"955"},"Update the dependencies array to be: [submitQuestionToDBResult.error, submitQuestionToDBResult.data, submitted]",{"range":"956","text":"957"},"Update the dependencies array to be: [loading, error, data, loadingData]",{"range":"958","text":"959"},"Update the dependencies array to be: [editMode, questionToEdit]",{"range":"960","text":"961"},"Update the dependencies array to be: [examsQuery]",{"range":"962","text":"963"},"Update the dependencies array to be: [examsQueryResult.data, examsQueryResult.error, examsQueryResult.loading]",{"range":"964","text":"965"},"Update the dependencies array to be: [questionsQueryResult.error, questionsQueryResult.data, queryRan]",{"range":"966","text":"967"},"Update the dependencies array to be: [createEssayScheduleResult.error, createEssayScheduleResult.data, processing]",{"range":"968","text":"969"},"Update the dependencies array to be: [createSpellingScheduleResult.error, createSpellingScheduleResult.data, processing]",{"range":"970","text":"971"},"Update the dependencies array to be: [createScheduleResult.error, createScheduleResult.data, processing]",{"range":"972","text":"973"},"Update the dependencies array to be: [loginUserResult, navigate, setIsAuth, setToken, setcurrentLoginUser, submitted]",{"range":"974","text":"975"},"Update the dependencies array to be: [getScriptFunction, processing]",{"range":"976","text":"977"},"Update the dependencies array to be: [getScriptResult.loading, getScriptResult.data, getScriptResult.error, processing]",{"range":"978","text":"979"},"Update the dependencies array to be: [duration, examProcessing, examQuestions, navigate, setExamStarted, startExaminationResult.data, startExaminationResult.error, startExaminationResult.loading]",{"range":"980","text":"981"},"Update the dependencies array to be: [data, loading, error, processing]",{"range":"982","text":"983"},"Update the dependencies array to be: [resultQueryData.loading, resultQueryData.data, resultQueryData.error, resultQueryData.called, processing]",{"range":"984","text":"985"},"Update the dependencies array to be: [createExamResult.data, createExamResult.error, processing]",{"range":"986","text":"987"},"Update the dependencies array to be: [createUserResult.data, createUserResult.error, processing]",{"range":"988","text":"989"},"Update the dependencies array to be: [changeStatusResult.data, changeStatusResult.error, processing]",{"range":"990","text":"991"},"Update the dependencies array to be: [processingData, statusFunctionResult.data, statusFunctionResult.error]",{"range":"992","text":"993"},"Update the dependencies array to be: [question]",{"range":"994","text":"995"},"Update the dependencies array to be: [examTypeQuery]",{"range":"996","text":"997"},"Update the dependencies array to be: [editSpellingResult.data, editSpellingResult.error, navigate, saveSpellingResult.error]",{"range":"998","text":"999"},"Update the dependencies array to be: [questions, setExamQuestions]",{"range":"1000","text":"1001"},{"range":"1002","text":"951"},{"range":"1003","text":"953"},{"range":"1004","text":"977"},{"range":"1005","text":"979"},{"range":"1006","text":"977"},{"range":"1007","text":"979"},{"range":"1008","text":"963"},{"range":"1009","text":"965"},{"range":"1010","text":"967"},{"range":"1011","text":"963"},{"range":"1012","text":"965"},{"range":"1013","text":"967"},"Update the dependencies array to be: [autoGenResult.data, autoGenResult.error, autoProcessing]",{"range":"1014","text":"1015"},"Update the dependencies array to be: [addQuestionsToExamResult.error, addQuestionsToExamResult.data, processing, submitted]",{"range":"1016","text":"1017"},"Update the dependencies array to be: [cancelExamResult.data, cancelExamResult.error, error.message]",{"range":"1018","text":"1019"},{"range":"1020","text":"1001"},{"range":"1021","text":"951"},{"range":"1022","text":"953"},"Update the dependencies array to be: [questionData]",{"range":"1023","text":"1024"},"Update the dependencies array to be: [editQuestionResult.data, editQuestionResult.error, navigate]",{"range":"1025","text":"1026"},"Update the dependencies array to be: [submitQuiz, timeLeft, timerStarted]",{"range":"1027","text":"1028"},"Update the dependencies array to be: [start]",{"range":"1029","text":"1030"},"Update the dependencies array to be: [essayQuestionsQuery, examId, examType]",{"range":"1031","text":"1032"},"Update the dependencies array to be: [essayQuestionsQueryResult.error, essayQuestionsQueryResult.data, queryRan]",{"range":"1033","text":"1034"},"Update the dependencies array to be: [changePasswordResult.data, changePasswordResult.error, processingData, submitting]",{"range":"1035","text":"1036"},"Update the dependencies array to be: [scheduleExamResult.error, scheduleExamResult.loading, scheduleExamResult.data, scheduleExamResult.called, processing]",{"range":"1037","text":"1038"},"Update the dependencies array to be: [examId, examType, questionsQuery, spellingQuestionsQuery]",{"range":"1039","text":"1040"},{"range":"1041","text":"967"},"Update the dependencies array to be: [spellingQuestionsQueryResult.error, spellingQuestionsQueryResult.data, queryRan]",{"range":"1042","text":"1043"},[6478,6496],"[currentLoginUser, setIsAuth, setcurrentLoginUser]",[1974,1982],"[examId, navigate]",[3128,3236],"[examinationEndedResult.loading, examinationEndedResult.data, examinationEndedResult.error, examinationEndedResult, submitting, setDuration, setExamStarted, setExamQuestions, setCurrentIndex, setSkippedQuestion, navigate, examId, scoreDetails]",[2551,2602],"[editQuestionResult.error, editQuestionResult.data, submitted, history]",[2965,3028],"[submitQuestionToDBResult.error, submitQuestionToDBResult.data, submitted]",[3291,3313],"[loading, error, data, loadingData]",[4719,4721],"[editMode, questionToEdit]",[1603,1605],"[examsQuery]",[1936,1983],"[examsQueryResult.data, examsQueryResult.error, examsQueryResult.loading]",[2389,2444],"[questionsQueryResult.error, questionsQueryResult.data, queryRan]",[1967,2032],"[createEssayScheduleResult.error, createEssayScheduleResult.data, processing]",[2460,2531],"[createSpellingScheduleResult.error, createSpellingScheduleResult.data, processing]",[2935,2990],"[createScheduleResult.error, createScheduleResult.data, processing]",[2979,3007],"[loginUserResult, navigate, setIsAuth, setToken, setcurrentLoginUser, submitted]",[1740,1742],"[getScriptFunction, processing]",[2167,2237],"[getScriptResult.loading, getScriptResult.data, getScriptResult.error, processing]",[3807,3915],"[duration, examProcessing, examQuestions, navigate, setExamStarted, startExaminationResult.data, startExaminationResult.error, startExaminationResult.loading]",[4233,4255],"[data, loading, error, processing]",[1784,1854],"[resultQueryData.loading, resultQueryData.data, resultQueryData.error, resultQueryData.called, processing]",[958,1005],"[createExamResult.data, createExamResult.error, processing]",[1502,1549],"[createUserResult.data, createUserResult.error, processing]",[1266,1317],"[changeStatusResult.data, changeStatusResult.error, processing]",[1519,1574],"[processingData, statusFunctionResult.data, statusFunctionResult.error]",[2887,2889],"[question]",[3016,3018],"[examTypeQuery]",[3860,3911],"[editSpellingResult.data, editSpellingResult.error, navigate, saveSpellingResult.error]",[5112,5114],"[questions, setExamQuestions]",[5204,5212],[6220,6328],[1698,1700],[2125,2195],[1414,1416],[1841,1911],[1656,1658],[1989,2036],[2471,2526],[1672,1674],[2005,2052],[2481,2536],[2423,2464],"[autoGenResult.data, autoGenResult.error, autoProcessing]",[2913,2976],"[addQuestionsToExamResult.error, addQuestionsToExamResult.data, processing, submitted]",[1026,1073],"[cancelExamResult.data, cancelExamResult.error, error.message]",[3195,3197],[3287,3295],[4293,4401],[3330,3332],"[questionData]",[4033,4084],"[editQuestionResult.data, editQuestionResult.error, navigate]",[947,957],"[submitQuiz, timeLeft, timerStarted]",[1026,1028],"[start]",[1224,1232],"[essayQuestionsQuery, examId, examType]",[1745,1810],"[essayQuestionsQueryResult.error, essayQuestionsQueryResult.data, queryRan]",[1391,1446],"[changePasswordResult.data, changePasswordResult.error, processingData, submitting]",[1331,1458],"[scheduleExamResult.error, scheduleExamResult.loading, scheduleExamResult.data, scheduleExamResult.called, processing]",[1626,1634],"[examId, examType, questionsQuery, spellingQuestionsQuery]",[2079,2134],[2675,2746],"[spellingQuestionsQueryResult.error, spellingQuestionsQueryResult.data, queryRan]"]